%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: cours_trinomes-du-second-degre.dvi
%%CreationDate: Thu Aug 12 17:35:01 2021
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Regular NimbusSanL-Regu
%%+ Fourier-Math-Letters-Italic Utopia-Italic Utopia-Bold
%%+ Fourier-Math-BlackBoard Fourier-Math-Symbols MSAM10
%%+ Fourier-Math-Letters
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o
%+ cours_trinomes-du-second-degre.ps cours_trinomes-du-second-degre.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.12:1934
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 838 2018-11-14 19:00:45Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.29, 2018/11/14
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greaterorequalslant put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEC8206D4F9B8D3B0
1CB47BCDCCC4F1898958555F5218EBA0BB9F6BDA92E8A8F645C51D69C597141A
DACC7696EC47C399F6BC4CC2760FF9366A7D1F2ADE54B913F1ED476D606ACA25
83D3958E9EE0547A5C54C359AD40D487FEED3555A936A7F9A2098050930339C0
DB023D22CC949331C13287D1108A4F840235AF8E613FD6176485B22A31B165EA
8DE2F2534E57BC3E63D44604D095AAF56667F587FBFB99FACB6315A21101C80A
6029178A3D776FC5AEC78EB0214DE49358826CA99B7306502339EF9CA7CE6D99
D921E72B5A7E6528EF1B536F51A0E3F6D151A61F5C4098B2B3A1EA6313975C00
7B47EAD663CA85546BFFC3EB76B2727EC5E310297CA8650517BA6DF7BB13C501
C0E3BD9B370B3D722E2022FF9806401FA62A86B04982094F7C4B592B6F777A74
145D765B9BD76DACCA859E931AF7B025DEE8E0BDF1D2BBBDBD57AE17669ECA0B
EDD536F807D882C79A70370FC7B850292A0E529BA7AAC7EDC1B52A0C5738D980
B5717E2D1243478C97F5DC1ACDD6F3956F42368112A400794B6BE89AA57D8B08
78B70110D9999C723DFEFA099DE21120CFC2CB61DD3C03FF94C67BA963A32477
7CD1ACCC87E138
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8598C8572FE7FD
3294F166AC491EB93BA365B2C535890A74C6B35EE6EEB142BFCDD1896E3E2D83
55E7A2EE6A02827AE1A95760158E090398D309E96DFBBB7A792B8AAEDA2BCAC9
4D6D01F341CFE1B53E9E3D8A22E7E602AB4A3172F035216756F13E7E122DB663
5F470062A836D1071EBC6837AFBF91C914487F931A56F8A2352A77669796D331
03F167AE4F4781C6C7E518F3F5C5D544E6887D1A3A499616E47D23C39AD52B22
BD4A16B3F8D818EA9EFE95AF85060208BAA87E0BBE78BA695C17BCA32CD3CE2B
EC52CBB4619CE8FE1EEE3BADF6D86FC17A36F01E9755EA7E49A72A043685E094
152B9043D36787A8CBB0A3D7569F0772BED499557D1C23EE03062D85418D473B
B6F8B0BA73103C7C484E1B5530937BF585088DADAF48FDC76A82E53214FEE6E3
7D6AB96B260D6F841C2DC7F082AC9F555E453A2D8A1DF5F7963748164DA06D3F
9872529B87C7C90D2882CAE504DD9F40CE64EC86F77515BEF43AC008D10AF380
E52755D8D3B0D0EDC8FBD0BB3CBC3333E35F08543A8D8C66BB9DCA955A6F03B5
8AE18188C12EF4EF22BEC2484B452A9F5C4844C75A42AA09C7AFBF657B091D27
0D0D2D0AF21B9EC1E440F40B0A575F8DA40A3F6D965AB792E30EF99B5C327D0D
54BD80CF9087B5C0AC0542EE7E50C03715A84AEBCE440BC604562958033C3FAE
86FDCBEA4686217338A7933BF01C0E31E1A1BBC6FD4B50CAACA8DA3625DBDA29
BB255409FBC6FB0D73DFCD02B9EB6E4911FC466873932308A1D2FCBDFA7020D5
39DD8FCF258C2A9781E48DB8F5F353026F84EE652122AF19FB65F1D673BE010D
7C4F92E30BFCC5E735342D36F9CBDC0480F0A53DD7C47C3DC1AF1FFF3570ED47
1831004EBF8CC7C020F8AF92B29AAC1D1C60A4323525054A3840B985DB63C027
5FBFF5BF6EB42162767B0F7BE22052F94FECB26AE38DC91103544B797A8A1652
FFDE2520FA8FC199F30E587CC2760F9988A829977BF6BEA2A784C5E8FCD9BB8C
8D4C01FEB070116A145C2A689A4073B21A810DCD869D663FEE630DB0A4D8377D
29234A96C1040C62837132C0C0109861075837C9A3971A1DA345EF356821D0C3
CA5551F3402002500C14ACE23BB321DA52827754ED4730294682A88AFB377E07
6276F3272577D0DF30F98667CF9C38FA4F001B80D938337D3D039AF45DBCEBEB
BBAAEA63CBED69D03AB31BBC8666F4AB0361B1746E33F5C4191E5AB2BD4799C3
8DC963AEC004137C706B0CC4912AC91201150BFC40D8DF6B9D79E3ED89CDA89E
BCD04E284E2E82CFE36CAEF0430E9D0B26577B7BB0CDE2E2CC3DAD493E6BAB41
00E075521A8C020838FB41EA1AD07B613542F58DBC930CD472F226EF1F51A50C
46EA1D3541474DDA50B41E8B79C0C2475ABEFCA31CB87FF8ED4A4D2A8A53E2E7
C825292FD37D5F15B7EE2740A6C1E4ACA1027F9553C125F99483F6AD1C5FC462
C63916A798620228494AE594EB825685F702CAC93C4FFBEBC63274366983E8EC
628427F87E5634C3151F47C397C43523C8C2CBEA88486EDE0139E056C136A9D9
018F85E7BA1AA201096569FB17FFFE96202C2C17A0A7234B3FA3E2807E92FEE4
443D7738C13B5538E62D234EA996EF545E6BBB375C1AF0F7D865E3E5BC6CC0B1
4EC878474EAAD3CB7951C6A3999925D13990FFCDB0719F1106397FA5BA22B9BB
5109AAA8B22FEA29325E77536D8A06B869E842522F4CBA16573295F27795442B
648E01E1F94B48E4D5BA20E26EE6F00CF4F043084A3246BAFCD57A7F477B8653
B0A18D86510710109F12F593A4BC396B1A8D2BC2AA6286AC239A6E62EB851F4E
23B659476107A9CB0E5F4247B9E94C1AC36D360D5BFCFCFAD694944D2158B880
F93A72D6B62683108085518D477F5A1DE864B11D6124A3B4DF03F8D771678A0A
6AF1B3F16B7EF2BF1D9D1A054E9DF5E013A12CC7798B4578ED8BC40784969A93
8F23AC18A9DF5B2BFF54339819655C1B166A964D482D767D3E7F9C5E2F62303D
5C713BDF14780C2385FB3B7C81CA4A9E9A3321B1378A98B8D04F7F144159E710
D98C425B9A7D21110D8D0F5DDEE69EDB17BC08CA29A9F8DAB06354DD75DE50EE
671FF78474771CE4707AB0539C9CD2EBC6B616E67D915592A91BEF7E1728E264
303B3A35418FD42D930A2D3BF04F8DAB04A50D3B0EA52186A3B9D8DEC64E1F0E
F44F04FB015CB8831157B9D23B182C434570E3532C2BFC6EDB0A991613D738E1
3AAE2CAA3867DB62EC60CF1F66EE0BF04E265B9B784018B3D4B7A22487A88BE1
33EEACCFB38D7AE0E80B1F355FFCB198A37B22D564B3C0D3BD5164D8EEE4C6CF
860C92FBD87BDC14AB7FD7F75E56407C906EF31A4368603D624D4E3B665307B8
43FEE194F96C1F733C6BF7020E96027DE341473CCFB466CB9B1311728A5982D9
1E93E8B4E0C28045D3B9285931B5DBADD0EF87C317E5813657A3B0F0AB688020
57F954E575018D969D4814F259C7C2CAED9A29179371D57A8345658F1946AF9E
83CF1842C7592291AE5E9C1466FAA381EFF9A6048EF2F7AF01787ADEA1A29FC8
FABC8F443B933694626370A3425F4EB72A07212352284F643118098F8E2697A2
2E5EF20C2408E39D3C55B8B71818AC24933079C8B1DE3B78076B1308450994DA
5FE2FFF9ACCD843CBCE380637987E6BD1E7D5AF716A0C644F1C38F009422BE32
60139D7ADCA2983B5F832CD9AAA08EADD2C91DA0880E3775D88421877088191C
E8D37E3BEFAE29CCFF12B30DEAC58186048389599FE6DE00D7970FD7803DF78D
5DB361AA4A4D50397D7518E2A7B06C9E2844A8EEAE322115486224830165F5C1
E1CBE1ADD4F99F60B8A71EB1ADE79B7F28C97A4ADCEA0B18F47C10553266E7EA
85A3B02218C75D1212E90E3C2843B2DA2383CC398A2ED64AC359A0B931073DEC
6A704D6B287112CD1A4E961F1FC17DF0F2C8964057F05CEF38C425284851E226
9FF4709E3D9C4903ACBCBF0029B8C7B6CF7D2EAABC37756FF8237C6BE122E9EC
7C3BD9B509CE60CDB01BDC3A9071EA325AC9BA68DC47210E7C12D9286E6CB123
62F5473939C5535D02A9362165B7B58B7F38B250D2FE558CC7FCE396514611FF
3E6A9CF7937893E1FCF58340AAE5E21F46A72EA7C69EDB35A5414D9858869F20
C9A5E859F9E542A99E1E9E99F94B35937A247656C62236800DC214614FC182A8
3CA5F5C34F34E8D56E93A337C2182BEA5AD2C4142C950FB6F4E4F6E2078C8896
E31685199BFE58FA66F5180E84EBFA8D59BCBE841616606D6456193A0D75814F
8E3BD2FDDA12F063029A8E1ADA704D3E6926AB300A6DFBE6AD8D4A80FF33A71F
812A2451DD23803038663AEF3ABB186A71683C688F662712FBEE5A9AB7FB1987
80B6C85716BCC5793C64847B84132E788C56EB0DCE4F942BD17A3B63B5B381DD
EC429D38277A49B827DA83E04684E484C524FD37BB61ECFB18E5B9632E7AC294
69B2CDFD245FEBFEDC9B8326856BDD3C2C618D6D26BE7C8B5E0F1641F668814C
E93C5A09A590AF5A485C0866DF5BA9995538EADA85C6C4D28960B3C645A8A15E
9D5ACA73D02FBE832FC366877A7912E654C89EDB5D2409708AF0D80682391111
0EB25E120C61428FA0419281776D7F800C040242C7423CAF3A9876D9B31C3B06
B12F95549FD91B3ADBB96061C2E734C33478C6AB262979660F9ADFDC045941AB
A3802CA8FB359F33E371CBD21FBBAAD00FDDE833059E8397051DD2ED6390D4C8
5E76FDB386C31B07EA6EAE2B216134215C664D17CB1EE6384ECAF44BE560DBF2
CA9A248479FE07B6BC17A2E25802F85118D419F24E7D6F51C2FEA1993B2FB467
DCCB8450949806E7178C9A6EA10C3B43176BD0F36839DAE21B8C33B748CA6D6D
9C5F1A4853BAA0FE28119768A161F8C244EAFBCB63B91DFCE251F898C7572C46
B77A7D53B3154358212CB5E6B44FF26A837A08DDAC21C5037E3A485D2180D8C1
993B5B5F3CED2440ADBAC5A57DE82672F7F771B6DC28ED5CAA2EF2C009B70785
C23DD9E847212DB60D524506D1E67C776A115BBC1A9A2021B05625CE02513B4C
87D96C3FE40A7292730FAF68949DE3BA95E31E2B97D456D6316C3E3B3D0A0FB4
B6D89FC282629FC4BC6A525D69A65ED3D908AA75CBB741E77E63CA0862E5C0A9
1E210AAA97E5121BBDDC1877EED1ADAA9536982743C67F7CA68657BF65104B93
E0C765BC46825B83A7C6D641BF7F07C4F7E09892C119B1D9A2EA800482A58CD0
A184DBDE0F143B2E58225D84A151C05113E4DB9AEBEA9D19EE8175E878DD5C99
6A3367E5294D3C63706F08AAA9EF3A1AADC9950E2EF1C9E23C5E0E7E806E6619
C964C38473D4E4E6B9C2791301A38780E5B8B83780A49D289A577874822FA068
600F85CC0EC177156F1FD93E22ACA3CF1A5C16878D763586E7B93E6B8ECC73F1
9D38F4499C043E346A4D88EF691E21A7F3B52A4D4D5A115818C0B94951E2F934
5E535DB5B40F438BE8F98F756A74F487A92ECE964995273E193C85EB7D5A1C33
992E9748C47D3233B7A730CF4B9105E688DDEA807D78AF1EECC6EA4C239D632A
FCE55BF279C827FE2B33255B5CBC1A6F8E0720BF53361CF3B055220D44A8E0C1
E04FC79DE23E2BA51F9E04836A9477F52975CA6D524A8E1CF8E4497211E8F1CF
F61783632D3DC78F6AEE2B56DAF0CB205917EDC149D38E457A075763C55D2ACD
8E255556FF3CF3EECF3EDBA686158167DA53C4F0B4C14EA2D04B43E77C3B8804
7D7DFBD6D398C70F0095283F5387224270CA26AC429EE5BB705D0AB44FFC09B1
C735A342EB0465789380E1912E8DE5BD4EAF63420ECC31B8BDD4990AA936BAED
1238481982FBA18438DA1A65D57E0DB21B332AA4BA88CFB434FB16631AA40A5F
8D1038506BF8246658BBA30152BA7455F99FAC308E210C6D89E26C5C1283016E
541D43B5D779D7D5E059D026A5A2D984BBABDDF51562FD13B4CA9A1F412CA0AB
A987541FCFF8D12A72CCD62866B6CD4ECFFE6D46CBB936BBB41B3257AF837DF2
DCF2750D230CD3D271270A478AEDA450EF8A01DBB7A0AD29B61D3504F88F4569
F106758B76F5D2EDEE67DFFF74F892DADD5E4AFE699A8B18E67CBD2F9F687C87
923E92A631A6884984EC754AD5CDABA0F78067D2E014DA371831B827706AD0A4
C81D791A8B29CCFE9F7D3D9DFA26DD67C707F0205C3F9840CF87F65670B5E065
8B4550CD80D23B99D098F7163E6740D421676213AF6634B89A5085DD0B87E382
F1880F19FE0EEEAE7AE5BE72DB09B6A1E9FCB1CE839414EE08BFAD9BA9B4E6B2
57EC38986EF157958C1BC0375F35E83F0D2A11E8542EE8130E12B70B601D2DE1
BB394FC627C1D0486246EE4A406963CADE45AAAE02CDBF0B7E35DEF4CA06C4E5
E9A31648AA56435A4BFC6500FECB67287320DCF82EBA6EF34473250995CB6F6F
70BD2D1AC26776C64DF7207E2C306871E98DA3FEA633AE6C255C3DE4AD6334C7
3D5F0E32EFDF47A249573EC5E6ACB220729DC2F45553673D166C13ADC94B320D
5971206D76565A023F3435695EC78E18B045F432DDB9B0035559F59227CF4F64
FBA2BAA31C54AC23599F69D60EF70396B1070D83DE82A2C7919C7E11661B65E3
AE4723100E1C7C83B64A61F70027162B35F7804E1A66E8E5F7C0362687F822C9
8427CA61F1FD70B3F30E64CB7CD99A2ACE46FECF3138E2A77D5064EE2AB3E026
0FFE70961C9C2DFE42BB4DA5B13327538D63725ED7106CB7663C68904443AEFE
16DA2F528CDA674C57434FCEEB006424DA458F1BB52641B2281242E336C97474
DF1640D3956150F479CF958B1DDE1BEACBB5C8C949F05C42B2A1A4261898725F
5C6CC30590F96003095CB6A4AAE2B7BF4CF375C71B56B74D876A7ADCC2A73404
ED470DF05F914394789DC46BAEA1D01A8502B037399AF54478202EA9C3C7B5A8
87C3478E9C3EEDBD2E68FA6E1F375AC0E39E0178B8E8F81C48EA35036CF27FFB
ADA0D599B7FA2457F5B7B1717C455C0FBB29DF2FB189801EC36EC0905AA74FB4
43296706658418710D342B075920E4F9CA223D0690DDB88C4FE889B13FB2BC00
AD36E0CF0BD89E6A816DD71D80F195DCD9B3C5594FFF81AB15768C6249D79C68
EFF801C5BA46C06744DC78F0FD34813D5E2894626E6C1FD64FB77C5EBDDD816F
2EAB22090580AF7245D8F075DFD03E73FC22FB1252D8BE2DB85179D5CD3846BE
53B3A4CEEB0C836F811E9D0003481625A581FADBE7C930F24EAF36298F051E0F
D9E3795A58E19FA15B2BF1C41FD417458090C2E662605301F4532B9FC6714B59
A268FC8EA33DAC1DFD4FDF4C63F5B0036F32181F4A66A342E00623E970885C07
55D108AAD98092CA8D7D9513F1BBF8A7B2C61AA3904E440124B686988EEF3E0D
55F6C8C1C8566D3D4A4B69C6A2FFDDCE09BF6427805C0F27DBD4DA6304AE2D5E
F8657C1D238E43779FF0E7A86459532535BB45E5D0BF99B2AEB8ACA51B5C3EDC
07749B45C3D222DB23812A6B8920A98C56F7D2F8B387AD84597B8E59951D2403
F1F519E7F583FCB9B36A969FD8A3494E69FAE54A2294C74586D3DD54064DDF43
64EDCB99AC542C23DC026C52B6B9F998FF851B9888E6847DF0313FE44365AC7E
6D6DDE336D4B5FAD164918688A79FCB415341E3DE6320592ADCBD738462F1374
341662A44E7F2B1910F9807ADA0EE65BF601DB529DFEA26A1689B629702844C8
19E8FF253FFCEF17707ACEC9C161B76D388111C07056672D9C9F72B664852D50
89A7A490B56E35F5CDDDE2341581BA851F25196F90F8D58AFBEC2A05E8DD6E98
CE4B34D808CBC5ACE6D9BA3364D6A2003B2F774540DF1AF3CC5386F6FDB2800B
A43EF8D04F216D46ADDCAF9AB3403EDA394FF35F433F6E6D904F52EE74323D93
F1DDD3CD0861568A8F5D78F85D9AB34B9745BE413F8AD2DAA2CC509DA245E4C3
B7CEB825D293B2C2905E26C2934359B98D42D4B3E252A3B073C79CC64B6AB586
116CA25C0EF57DB2BDB0F8A08682333238DD43D8E788A7F53D8795A0F04E4DA8
B5BCD8A2A1837F51F1F23DE04ED44D888DFCB35871FC7FE68F2D0C5B7628EF0F
093F2AF582CE051AEDC7327F258D6392C3014BAF32BCBE96578627F84A674BF5
6CF9DD7FCE413A399ECC675E6A0CC054C98ED68599AF42E195D4F010B7B270A6
858263900EBE9588FAA896C96080465FE4A6D484975F70A3D0368A3A29FD7D56
7897206F8A7F1D8CA5ED0DF204F9B8269DF52BAF39232A4C985F6716222179BC
1255B40B94B6C71A18537D02C16871491C9762CB9307AA53EAA7095CAB36E6B3
8B79901620DBA1971E39FD56CFFF7FD19E899D4703BCF6B5B5E62F289E42315A
939F1A351B3D4CF819DF35AB8316A0E9ACCA79C4834F079B91D76D7520F05DE4
447F3EDB1C6D604D2E548207C8B50BD9B602D36AA8B6495820994B040C0842FB
2949D48EAA8F4C653B08953AD6C2F443F2718B0F06831351C9384A23E628C9E0
269C24F582937F5F692EF126A202CF1BA8D8F962F90A4E6F15EFE9FD6BD0DFFC
CABEE18AA7843E9DAC8EFAEAB6F48D530BB1AF50A93422680DE45673FB121E1A
E5538A2F89574633BF2B6AE849622BDACBFD37B1CDCBF25A0B5FB6E6D9604BE5
F1D4CA0CC0152340D9B42C3E158A6BC8689F1A97B9D326181F8FB67C9AEE4F25
92F6C9F44C823A4A275C3A5B0C631FEF52CBB300FF75D46496A7B43C7F3C4BD9
A61E8776EC23A74B98A3FD41F2F64E343D498126241AEA951F60E1A222FC2D18
57DC697A1C20A2C585641A7A41883A145DBE1F88A38510ED8667C5E6B27B90B0
0884C8949C84500FF861E0D81E11F06FBDCC284BB82A102C589A8D15681CA5C0
BCE92224F0B1AB4DCA768472040269D1ACE8AC91E5B37BA046F15CD3E1FAF332
289CF98AD2DF5DA1D5EEF20CE9F718C886D02D5A568F8A7165F29E1B5EF29D41
9A36CDE36ED1419595FD349D0E17B70BC1504400C8B360EBFFB8D4651822DDC1
FD0683FE5A3032DA6370C0F758D4552744DC37A6D1F46F3C25F8AC012F134155
CD42E23590B630C8ED6E8225551C8700A965F9970D78BAC7D0C2A06EE41D5980
B3B68567E04AF40ED6593DAAA9AAD70951EA918A3076193B09D69AC70BBED850
8BB8024A87C63F46D971A023FA4257C7D0C7CE3DADBE885E484B64A8890D1E28
7E005299827A3591437C46C3F75B2953CCA0158C7FD8BAC1EF1C00CED35D81E6
4BE6623CC25537F90DC3204F5999EB89AD8F90C13699035FDAB4D00DF6439F80
41039AC40F152C19FD7A19D6B6BDC96D0644B5D92E1CA5018F09848ED0D20CDD
C1EA3D87459FCAACC5C78220CFAF038CE43D1AD1EF1F6FB303959F7AF7994227
6C35DD4BC4511BE461CCB0AB1F099BDDCAD08933F58C44DB6835A27AFDA9407A
E5831EFC93ED1529B4DF9B84B65F4AB493296BC0DFCF6BEFA01CEB41E886BB6C
7652E70E7E76B5CFDC6214A570113CE090A34CB23A188CFE29476DADA806611E
939D089872FE3A75613E2C0B51AB4A815FE0203E4499BED81DDFA4252A5D71B4
1A506B03CA1C55FAE158C58A28F0641AAE9B0F3555E0B60F46E59705D79FC92D
B820BF2332DB570637B81291A95B77F6649B2E6B5AF4F9B2139815AD7E73E993
D0428EC841260C66F83223F626162C24E1F31D2795CF88CE16A00198F3111D1B
8690DB4634A84E30F0A1475B817D0522FDC093C54C6F41D411645C6681533CD2
D0DD4DCF5CE95911A7810A54A6A018FE1F530575D06E71574F69A54F61F8AF5E
E685C5F8A29BFAC90672EFD6DE6AAA8E40FB4F9A655F25DBBEDCF4ACD51CE42B
EBCFE6F8CF420DA429BA3874E01CF5661B9B0773177B8DFFDD804D57F18D2C78
00AEB2CEBB2AB72BC8769DC56A15D3E02CC6F0A5C8C1F454038EB04811196C88
7A8D677C2CB59264825B0871C40AAFC725324EA204D2FD8312981EDE9FF56C79
8564257D36F2603D180DD8B16937F7DE9320010A1363F725ED647B85383FC5CA
86CBC4FF03E594C4F424D594F93CD3F0C05A491D7AE0F3D2F50BA810C1A3F041
6B6A5128EBBFCBD2079761D6A8F9F308B5DABD43B0A3FC46D273A0D8B5BD126D
2F0B0D62C180D0B5705FD8C0F31C456BB36FEE919899A88D6CF352BE188F2F58
4140381D43F8C17F3A5A05E9FC829A7FD554565BF5D4A421091A8BC681E1A2C3
585933ED195338B4A6B7A4C2D765FE0179690C4A1020953E0339FB534D3C22ED
7A031A9F7397C32C062042076F516FDE1AE59F5A0A2796983C158C53A7C56410
4A12E66EE2C2157AFC8FD97989FF2CF5A7DD8829619E73EA6B9CFB89EEF7508F
2C125BCB39DED1C16597CE734392AAFE6C6C77F715CDD4D7D7BF865AE6A1412B
DDD57353577CB127C4FBE140F75EC7CA3F0D38A93EA4B84D0533245A807B6998
DA53F37C495B95A55CCB089ADACFC9BB03BBE8E78E7E143524056F8C6097BBA2
76BACA670A0BE5550FF149A29C6BFB59D5E59B8294D067FF9128B91070D1229D
99F82E03CAB7AE6DC41E62127594F8004075F242509EF66EDA218AAEABB2D92B
B96B0FAAC476F585C938A8020691324734C4E5640AAB59DA1B39F06B94C76B46
2DE4972CE0F14210E65303ABE59E42FC3A7B827019343D96ECBFE607714970D5
D23A4D302D3E758F3957635576D09B822AAFF07BC84CBDE5BC1FB3E8FACD8B45
06CAECCC09DFB0B956B404F524D5A61FC313DC073045B10A838DF32E30062BC9
FF1CB4D124C5ADBE804F0650983196E9DF7B9C2A684D63DBF84EE045A92FBE8E
DD1C8D71FBE1BDC2D4B31635C0A59E2930254490775CF8D7394B0E3DD5997262
9B289FA86A8A1E1403ED721F9E639E97578C0D1261C901E343EA0AD39CDCB6B2
63B79F151E5E0FF829332AF009FA96745ED622EED671577D9D3E9450FEC0B918
FBED966CF2DF0109811AB97FCBD3F8B93CA5C009A69151696A3A93C0CE179EC1
DC2857D7BAA9F971439143E3F4D94267397226D16F35BF0820220AE1D2461A94
BA356F45AFE14723EB7B87F0C32EA8403103D6C10B7A087496601A5BE114CAB8
950D60EBB0AD7427991D14C9895464ADCD811D1BE21186C8481219EE7BFD8CB1
99B8E13BF6D5589830EDA9446FDBF2A46DF1BDE87E09901BF29D7D32D3E8B551
5CE095FBB8F97E4B79DFFD6E23D5EFC4D140CD6E23992644A8BACC4A160C47B7
C4E849E641E98206424849D1DDF8228ED28BFA1FCB5CE9760B397F0EF82E608A
3399E89B06FE6BA6A35630950821443AA81D6D8A9A5D50C8BFBF47E9A19B639D
CEF46669AEBD150C334F978E7E0DD8E246DEBF4B34C8E3B5ACEE9D8608CEC856
965632899D1BE5EF4B1F2B959DC637E01A7DF62392720C7DD2C824EC5D62C3ED
38819068F6A30BB7EFB37E045847BB5D307960EF18986339FB09682E946FB132
20930D9B0DAD0C418545DDDB509B3AC56AA8B7BD6F6D1D017A51CFB45EE5205C
39C40D9E11863D1B5DF203B57D1BACE59BC9FFB3A0EF60A20EB9C95FEA376268
332AEF1AC78B34E56655F1B8285F5EEC85F7E8FCC53790FC9928E2BA5F746589
2B70588D74CC63E7D5019ED025D75542168F7ABC4A33AE13049C6085E417E12F
A5B1A56EC5BA25D75F49BF633B349194B7040B2F5AB3EFCA03A536C7B9322702
3FABCBE1C750E212EAE2179B7635C601587140DFA3D1002523D2D84C85ABC9D0
4289751FA331813F235BA2C99B1FCC369DBAF741227BF23D6B224281EAF70C49
3018B86E48915C6144609B431E90D4571134C09C8CB07D86238CAAD65A2700E4
E2ED19D9A346A5AF8000D828F16E4C04AEA17507700C0284E60B342B4EFA3128
53E2859F8FF197F12DEFEFD68A82778D2353E005D7C07D5E3E945C92DCB5EFA5
06A72BD71F0BC346D0B3B83949B1CC8EA6D2C34AF4F8C255674E734AC282291E
762105C36FF94DC606D00BC3255F010343A656B0EE608E4AD40E0E8B0D19A7C3
2CF3B245BC4A9C88A4020BA1291236343FC3076256FC67F39104B4CE9A45F658
40E64FD3361D8518384CB5971AFFFDF087FB5BF0C5288B9AEA17B098D3FF625C
638B1F5A1947E9B2AE41BF4A5C0C97EC951E97836D2C2988B139E92B15A0FD7D
EB483228CDABABB0BBC31333BBF6F62FDAF6698B360DB6125291A1028E46D762
BB06F68286959C090D18EE2A27CD8CEEC2E489595338E7D6F7E62C178437BD09
D7A23027132E79D4CEA2F04F2BD94F0F62BECD4689AAA2CEDFA0BBE5E5825118
10F9CD37D254925C84A04ADA7CA6ECEE13B89140CA25CB86FCA4DA5501F6482A
4F58D8D417E8703DCD5522055D2F81385172910FC31C1FD013E64E0788282184
75C4CA0124D1F0CA5EF710670DBA410C86A34E338F019612687ED7D9A4A592D0
7FDCB41991EA243A547D155310E6DA461578C1DB74E2AD658BE0EA523FDF4536
A0899381B2C8D9ECC40266DC26CF3143DCF1E25184FE5D733C09CB72FC2FB3F7
A9460141DDFC7D2D013B4ECB435F039C68A6BF76F9FF18B37A143D6301027FA3
2755ACF72875A14B47C44C757F24256DB450DFA473701505D803331D03FE4375
05DA6DDD815AC59CBFFF2557A3D8E1F786E78F2ED45B1296939DBD247A7315FA
2205E0834456AA81E81F83ABF2312657E231293D0C2266DAF4422046A98484CB
881BE87D08FE4BC03064B65EB2873E390AB26912F28552192C02CEB0144F2AC7
164176A2DBC221C4744E0AB8137DEFA36FEE0992CEFB7C4AEF9ADD7EAC393FE0
A9DAB88E81AE9E2BF6856EDA390BA1F66F931F2A9A620CA6E7B65FEFBE0237FA
682B6763768146921ED6915D4EF5EBDCCDF02605E6508B3CC4AFA03C30177E96
C152E4515B4CAD968A695C47F53D5F06653E13C7F09BA2F1D793153E99C4B4CB
F49BD6526B9CCA0EE688094AF37515BE3E6C7C19D5343B5D1B002B145253C790
9930EEC1E5A1BE75768712BC1CC0E83EBE9B5E0156ED0C13A961454C5778C5FE
9325AB4ADE158A336B43A21F390992071493A3C4DBA3025F87D3166649E8452E
CF9BD735DD7E1275A7E33DA0671E12E3C82ED6C6195753A9F8B236D87652353B
FF9D359E1A74D8D542ADE1063EC1C2EAEABBEA454B7FA5E136E0B34C1CB36C20
AF002991D54F36AC7D5E369E737390938D1B5A24D1CC914245F7BEB06A424C4E
8448540638D95FB1A6A68846554A800612625567D6E5F08742567883481A9FD6
02A6235AE066234C3CFDE50FF58784918F542F835FE28D07A6B130EE52B3677F
B4BD0946A2522AB58EB6520F48253F790EA88B1056EBD6EF52BC1BA8D526E8D6
153BA820DCD188D7C9659770777EC0E75BD98553920FE2C81D3A9734D5790D2F
1363B54C6F0324CE75B17151675B55D948E77DD363B1DEE14F75633838456885
E83F5BBD0F3DF094D3DE5A07441A4BA7830362372A07096851E4B1A46A6AAF73
B486BDCA48C069C9F0A04E0373E4347711F4281D565836EAD7ECB1DC8F5EFF5E
2E5FDEFA404BEDFCF46D7A7B20D04EBBC4E6A008DA7ACB7EB397CB229ADC5273
A985B4D8198547A1BB470C443563C32FE0ADAAF1D6A82D39301CCB36D2E15CBE
3F178B94E120801B605ED2F848E8488AB0269F00A8A766F57B4830F21E6D1DD8
BAF999FE3C3AD80529CF8CA1F94AD6BB5E32128D96B5DF6CBAA49B4B6F486C3A
BAD61C11EEC494AE71A4F18470738BFA9AB627B06A99AED5490CE1C97ADDC979
B25E24638B2A008E926542384AD62F4436EC68E7968A49DD31E8D63A7FF0DDEA
8A46CED48AA3261961285698CDCE72A858729532E8B7853FBC35F463E7964081
3D1382F7C68B97E5CE7CACBBD083FEEBF1EC7546FE30BF12364DDFE8705B38BE
468E5940B969FEF7718BC35C7F5A2DEEDB91A1C17DEA160643FE8BD1B254FD6C
1504519FA4B62E30D556D6526614ACDE70CC3546FDABAADC29F3BD471B75366C
1011AA125249C18753E943DDF575D4877A13F9B985C20D417DC181D3EE004FB2
1E2036B221B3E5D82994E1E23FCDE477F79CC984857B42292EAC8E590F745713
B1C67324AAE6CF8B208387809A9B78E1B9266896758056D280F09997BB3253C0
10B3D34777D1FC3D5485E26836C25056D3E53D35D082CE150C39D9401FC14307
11D078478CAAA2F07EDD171C7DFE3231A7DA7378EDFB7C0E6D159CABC1D810ED
1BFCC3D1813783235A6BF1B1C705C10171FF80185E9716C65BCFA4959132D9C3
498A9E11A2A7C612D1ED26A0CF2196C827C61087200F8E2CE99799DFF5EFF190
0FA2914D18892D7C5B98382794765CE64148457A1D1C0774D8C7D7E176C468E6
3A7F2599142975F6780B37CE39F6054B5CBFA931106C50CEC2B2F30E5D2307B7
EF8B7DCBDF521BFD0A35816904F44D6B5ED7505F246F21D3AD2C8ACD573F96BF
8906677C8576D604F3EC10B47C3D1D996C3A010D5C0E7C3B67DFB48370E5CFB6
10D4DF0604E5A4D6F6C66A50A9349FB38370AAB831F5C125F7AE78C034F83EE1
146A1F417240AD67B4AD2D9B3362256BC7AEB4005568E9DB85B29234A540CC0B
82DCB349EE5DF8DA7B0C0F747D430C26AB085CB905B4CD64F45AE3860AF7E2C9
A76295BF4F8EC88A57C2D8A4B09E462E5BCB5B34476682096E23092090C2EE8E
3589DA3B3AA87B9CB67EE8335BE6AAE272DA1F2FE0ACEF85879789E378C3F140
25E17F09181EFD15C9FF309482F78C258F1D9563ABDABB65599D9DB9FDFCE5AC
C72B3EA2AF2DD728D89BD12F5EF8F968317211D14757FA51BA1293B3DEABAAA8
2C8089EC1AD20F8AC8BBB58422C4E81F042F655430C1667FCD249AA53D389F0B
AD844A604026D99C9693476E22E6CE7FFA0842236F3DDDC95F1DBDD6E9305CF6
C8C5D1AEA322211915F9548EFFC7A19373F2CEC8D657B1D3737DBB6436E95B9A
F7D04B7BF4F2A9FF9559BFD408BF9C46200C10F0CF13615E88B9117383641689
F556631784D36F0311BA4D77145FEF1B3CDCC447ABA78A2D9EA14BEC18465A86
7DB5F6896FE6F5A7E313789415066C438B3E9D14E6CD659283E43B9FFB245CCA
DBF88C6BD654879845383FA1AFA8DF0DB7728AD5A313972BF4F7F5A86DF64B5F
2D78544E3897195495EBCF29816BA83ECD2D4D03630A1736834EED82EB4BCFCD
EF2E8FDB85B245A007A1DF6144159959A772D0B3CD88D52E858A44CFA29C9A2F
0DC3DED8DECCDD6548F5FE80A5F74BFBA862458978734383ED65AE25EA4A359E
FEE31E75585E20C7D1E7D71572A8761E0321FEABBDA4734D34AB0BDB3AFBDE30
115166EF24F45CD1150F815AE0C71F9254B61DD17C5657FCE9C92F6A0FC159E0
40141B678C151BEAAC43D20D97FA754009CF693AFE49773709F831DE3BF1152E
7FC77DD1932313136E22108E47306601B03680CD6016177A372A03222AFB44BE
9766869864F03359F6CA174DBAEB5B6041301C12DE060C8662F1FF04901CA4D9
992F597C3F162A7D9179C904B3960DC090E390186BD4B5C3855DBBA5D04C3EE6
1496F993D40DE43397B3EA47FD0B88CF93B62B048AA782CB794DF4C0361EBB6D
E19730D645A29B3E75001B5C3E7D92AEFAED44081C826BC37BFA976429F55DC2
8CA093B2B083CAA078D67B99BB7F5111C9749B4FD1132E6070B2D334ECD78A9C
0EF28E09F525CA2E8D1C66989E1C984280482BBC74B6FB8473EBAD364C279063
74AD46C5B6F75B68E9E103207761A3D5B03C983735976E2A3760CC61D9DFE27B
B97EE2A4DF1BE950316690AF6B608CE1E2F64D3C2AE2D1F851B70CDFA9DC7A26
37DE6F9AF8FE1D351267493E48AEC02E70D54DFEA445FEF7238029B71B7B99ED
4BFFF5A6136AB4BFE0CB8A8CB91D9A645C8DA84665C1EFB946D9E5F538B9A3B0
A1CBB620369600B9CAF8E1B948404F89DC75551DFBA3EE28B2F6C3DC4EE61C85
50041C4AB19C29AC984D1408AA012927BADF7433345BAA3187919340E29BBE91
4DD0EE0798620104C59B69796AE31DF72BFDB32B748B74D4F443F7CD7118A52E
852B2C7BA924CEA58FE6B20390060B8BDFDD46D19B3302D51BB9297620B9DBCA
B43C4769BEBE58197B10568BF8A825CB0504A22393F2AFB5230797835FCB8C70
396344818DB05F98CDDCF3A678BAF2386AEE553ED4B62B5E48E76C7B8BF489A9
165F404F899BF8DE51469D01AB3BA6428EF0C5C747425BF2DC3ADADE2F1EA8BD
BE3CE5687BAB528D3287146E7441C61E1C69A7F99586F8D21F1EB7B7119D0CA7
8BF767BD59319C2F97DF47F1ABBB8EDE68A37AB2E34672619EB54CADA6E0CC8B
5F2504D483A593A81450461BF2D06254BD2A4BAAB714DDE6BB3D4D1994047B04
4BBB623812F5DE0321ECE7D54761B3C1996299497D510FE984DF439132836286
B72023DF64F5BDAD95621BF67E55E1403AE8A80C85ABB6C9D335D0A4A041F919
A1E599A0003F561E17F58F42B25AA6050BBB13E7A1FFF0FB50666F3C22D60246
7BEE1C523A7330E849B288E6982246FE2FC33D78F2D6FFAFC0E1A467FF688C8E
2D30150EC71AC38FD4C17F5871E5986EA943698CF5FF4D295EDFCAF353D385BA
D1D9965D38A6C17B17D669F49DB7F1C6269ED2DDD6D6EF6EC6F533090E4E4358
C37FDAAD4FF8AB0704ED3DB894C9AB3455FDEDCE05772E9F72D044E0D766370E
0962414E9E966D008A73AB04A2D6DEBC00875DDE1E58B98B6FA7B7615410C0C6
0EAFBC898DDDAD4B90212F04796AB29B83BEA7CD816914E23B0DFADA31373F49
41F4F08DFEEEAB01ABE3F15A54240B39664E3AF4431A62CD3CA9654CA9B57D3E
E7867FF108F3C0D7DF906833D432909505C1C6E84BAE0DA6D5C29F8A1DAE366D
AB5520C047005A2F9AFB7278561F543ADC2B1CDB6F2A63FF909191AEE8FAE71A
1681169169F36CFD19CDC9DEBEEDCADFC3645CC12C3865CA3B25BC9839DF7A82
EB39EDDA9F05109E6AFDCA0A9D11593B3545E0B8BE669347E725E780ED4F2FCF
4C3F2AE3E6BB1A296AC2BA988CCF7CBCC0E63A4A8FF896817267F1C482A41B9D
E161AE91F0BD87526B078C5D83962F7C173A4BD94F53BB57A4BB0A263AA962EC
88F27BF2559091F2341DF0CA847AE25F7D975B3BE50C461D2610B14B5D7588A3
67441E056A7DFA590E1FFDD9B91480D15AF00550ECE6A46B820E984D6D137E03
6DAA6D5A867F95DBC2ECC40570758424A41B13406E5C63CEF27F4E559A8C641D
DB019277C89B23A70629F9E14A920DFCC95CE335B606C85A03779C17CD93BC71
89A63BCB6F0FAB18F0A36154776C04AF42F0DF37F45EBDEA98594256D8D6883F
03B1B69B52BA98D79C2069FD6FEF1872AB87CAFB1B672D49F604C9339C8999FF
76E22842D8BD627D0BCA4C73D64BEA9E362465BFEAD3A493E778B0D26562D8F4
FCDCF76C8811C2FDD3BC18265F89BB78DDB503028EFC2A6B358AF85C6E84E922
BD0A2D8CB6F320864332B57806E945F4F718F7A516D27B985B0717CDF6A62AF5
E411EB7A7B3EDBC0253F35B4798500DFF19CC552B43A73DD84EA8BB281E79726
3454CC139015AC7D26CEA3BBA8E062139A3A023B18F1543813829CAFC820303C
B58B43FAEF9359461594EFF505CA825758A00B360FFE02E30C9616984FE88001
4100DCFB62636456E6FB572252A1C5A080629EFAB33AA5BAB46C884AD4076866
810A07207CF99BCBF5B3452A8FCAED7CEAAC4EC2B96E9ED096AA64494AC1E922
B7FFA84E1BF20DBA67DDD7D74245D95111C1C30B9B4862B9CE03A84CFE4FD40D
B64B4F29625C6D6132710F482FA8AE929AD06880CB769F68ECC3AEC7B2B06C2A
A32DE78A4328F86CDE31EEBF543B28E2D60B9F46C3456117610582FFD1DF1EB4
3D7AB812E82686977D654179AE88454F85833A7E00D1BA61738FF9A9843B8541
132723034BB98BCB5A75D82E9EE9E8FD1601E430B53BA8188AE8E6A8F8DDBB4C
4E635EF8AC39F837B12FBFA3EC84E251EF25F318ACCA7D2477171031F2B0DE39
B0C19A2F909B33BAA5BBBE4A311492245DEF9F719F8F6DBD37198D35B8FD4D29
2B9B4C1AEE3AF1BA7578183E572D97A4DBCF6AC8979F91762EACD259EE2F564E
EC9F8C5D0B8F9D8E625DB5CC91863542BBBAAABD5241D2AE8B98E6AE1A75D074
6203F0B0E13A0341BAFFECE5082886B37A67985A94426C558A0B4E1471A7778C
A75B722F2EF9E5BE6A02F11C9A37F83538927051A20F9ACCC0D07E42133033D3
AA8786A57E5204E901F9F44A186145B8F175107FE4110EE6AD222881F347E2AB
A785FE4D08CC6BF128740E22324224C4BAB3026D8A19D82CE0C080AF30E91922
87BFC5A8014062AEE217D708304DD84BDC119C8607765D30BF60A846ECE55502
317487EE9163F7CA319972EE45C951FC00501FD10FD167A8805EC58D7298149B
EAAD0A0C1C7C954E9C4ADBF7DBD65DAF7575A16C82B13C00BAF52FA3D4925383
A9DB00A74FD770F8D207FED88759AC2BA6559B3C306B7D66C8AC5B5D10643C5B
940EF546F648BB66951B42E108322CD6BFCBBB50DCED06F2D68149321B77C75B
FCA71BDCD533869A31D7F7A643660A299ECEE4C6A8A5BF920F960BDB29BAE402
1E2E74C19E5963AE7848E203DA9A73B6AD587341E93C7E0C7674A3E7C8DFB796
8203ABF48BE7D9D9EC96E905E78B55CDC9CE95F126052A7A7D54F0F333B795D1
353F07338484459A6B311F102C9600ACB5315D66B696438637B9CD7F0441BA70
2C1F3A107EF4B2993C5D5D1D3084025FB50EA5F7B722CF4BAF977C772BC014BF
0F16D9187E9389D910BAEC5B31B7B8C676C8F5E1722594DCA84AF0D46799083B
610D9FD939782F24A22CA0552B527ECF2456BA6733FE5DC12F8471ACC9DAA3C5
9982F46DE00A3491E55C7FE447ED296F4B3252E140FCB6EBDE47770674B55505
F1A7D8809BCB7489CE90540DB2A41C2E67B294D8CBC64F213DBF5D11FEED1DCA
915A8A6F29C3D3A7398156AA2718A9629CC1B3BF4AB7F87FD539B113307B9FAE
88552F8E78841174D42FAE5A1B8FB391458FE95BF96F873B95E5521BF63F77C1
10F05880D50689453B605417D3FA25AC710CB58E4D8AA7030BF556AD3556B7B5
C3564B65440FCC68D807B8391D1139A8991D26EB34FCAC17A7FE25FF41881DB5
60EA3EDC7E11F630CC8A29B2AAF9ACBF43858CB6CB76067C33C9042A5144D89D
A7E7587585D0FD62C11B16C8D5A69B01D6A424E610F0D0490FB93CB862F162C6
6A765DC7671124524602432C486A05EBCA543EC439A3A17EC09A32CB7EBBCE4B
060E98FA1DC22E83417FD9C32CC0370B130FE0CF927E4C2017698AA3A9EEAF5F
D8A057AA5B27BEABABD7692E7BEF698FB7E9D2B984403EECF872E4F7BFD03B52
8B1997BE7FEF56ADFD876842D1AC225F74169C8F4957CBBAC49010F93D403219
649B05DC336561560AC36D20711FC02D6667E750A34A6FEE11279665A2B584B6
47E54BE4DFDEA33C860254D62E026B3DCC8DAD01AB2F92738D95C69DA5CAF56C
BFE83485A13727C8883B214B397E4CE1FBD4C2BB16408CDC24E18002971EFF06
F3375D42661A3BB7ED26ECDAF10425FB5D18BA94423B5BFEE72BD934FDB2A875
22FC19A17178398F471FDAA0ABE4E560F2A76638C45918F29B036CE0F9A39677
D45F5EF198BFB18EEC2BD8069E5F4554727C541DE95C4051C0826012AE1D540F
87817B45EA9E0F2EA9D784677C77D7B032CE41171A521F8C6904A349B050BFCE
A099B31046725D15D8AAF3B4501216830F912F62BC9E9AE50434CFFB33D20B13
4872D25E83AD6A4B85D379312480230263A84F3B5505E501F9811E5DB3755D18
9FCE6E928BC03EA900FE29306F7CF2FD6B76AB1EDEDD1052121CE3331A1CB261
1CDDD74D90F747084C8F25F01790BCAB93449A2845B4F1FAEFC70D289BE37C26
A7C7C967F97EA4D6F47D1B4B6F148343F13C64B7B57DCD2D457952BFF889B7AF
999990F4DA751D5BDCBFEE9492EE69941F04E8B46DB16845363B893F0716E853
2DC5B1BA58FB0D7832E134463560EDA1FA5CE3E4EE67D313334A0253E8B0F4A1
62FA68CE9F6B640238CA554D31CB988D6E805EA706C57800372817745D04F79D
DB028EE5C97B229B202198ECFF8B713352E729C425034066FE82B607C057FA2A
67DBD01F361D2D4E4E2B339773E0DF24BC2723C2DEBDF74F0E1B4EF4543FA340
8AE727D601FEED26A97B4C12173E42E2182CDD20D51F11C6DE7B45F21F70E986
80595DBB7B4A194BBCECD414182CDD869430418EDA61437C9B539DB2121333C6
888B14FDA9A7AB79DC538E3622E8EE483FB33AB0D9D490DD98235D63862CD686
DF951237D470631C4444803AFB5DFF4CEDFF2E9213F1AF1CD69DFC0005E0B445
1FC9DB854D366A836071E14981D456501498A3B1B31D28FCC4A55C19712998DB
9731DA4BC9D18243623934CE8D47041A8BC09B717D9C124CAD37D04DCDD95F5A
A1CDE8647A70DE672470D268A195FD2CF5D51C859315BF557585C65EBC58A5E5
0EB40D3C2D0A9EBFFBAA218C7C7D2ACE5F5DD9D94E7C2AAF291476F5874E2287
F3C19D8521D40D557D98540177C295227C70CE60E8674A908C6EF196310BA5B7
6158AFA75C4E98DFD28B9DE575B1EDC0230D07DCE329F22D337A92CE5D393773
6CF33D2476AF6F4DD7A7DC6F9181B5AD1F458571E5AB59D4EADEE934B0121555
613AE49A948F1C9A7052E393DA5CDD4EF9C7A4BABFC2331E9FBCCB38EB7B683D
E926088276A9D3FB95B37DCA4A1C8F2CEF63436FF7F3CFAB44C751A9A64AD2D2
119B417F3960C98E3998743E025CB0AB9AD87AD00174A22217B3D096C3BA7B17
75426809BB1F01E97FDF7F6CFEB024CC75D31161EF78832258088E3AFB60A8BD
6CDA2D679A70B604F08E6ED1FAF5CDFBC6363F1F171A0C980E99A9CBBB1D99E3
FC8AA00874C833C1613C9F7673486844F068598D137057702B4675E357A366DE
3BDFA259791D920D97AA1E92AD3ABE14F60CAA96E8ED6AFA53CFA1B5B87D1D0E
6F4DD02EFBAC669818EB7FC55FE0953EE7AF69CE2FBAB95AEE9FD24C37C0FFA8
9BB529A45E162A3D5C6327D2C37D65854EC42354D62BB7901C731BBBFAAB7600
9A7710868DE488540F3DA6FB0AF4F42643C074E4241703B77B35D190F4FA032E
ADB3BA7946532FD3C973699E4B0C00A041DB02D0EE3D7ED8B7013C17F5E06FBB
AB586C17CB15D8CDDF8192DDA575E1D8EEEEE7AEE6B2C63BDFD8BC1F7DD76460
4DEFCC249588C7D8C7BD1276F261F09277292BF193E7F11D1C5F179116114E27
D9DF72C5DA82AF43DA7FB86CED41055B7896E221E2AFFF5A7D6158BCB98940E5
71B7F0FFF2427612DBB7E1E1CAE9D8C48075120885B8AD069F90011AEDE2CF7C
A8EC8DD2242B034653402B05F43C9F5CCFDE0323615E5C4DDB0AF2C44596F023
EE046A54400FB47F22F06A63932ABADA89202552F2C54A8F91423EA0BF76A41D
C31FD2965072FFE07BEE8319F5B4FB9152BED9EB493BF00636EBF318E6CB7D2E
1C3CD2ABA1BFD5603562239D775F4123C115A54C547A9F44B41FCBE3623D6AF5
BE4F53157DDFCCDD6989CAA8CD00688E4525330AC1F7C66AA9BE907B05D3AF50
9D11BD02CE749432FA789AD9903BF527BA19A1579FEBFA922991AFA8E77C4E56
0D9E2B74866D4B7CE807955F0AE58B1545E2D7E2B1A1B703EF6F2B0BE0A9A9EB
0B8DCF640174C757FFC8E1C0884CC85F175E9F272D8F1F2374FE3D492E032F92
C2B3893E5DA1E77799DB9962E4A708F0C85D8DB43D9B1DC1CE01DA74B3E05CAE
4F18BAEA5C40B28682B913AC070339CC558E5C564A2FA995CAA0B82211F9EDA3
BE62A104305ACA75CC33AB840DCF4FF39CCA5F3EDD71757387BC2A302EA6F3CD
4D848A6B06F692E07D94B326237285031B8280D55946E384C21E0B7A5FA6EA17
6CF3C7C8203E903ED2555C96BC07EB76B3C52F2025DF28C8C551D645A64446D2
D16A0306288762CBB25B18161B5512ECA12A928ED7B1671BBFA59AD95931147A
6EECBD0BB7663B98DB62A1AD4A43C2DE86BC767254D68EA3CE1F7442ED082390
E8D08E079C3908B2B49E492BF66CF6A8A58E1FD048F926BCA9B526A2759BB4AE
7D113A58228EBF4BDBF9F3543934A2C65B19D45C1A7967163E3A4228933958CA
E5259B314274679E87ECDA12545C452610E0502F962B53850BA4BAD0333C3289
C6434AB736DF74ED3DB7084A1E4BA6CB31E91DBE7E37524B7F25101F89E0593F
2E736A260D5ABB6F1036693035A8F7FA98D19D83E18957DBA06D81C7F66E1631
33573339379448645B0364860782AC2460B4A041D0307A0AEB8C213CEAED6400
A7EC5E4D3BFB258CDD141B09C2EEE73C3AE344BFBE8CD9445F158A038B403323
BDC321FF326169861015B93F8748D6E572FC9826A029A5F40C547C4942691B04
F88CDBA801EC1B34A025D50F9870F6A834640BBF66FFF0FEDA6A46B9CDAF0910
9F3BDB7F76024E584B23D3A63921292AE6BB0FE0745A69302B6D650D83C72746
AAE069371FE885A18E705C496E9743345CCE061B9936D07D9BB1DA4EA0144FF7
00EBA431D5DDD0E6502C1775E51A25C3414676F6739DC6269A0E9567567ECD19
CE9227E7AC73129639E199A8602BDCFC01E20C2F77EF10A60B086C5D7F12C6FD
351A942E0049D4064967755B34F96A6BE04048F2C20E089A6C6C0A54C6131BB0
6CFAA2A20F5A501BE60F352242A7AE1BE4DEBDC5F818304CDF7A747D7F7D4BCB
467628EDD1190ADA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /infinity put
dup 50 /element put
dup 54 /negationslash put
dup 91 /union put
dup 112 /radicallow put
dup 161 /minus put
dup 163 /multiply put
dup 178 /bullet put
dup 197 /plus put
dup 198 /equal put
dup 199 /less put
dup 200 /greater put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735F731DA07EF3D6E818628
AF05166460DA5B83052A083336C23DE3F4916E3E60E10509910166E063832CE3
29E5DF2FDFD0AA1DC9F1C99A95FC477BF7F113B2CF4626600B1B5DFF712EB302
AFCB86EEF4DD29EA456833CF29BC0C5CC42C0BB09735A0A83143A0560B03DF25
B27B0B383BD641B85E8F6790F6ACFA6A03C77D60425F8B515C48893EE05FFD60
CB40D1B9185FCF7D27FAE0616B15007FBA17D23DBE9347515CC3A932A96246E1
85C477A9D6665D4F5D8F374CF4C0F4CDE76C57C8F7BD4A66071AF94604FBA047
80C65D0357949E03600E099BFE0ECAEBC6E6A636BCFEFC0A9035532476354B49
DFC61218068C10E8103BFF464394C6A73A86807D46452EFE438C9A865EBF163B
1DC635C3791543F762536C96D9BC1FC356520C272B359983D13FA13BD08D3532
6C6C7AED2B5A13A215C65B7AACDDA5FE0391DD4C4002379CE66E7E93C07E7756
8BEBE988E1E649D4EFFFF70A0CECE40A893043BBDEA9C3E40F0D4E68A919FF46
9D7FBD892CADFE8ADA9B2F16E621E9C7AE8EE1E189A09D6035B5C68C0F4D6A34
75F9E392D7D666FB8DDCC026C3559254439409857DEF324BD4E5A2212D27A22D
C0291D4A141525E019A8288D184B85ADFCAC9AFBA91869BD7527338A3271A721
AB0C40CDB04634BC73576EEA2B1B7EAC603CAD92B43386C30C4DB8327937D9A3
62F8F7D3ACCFFF3214487F3A359C52B809A266E18992D7E44EFD25C2D1F0F5E9
5BD6AFCF2D0C1AA07E901F22E6322C793C2157C16F29C223B3B9B9ECAAAEDC06
E52465216E9E1EF1D0FC04C984D48D39950D47059AFCD7F490B00E12B370A2BF
3966309F19F9E7656B6135808754D1C89F34AEDF9BAD469B4CCBA47F93C1FF4D
C57D06CDD3350C4A0B9C26B122785979D1E6686FB0E5ED2B71A320996263A912
D6B34517ED364DAEA990E81BD9E1067741D1869EAB53FACAC15DB83EE4DD6B7C
3D091BAFADF6FDB166A748621A5D2980E4D419683CCE97384A1D80D700E143DB
F753F26A998B923000574297E8BD9D146284CD4BE98069D5CB0A0FC3360434F8
FB1AF3241156EAD7EC53116A22633C715BA633659AB4476BD291DA50DCAB597D
E61DDF56143ED85A625F08A6A6B904B4F24B0EC3EA8DD5519ABE861C25211AE1
25FCD0504515624F97996631AD04F89574137A354C8E0BE3AA5FF4B206EC463E
6A15138CBFB3724B65F3B1F47453E14FC7238B5C96973CB710AC5CC7EAC3EFA8
084E2C68FBA07A41A5E6C1A26519ED28D4782B26A894A234456FDD7C885571C0
82CF505F699E99EF70A6725F9079627A9B7CB6F369850F8FCB7D93D5002CA5DF
447CC0956DCEBF77634BF0198CAF0C367E34589AAF44FA17E1178B50B9B90186
AD7B3BD91AAD95603022C137EBD456FE681E220F6F236A3BFAF7AAEF41E2B833
D45AAAA5660A6975B1247A8B504EF63D390E76D5D571CDE14B941A65BE1A4C6C
CA5E4CBA59E6DDC90FA66AFC3CA018A22737669C13BA630A3BA4E26D11D5E7E6
CD1CB55EBB4C0579C4D42EF798841DAFAE3C63992437C0CFD72351B611445809
4AD4B4F1031B59687A30E48685308BD749FCBF739C58DBBAB7FA353DFB85777E
90B64F386B155B4F261B69C3214E20A40608F2D8C2EE79899C4E22C05A59AAB4
9C3241D77DB9075F0CD95D7A2758234ADDB06B8250CEE4FD3019AE85C25F0537
3801D124B7B9F920B61DD2B2C8B209F19C034BCD642D645C8B70B2B60D27BBEA
7BB23287934B7E2584F067A0043B3C9A7C6C4DB719E4CF381C87C63DD4C3D139
9F2AEB0597807A6C4C5008AEE4F74C55275957F404015365A529BFA406A76A85
90D3F33B7F95B7CAF1D7C3C0E165A9976D12F88D19DB5CC967DE765700C31C68
A7AE8AB0A3D898AF238E34727A93E26F837DE5338FBF35BE1EA61CDEF885FEDE
9105B73CA62052E4B77D62024A5F6AD86B202F991B6E5B5C43B0927A89B4EA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
5296FB33A7C728385CE3A6CF8AE664B90042462B94A015D5E8704070AA59636F
6DC7EF0DA3F7829296DCB0F695A236FDFDF7F6259B93A89085A7E9C818578EB4
A5B62CE7194D5AD4ED8D7C0A1593641F0609FBBBE7EEBD2D0C6FCB75E7A5907A
D7EDDB8B14D3295A425583E66138AE558807F859688E51C1788E04F8FF6AF035
3ED1B6827637A8043A451DED8B6A6F25C04968AAB2910DF1314D1B4A010CD4ED
2FD8455FE6FB032968765E65BE3556338A12454E8BCF6DC82DF9529B9BA37245
C3A13FA42B9C8A9C98B34D79C82F9E61598ECE57E551BF193BF37ACA22B901DE
D22B528806F4D4A0BFA0253A5BF89BA1451F39C395A8026A725FA8746E36EA41
C57E7E0A23C7592786987A899E28EFCEF81C18AC249388867DA67DA44DF3E926
AE8AEBFDFDD85BFFA477D990FECD8CFAA40F133E5B492B50B5B0A56669AE03A0
F69BA3A59693416B6758A4EE5CA1F3AC445031ED0B3FF53DD57E53AB4918EDBF
1B76FFC1DC977E95A4B4BF0AB273EAE0E4C1613540117E10965F800C4D68FC6C
6E6B1D1D19023A9F88A39807511D45410BFB50959821E14F973B43BE23DD4755
8EA0E536FA063D6DBE5E0587A1CCE422CB13471E3FABC48437040563AEC3FF18
E73E781CA45857DDE560013B3B394283B77D62FAEB6119E0E45D3C997CF952A4
EF7713EFF5620309096E21A686825B3FF021709810ED004976DC33831D413CD1
10DE5D757A13E41BC82D0980459AEA993B1A885E53B69F001742690F9808BF40
F20BC69852916113CBB5158E5DFC873FA6B0C2D93D9F77230D85A609807A5168
4145A8BE6A43975C6889379218C0E12D931BF34FB85047FB40947EC4EF31C974
2197948EFB982E4BB6CD532F97CED47EE0E668886402A70535A31944C0AD9331
242663F9133829CF75DF14BF50A20BD3A373198CB56F38BAFD1D89F33FF7E0AB
552FDBEEF31D677979EF1B4EA43D258292F85DA230D1B573A0F747AA922692D4
53BE4BA1FFB2758F28291F1F6FE28DD3226C5DC353ACEED85F6555D22E45FF2D
FB499D69F12F4CCE2832BD989259DC4A49D4AD1B581C9DC97722C444E1BD70C1
E35DA642EA0224A7A3F86028FA508EA0B7C8E8021AB9C36F7E78A1FCB3F11769
DABF2A0A2EEE072875ADAEC3D3A0EB257057DE02F4E24229444F6DE6DDB7E281
75D59692083B534F3BBA4DD0A64CA2E1F74121E640F082383F10711C949FEE58
D3EDF2F4EAC5238777BDAAF98FA501C50D10D6C126A72ADC4D9BA7260145B373
A1606EDFEAD3D5A9F55918C867D8966B71A10CCC4F21D41496598AB010DB0715
3317E24666356027644FE5B7CA424D2450D625FE73C0666AC742605941E40954
39D7BBCBA6C09E2E8FB85FB42D5A3419F73ABC121D8DB40B53E3A579E4416D3A
E77CDC22DE900657709B4D9F11808501721531B61AB91E7AA05D015A9A3280AF
03F9E8178B49466D92B86EEC7A1107F0AA9727967B6029658F46EE668AA3A8C4
6BCF596A5CD4FD22AFDFDB89CE8AF01A006C099C41C82B2E70BE925E5EE1E861
7FCAC8EFD10858C763763A313D3363BEA22381ABB958B32B84EF50AAEF20C4D9
28F2E53EFA8954C3ADE3E0BAEE0B45EF404756AFF88FF13854712FDB8102DA07
8DA0A9472E2696386D99CEA17E9DEBE27755ED4A8CD9D9012173F1F9FFB3A4FD
116D94997345804E119E30EB552DF2EE8AB5FB60E18DD4D3AD9FF7E41B2365EA
E40140EA9B780D6828773321EBAB4CF47B546B42F22670E983FB7F9940D5540F
62C3A5B13BEAD96CF2C11B51CA3E7C3051FE1ACBAD93F7ABCBDC604BAD72D608
5C84D14D5CCFF7931B5B8159AE6E49888BD703C62E44B62F2FC7701D35FD4BD7
11DAC555724F5108B184AC34142F4E33BA534AE131D2975B95F2F5BBC70FA767
61CBA2FBFFFC1D8AD4E0F006B1BA26959E95B027A201E35FB4FBE29CC460BCF8
54CC3283CFECC907BF7F3FE1169213214E89E0277B9E8398CC9E5B374EE14ABD
4DA2BDAA4EBD37CA9FA1C79329CCD6F4B388298943C61E1B3BF42B06233166F6
78C4E030DBAA42C152EBC58ACAB8042143C5D90E350179FD7FC4536D08082223
40AA44F2A7F2AF6DA0B01BEB90E11ECF5CB509F2BE2026974A1D56BDFC060FC2
577ECD59E828384EE987DEDDF0727E311D760A1F923E16A1973D6E84BA3BDA79
327710B0D9BFD4316F9FE3AD4A2E7348E89FBAF4981EFC36CDCC028EFE4A491E
898BDF9C7191FBEADD655D4D8EEDCB0F1630E1072EA3CE4A3F375E7C52D91798
7B259DD22B07D3E5465CA310E50CD7436932CD8A762750B03421C5F4654A760C
3581803F22A544624D1A29E12B5F3A4D21FA6DE5D38F1FFDA11730BD7EA4DAE5
9A7E3AE0A42C9A4A6A2CDCA9BE416D12D201CE9F627293C923F179B8FC1B2E7F
BA4B40A5B64EA97F564CB46FC5B58DBD20318D1F65B238DA2ADF2D7E399F549B
EB391AD6114AA1DB33FF5FF59584C81A1B39400EAC8A99506D5195B0DA5A5018
6B322B345921D54D2AD8229C907E6A664B28A2AFA3FF539CBBB94D8118C98047
08092A5CDED1C8D7507980F3B7DF6369ABDDBA53C627211A10245BAE9EAAEDC6
323BD29DC4CAA15FE19241E64351FA8F32FB10CD34554B7A51DDCE43F4D2FB93
27E2A89AD72D1D1AE0336BC012FD27477824337030061FAC0F21DE18FECE87F1
1B7F4CB34C4A59E23EBCCE2E6076B3978B97EF69C179A4BAB5D24EAA99144A97
0FD8B12EEF942819204B3DF7C3D217D4401289C284BD763EE1913C60D9215E89
4A801AA49B49ED48833210F41D2FB8069A59A59A1D1B86CA745945D246F83D86
6B8CC7AB76EE1E781D546F0BBB74DEE98D644FAE8C5860D0930D756A66038F05
8791FEE78CE10B12B100AB1F14DCC1EFCDAEA22E6473D8A9AE183F080DB5F564
1CDE13C4569D5477A27EC498DBBA04172D2FE5806735A840697518FA49273CF3
9110B40FDC28D80A83C901B41564ED0E596CD93B93D454599D85EB7D35201247
49B7B40C4C9DF353AFF7F47BEFBF0ED2495873AC9EFBA8956A576A9C1FFAC977
F016A771552DFAA02603F6FB211E6EA9CF592A7D292ECEDDADF52786B986E9E6
6FFEF3277C1DA690E1855D89DB5513BC6286978439279993489888D9A71A815A
BBC15FF1916040D3998C375C6BDD670F2F289961202A24933B7E197685F42675
36BF35B558630D1E8DA55CF693D7A8444C5B8DE7D898ADE1251F02D0E3E4E812
3997309113785B7C2954EDE3D638E1550C5264B8EB3FB03E76B389892E28B3DD
BB6395501BCF19DEC8F7679B963D21F32747A1F6142E0217414D6447F9187EAF
94DDBC9ED83FB0D2DAAE0D1F7AED1A79F95EC891D32CB08E341A3D5727541C44
BCD4A72702A4357D242848E744755967421DC7F70A692A131A26C60A6A5B228E
A5EBF6D1D3A2101A329ACD699F7136A8827133AB11E28C333FDE670E3D8B7379
27D3A889B724193FFC8FF521506BCC932437F0ECAFF3F15CD531E36D1B93EE25
456BADC5FB2A202EDF539137A248D6B91A6F82FFCC4145600F80944D7BC34600
C72A3F14BDF4E459D056EC205D49AA2AD21A2C2A9A565C497B973A312193C5C6
A15E5D04D18D1FFB04A74E39A73DC2E0032205BFB45CDE8C2CECC8F1CE9DD863
4D699E6C291E82E21694223DF75C2863BCCE6D2DF2EACCA793E788BECDD26DBB
0B3CBB98669FBA557DA5651759AC87FAF9C640672801A454A5969DC18594368A
2D56BD802A94326F1813FEB66C087F6A064AE3CCD67F292584BA189E3B7784FC
B56A3284C9321ABB4192E0853AEB5B44C8689D5B67DF0CDC0201E58B63E94706
322FD8811954AF92E3AC3584C084C1C8E3ECB1CD759E02FB9DAC64EDF35EE623
6C6E4187DE68BD1D973D08D99E12871A27BCB2A25918FF6291165E2F463B1D8D
5CB6773F34E1E727FEECA19BB0FF0C04DFE7B9A29DF26B7CF9AE67B665A09854
D8953444CDE268951673D6384E5E3D3E0C74580AB3CE384D95FE6934D45257B1
6AB5EBB15E78387008AA4FE61E42214BBB078799F0A752C15CD4BBE0C4C3657A
501ECC6714E72AC322B4D962617891054C2BA7F443E61FC32837297D698CCA82
15882C948093629F5E2C3442AD370B0F1417DA1FC08EC0FD5DDBA3269176A976
C6AD6FCFCFAEC61194397D7D745FCFDBE43546E0B01B3E56A714EB0E7D209E50
4F2FADD1D6C3D1CC5C07EAD8487BD807E35B8CDC1B0CF6FE6620D69DE35DB678
AD29745F5824813B8787B653647EB6D7735CD482200746E54A12913ECF9F9DDF
F289BB8EE99034408BEC6F7C9EDA8B4B245714A9A4340D67B1EE8DBE0EB078B1
EDC023E75AD49BA7AE5154DBA9F8C4742AA3BC90090E9A0F92F1501F9FD6CABD
0E2D9CD6E8ECF3B40FD446F56959497D1C45303A5BFCD4BBDF58E2F605FF30C2
C9CD28488C1F203390EAEC9258D51D7482602FCD742C9E124C564C5251C4F8D6
47A01DD21EFCF7CF7D93FC4292E10449051811154265A22CD0D5B51F7838DC89
F74F32D2825864078717A30EB978889C58F1507A1809A796D322E5D0D625B4D9
BC59A92C681A21F74E3C696DDC7CC881A1998FD53CC14CA1C2CDFE5EFA01DA84
CB201B362800D9D4AC55BFB537DC7F57BCDDEB76DA5C72C6F813D50DF6FD82D4
047DF8806383AEDDDECCD3D272C5802129A7FAE6AEE9DA1108C632D476FFB4C3
737F306BD13CC66D6FB986F6F4181E2663F112E7F8D0C563A05E8F9D2C5D50CA
56BA11A8FEDD1C9318D387013C388D0AF3CD383C5895059006E6182424A77F3E
807FF94580C287418295CC4789B3F109F7DF90008B808828293E503F892E2AD3
AE17D1F4F170EEB827A8DB1FC3465FAF9982B447F57A117195B7552C5511CECA
F4267EAFE1125277241AD1A93AB9278CF604556B6A6F524CE8B24764D050C0E3
C2597CAD2BF151A3385396491BD41BFD7640789903E6DA7550AC6BF3483E6A2A
4699D67A4A3BAB2D9B977B9850E1D63AD8947A4232D64CC4FFE8F2DB95A4A2E7
9D2906D056DD46E091C95E5787738A65626474BF68150AB85F8A39874FFE2072
A703353A540FEE631B521E4BC879A6461046CD604D79E621DD38296731E89BD5
3039DE579968B5CF9FDBFA231A72D8C33185B76C58C9DE73D0E058B9944292AD
C0F9AF6DA57A5AFF18F72AC458E20DF439C56DF1727F5D50F3C73B505667C711
12F336A83F7A9EB2311906CC5070524D184B74419945A9FEFB8E2F2860942F1E
F45FE6CD98BE1476CF77DB0AB25A10BA8FA1D346B462B0C69172AE138DBA16F6
8ED3EAB729685DB044860F483D2CCA152B1614F41C468D26B5A4CF3AD27E975A
6D4B238A6702DF5E11367A8CB27952C3745B76DC8DF61B80CF1C27FE26C5E1E0
59A7701192F65855B4CE9B93A645D67E9B3160420C5CC95C9A28841FCFFD857B
6F5060D7530DE8C7AADD8ED8AFFDC6C6849CA2C7D1D9B54A5552D2E20938C9B3
0BADA48B50E47EF2453EF7A4E09A60E9733F52DA492B8A590ECC217E59022311
5919D85B517FF602E1B58337EA8295F7A691CFA9BC37EAE6705DAEEDEA7AA4C0
8E327ED027B82C21C593C2475A101B434F253D543F8A80A011F4D7207C7A825D
08BE96181A6D08DC2C80B9077A8806EFE8D3AB2CFA6440DD82EC1FB20A82B1BA
C778774020DA9A6A7A1BC4BCC790E82635CDAA82A6548E395B9F98DD697B9DD9
1A00173EFB8A52DBF39C3548B5A2BE1726990A2F6A7E0C30CCD3456F7EC01180
81A739202898F79D701A90EB5EC1D8596000C2737DC5A99B9BC059392B7E3FD1
56AFFDEB405DCF235A497AC316B132B3476551DCEBAC152C9C04D1D0CB4472C2
0F429149A9FDF67D495296A42169DFC73ABE03C555B0808D7231B386BA7D5175
2D0B13F4305D7480EE0B20A2049A25249432DC72D392D8913DA1D758D62DF6C4
CD566A063E625CE2942CE2772F63FA9CB7F5017C5C7A63DB1C5318B590F799CF
00300E33E05FD6FF960420E3879B8A6C79FE22DC8D5E268FEC8EC688F7147DBC
F8F39FB84B824231A14A9E2DFE0F7D2F565ACA8FBFC706F504B1BCEFB27F16E5
79011A5E5735038CC2A85D562ED72A737596B930BE928C7F70B0FBBC592094E9
1158482A0CC98E7382F46743A1BB050D0FB58A0C9917ECD2BACD55B1F626FC09
005E364D9D6B4452C1389ADB619D0DF87E53137EDEB01816D46D21B92CAEDA6A
E851536CDDC8E8E39F963AC1233D33AE7ACA07B51A1675D2B472ABADE6C79B52
A8221007D6F0600E67A367669D0F2F8EF8853A72529E02A58E7371A623BD56D0
8606E816F5433C1FE072DE4B65D7219157881B46D0598415CC64056907B39FF3
B240723E39B7EC79C03800693DF0F76659C592E78B61B26DC2CC164A386D3C81
B051C4464F493C39569FCCEE72F16F4A83FD09E4C1B5EF7BF48D1A363170E2A3
62A14E6495133A29BF9842C0D70A16AAD0B6C87C6CF98DC9903276BA0D836F41
26BFB845B21C6BD4FC37D98D939516C755DBD34DCF21BCB5132BD76F61207CBB
4719549E214E05B2785F3242276E789133471D3C1A1EEFD2F266078C8BC5DFD9
C47A15BED177DA265DDA452D7B64C01A1CD6050CC323781676F4E124360C66FE
35AA58273FB3E204CF2F99B5EAD60841C29872C8C68E473CD0F8F51FF93DA907
9F297DCC7AA9D7C739CA0EA66E0614CCAC079A4ADB4B9C46522035CDF48881C0
6314B934A4C960053AD6CF781C6F53896BC944D93283569A720BE4C022403E1E
422494ADE1266A1D5C54C1F11890B0C3891A934D8EDDB99B46EF2274FDBB14C3
3CFC2E542A22718D4EED4F8926D94034D7DC023C0C14112AC8D3E10656D6784E
2721012F7BBF3C3772A3EC51B19AF6A20E796E75AD9A742336D6C1093CBD6788
A412E0810E306A5D58A6B350D88EDFA151D8A457A4F1CB06F622E8D4903D24FB
C0763EAB2D1B948E529F0C7A13011E787205BFE53E5A5A22E87DBC62E0685002
57BD4709C3FC1A172F2E25AA01D1876F165C75EB8F0A5137283F3A63DBB6B1B4
E4A0A1B035D69B4651E206817C9ECC49F2C076247401F454F62DF22725465F02
BB5C388195E802AEB04845731043CF533199348D1141074CDB097FE2E435F3CF
405BFCDAD6D6C8EE07AF5A3F69F5F53EC26CC7AA95283B252093E8410180C578
75318E1A50D6F368621C74138A77DEB9489E1A2320DE4402EC81EE159A61E070
91E39070AE36FF5BFA45441FE11F56E1769BE6BF5E29D1958490F0237B0913F0
4EFEC96FA9AF1147010D4F4427CC63FE88712F679444C284E42CE9987C0B5E17
6DCB6414033D22B6B1211F59083D4A740537FA5B36E0A2A5A63EC593C6B84CD8
468B6921D5509B594AC255A4AD3060787B31D86CF2748A3D62BE5238C23A9F41
12F605356788B322870A4AD588A590AB8D56717689D3F58F626B0C4F31E3C78A
0AAF7DB63C93B4D58C531BDFD5E9ADEEC71BF48EEB999FCDB39968D30E4F99B9
728D2BB875FF97E00F622B157FEB85A017D6628F72A02CA4271EBA22EEA14FEB
FA8CB216B0C6824319CEF6889D527DCD6BEC2A1187D4B8E85B1A2B4D47D742BD
9403CE3C4ACE5E0DE614606E406F4EA3202920CCEEB0FA4D0BB8CD6E791190C4
B9407719F13E81916BEEC1668C8E7C29C140F23D6DCD4C80E629F3306A635C7B
2EA6C0ADED472883F1D31614210890DEA4EC19CA46D6A6DA0FCFFCAF56B96C24
66F5489890731DBB57D9D3424A03A0DBA071E8B0F708F51731B9AA4B8BB2115A
2E1457AE6EEB15760B400F183FF016C46B11C4B6345BA46A7FD4F4002409987A
8FA8644A34BFA6F5B740C39228F7C14F12BD4C90337D6809B747A84017FBA586
05A4FCE9BFFC20F7ACBDE3E03F4216C93E9B11852A1E2C6106AF1990B63D2F82
038FF72517D717FBDC28463FCF9825385749897BF6009677472DE66E87302EF4
20EE76417D8C8D8652E0EEF563E6BD121635409AD25120CFC9B064872B758999
9DF1A690DFC240257CAD8387FACF0118B704B267351AFFA20A22DCAC42218C14
8C505EB3855C49CB8396DCA0B8E3654C8232D2BEC583F4BB1C0AD845A6621193
32DEB307102D2461C32FE8128D863BB09F2D2E49DE1DC7670F52419BC040F7E1
FC53908FCB1641D20086F1610DDBF53FED18E88903C682CB696161BC77B24151
EEA499AEC4C3FB7C1D13AF2A94859656501821646AC740FF63E2C3EF283E617C
4E9E9A160BA7884A9BE6BDACC45D477D87BA1A514F6FD6A912276001E94F64E4
C119A1C4DE85607DA9C643C357FE24E63E4D0D7C87E0A932F474EDA348639FC3
A0B52B619E37E97C259D56A1660DAE9085B97D74A2910CF2B3A1A61D59E8456B
8DB3EB1DD5BFA77AC3B48D415C128430722864724F088224B818F53367809F56
9EF35D3BADC0C96C2B244BC71E85F664355B3D1870DDD126EC79EF8639E8B11B
B02FB007507B0BD419C0E0CF2578975DDC68DE7788C0679DDBA0BFB5E858FC77
12122B0ADC75C031E457A8E8F55A81052789F4ECEF42868DC3D165FF5D6D82C5
FCE5264B97855D1137889B8644FBCF79F057F2C420BFEEE0CDDAFF96B538B2F4
49549EC66ACE7819BBA169C48B2F81E2830239F397B154FD31061251AD3B0E4A
D41FEF514CA97578BD38F3E8DC4D7CD5BAFADF76201F820362A2CA71C8CFF672
CEE87060FC7E3F328FF199C2EFC61EE4BDA71618D7352D7A94FD4BF2689E4E2D
E8A0CEBFED08A0AAA58FF0D54C3856B0C0114AD4EDC91CEAA09145627E8D03AE
199D5A2682BD7D8761B710E69D28922308C00CCDD9114D530140C2FD873AA05D
B9501E616D4350FA559528B2F78DB6B06783BEEA5154167E499D9D4104761DF7
3E1809D293E1B823D1CAD5DAB5B3A50520551579697D4CDE1EA5B198E30938BA
6C62D276189F7DACD4DDFADD039C000B0D5983BC773D2542EEFDCCA2D1FC7B50
35E3216E3FDA662B276656438A3962B9D27C3CA67D0111FFA4EE2292B0FAE7BD
A34202EF92F067F255C4431419655ED81AC221AE6C39FDE40BAFD6B900DDC00E
E0BA1564A04B3BC3AE71702350D612C402F58A640EC1AA7A9B1BDBD530FCFA10
230AD6FB03E01C35504FDC754585D0F0D5E271DC706F5671E3C5D484C81888CE
A7F3BDB874E670E6521DFC8134A065FCEA99C1B45B1AD955472431DF121FF041
67EB021731B3083B7F552BDC9BB5E3C5B4ABF7C5D7BD07899B755DAC23F0E595
5E1A868A4B5B62FD27203F06A6EE86D8F4A918B8E25A8BB37EBA6D6228ECFAC8
6CBB186EF60A91A973105FC21F402967538D3548A7BD0622A08146A44B1AB73F
8C308EB0492BAFE0A4B1FC94485193F56577DDC58D6026749A1436FEB0525597
68CD45D0EBF9B53126416DEED6A0BDE93CBFDCD38A2F860766F1B15EFD608A86
E3105A0BFFD69F844E7356389084FCF9477C225F375E627D3D42C6D3D492DB89
88F205A83318E3243B5D5F1C7B901967BEB2771D9E8966FF6DF4645376C0BFA8
529787A6C56CC5D185F48C6C78728CD72BFEA55222DEBD061CBEBC9283056185
59C674975A93859EBC1460DB188AC671F035000EA21999BC058B61290D596558
EC214A4F20144C3372D5693DC6198F24E59A811078031CE389E903DDA8E77E83
9143BDFE451032C69FA919A218ABE3B7364F43A9D4AB7CF25D7E5C1AAE3AE317
A1C737CF80BBFE15975F75611F3C43BCB640D2FB0AF21AD48B0930701C4CE879
C9B7D4980F2C2ECEF0E8F21ACE8E6E2EB23BBF72416FDE6274B66B0E9E0DE96A
D6255DDCCA47FBB31392CCC4E0DE1F5F54EEACAF30DA7DE2E7E913B670E14DB5
75F3504749F701E355BF9749B3725558C8B741342DB4160B2C8A31DEA3D59CED
B5F657E64863E0F1ED7586BEB89C5116F822C4F4CE935B3927FD527C24687260
C2A6FF029F5AF4049CF35B6111754111044E6A29E119175ED451C1221F4E9B95
3BF0AB92BAB9727FD01446168DF3B656410AF7007E0D2E4001000C71E90DF4B2
7EDD5A942D04E4C40EFBB282031052920A5E60BE73C354B46A1AE8187F44322E
1EEA30BE62E804EDDD045F95C4F4716519A3E07DF104137AD43759591AAF9B97
7CDC9C2286F9A529B8F4DFF21655524FCFBF4BB03118C6E2BA46A441F4EDA2E7
250CAD24C022ADCD2E50ED136921BB9116856DB02D336DEFAA990B8DAA7E4BA3
041A8223FBBC9343630EFACBA3E675B4412758C8C2CDF6EF4E8A012F9B354A48
713B4925F2F49C3764B848F037C56C14FD8E94D964F05B3649139773A5BC22AD
4FCBD9DB2E12BBBBD91F79D3C27B093EEFA48A4EE9A01692A603FFAFC9311075
1B5ED6C55412D8DDC56C296B51DD9B012FB4972371566119E68E9CBBAB052240
5010D457CD5E455D31434A09B64FBDAA60CE1A2302962D011DF39EDCD903524D
A5839D80375F3B47EC33350769E6CDDD6F767BD78B47B45FCD2D8A89ADEB11A3
575EDF78EEBD84C1B4A36C6FBDAD37D20711B35F9349ABFF7C516F58FFCCB220
EB02310FB17C1F17D4BB1725721168DC1E3BBEB8B88EAFF7A9A68FC5D652D3B1
45718A88BABCB1EF03C1E2CBF3D19F5EFD818262A25FE0464CBD78901DE8AD39
5F6047975BD9580DBAEDE16F206873FB7D71DB1D4D0868E008B9A2A9C69D42F0
AFB220FE1DE3D253CC3F597B39704CF2F86F334BD7B5835145C52A5EFC5CA36B
60B63035E27F66F8893B01F8D0CCDD07FE6C285D244450273ABD8D91DE0FAA66
306C25277EF4AD1A7A902F95116C2F1D1E52235CEE364ED35371CECC2B1F6DCC
68755F2C2BB6AA2DAA0E393C9CBBCC375C749FD640E53BB95D63F623F55DE686
B96B4D486843AF95255828E0959D3CADDF1CF767595670D828FAF9E3C7ADBCC2
0800DF87BD77BFEA46C6CD3518B584FEAE7F701505D88426FB22EA878781BF9C
9617C9981BD061FF6A3CB0EA04ED10F3D470148CA55C7A1C4ADFBAD4BEDE7D8F
0977100922D7E603BA84311B1A3A887A876FC0E2867582B43AF9F5FAE13BB03B
F6892A3C38B6B9DAE5CE5EE69C1F877A89FEBB7411F957FD84E5FA9400C351D3
FBC0B1E1926CF1B0930466DF9063BBFBF31361E2ECEFB861ADFEA2884D315F56
55CB89BE0BC97DEC96E772B134E9679AE847062270D5E68488C1B87738C55442
9F72F819445C434D4EF1B62BBA18774238689202D572C83569C84C053D6EC9A9
4E12BCE0E4340353CC16344BD81A2BA92AD544D204668675E8F3B70C00924C71
F8FD6B8BDA20700DB085765FDEEE6C827FE941C662450EDB73669DD6039FE125
395D3A6E69C007E5AB84C0E637BF68F6CE9D13DFA35C8331351205AFFEC1A7F1
4635B8AB0C3878AB36BBF2307F7D1E8903F1714FD974FBC07AA7808B44D71890
74FEC94C18CCFAF98B89BCB8A14C06DEF1D6E61AA77F71274887D955B77C5542
839B277A3BA70517C9FE24A6A1AE1DA613DD5271E14993AF00CFC5AB8AEF96EA
E0E3429B2F350AC3A04234ED01C6865D003939DC43F921CCAF9847172F6D8E36
C9D71418D97D25113BA2D44E598D0088FBC380C92AE3E035C683B6AC721087D7
833E99067C266AB989F49164B12BD8BCC6C706CDD0DBED7EAD62A642F7BC60C0
F2544D7E761B36DB8A8483306D136453F404088DDD4250E90066F23438B91EDF
D22F707E7F622B679EE961F35061B43FF47B66AEF9D1D014DD01A6B2628A4865
852B16E2BA5C60B4805CC703FBE937B85CF8E1D4CAB2BCDF18517D05EE6404FA
6A31612C3E6F4BE8D35B82CD3C930979D8CDF12DB1FA913E80BB5A2AE12B686D
9FD0A49893FF4E95DA1A9A69F73B5C3CCAAE1E43C1F0966D4A7F5106D95442DD
41B5127A59D1C079439747E6B700F7BAB6202AF286380287080E37D1D7306C67
A28D41E87B0FEA4964AFC1F06E0EC2BD1283D4A4B506A966D1242462EEDE7BF3
D23E44617753BBFF9133474212954F86E91F550E0BF6AFE62865FB29F689D227
C708EE6A80BB2D7817F45B9FB1B02E5AD5A605F5EA1A19837DF45A4A25F8A38F
9B8CCF8C007348787B1F5F5B07F21860F74B28DDDB21F7B9E3C26A624D22613D
D62E6992089AD29937C4D96C37729186C81755EF31F59213C6ACB11A812977CB
1DA8CE5F5B4404FDA40CD004C91DC97115C915EA15B21B9E327B1ED8639151F2
C72477A4DC69D814005542A8469C9517AE0909CF9B6437D841959EBFAFF99900
4F5B98624617CE82471DB7F0256D223E7D5F060BAC7001F52FCC5D61EFD2E317
BC911BD77E71442E692B8C42813B3DD24D6018100EE6C6DDC0E010D72BD3CC95
6E8C467F6FDCB37DA903BEFC7BF59B7D49890223D4A749965F00122C79B3C513
D9013E06B76B41259317F784A01F39A1B4F51FF436EE823B851F2349606FF4B5
ED3943DCA8EC21775E9A1049C1DD74165B2B0DE39E6F40E62830BE0BCBD1A84D
BEF242C9AD0328EFB5ABA58D2B34623787E88AF41D6E21D7124F5042F782DC75
6C340B4E9C3239C2E0F01DE04AED0C02D0F0D688C0D007763A3C873F29CE05E6
56A9C94A96DB2C32C985A2F33771DFEBF25277682A19F85F03B6D4C30FC19E68
D308DA305E410ECD37D6D30068685399A4F65315639A3239280DE8820C1256F8
4E298039C501C2AD3FFEF29A99ADF23904F00F28F53639B9FA8AC6AB09C69206
1DD13B661E5077FEB7ED3C43D575D939602C9DD6B35F2A1D36B6A4838671AA10
22452D252F6E965231A18AEF19B1EBDB71E0131905DB9F97FC07DBAE93DEB85D
755446C61EDF81A1FC613F5E58DFFF9B230D3A152C446E6497CDE9E2A915D3F7
DF8455E7D1F02525038DACD519CE8E80A49B93EAACAEB8ADE99789CAC9E8EECD
C069D669911838A5E4AC396D9E9177CB95BDEF4307A6C0CB4B76D6F67C210354
D1E7DB60BE347C18C6362C0D8F77479813531C300777238A6DC8EB6CD6FEE97D
F7EC5A0E947BECBFE5F28320EC3FFCD185DD5A6093EC73FAE9C91F01DF2DAE7B
06AD04EE2F8ED5985D11FF7D444CF6E702A784C193D1746D0C589A871E39665A
362F5C31747C6B55D1F221A8AFFC9EE146098EFEECE178B56C78B51D2B83B164
B61836095BB505283BA1B7D9484A05EA5A55FD78AD8A1C416313B90E045354CF
A93BE0033CF15CD5719FA5A97DDC9C0DA48F551B89699945E33F39D97E92CF69
6B2650739B427C3E405A295395C7BAC88B8757652865B47E784035F3225F26EF
CE105A623FD3D11FF4F724F7E01016F8850738CBB1002635A39BAA0DE190009E
5C09DC6A5BC8CAB26543069BD9859989930FD7794F830714F2897142D063002F
57960A13E8869F964CFA52D3F990FCDDB475081E3967E6DED4FAE8C43128A978
4DB778DBD7C9221944623E5DE5227A2B8D6C1EEC422C856AF345EFABF807BBD5
C1D9390F34E63DB852D15E8D546AD3EA4F0EA36AFAA05C599B7D2EC260ABB0C7
17381169929BF18239BBA854C876C9EDBC4BDAC2D0C93F4089E870731D61D605
0B10F72B25BDAADD26110F945635B3B4AEC1F11DF92829D231A1F163DD02ECB7
661A0A12285D4A45768756E19A74DC23501F9FEE320BD8D848C056D3336B1246
121065733876CBE98B9E64548C0F8952603E6A1A43DD999E8269F6CB524FFE2F
8AA90BF4C6A08BB0AFB9C5839F5BBFF7BD9B398E08F415C845297FF1CD6B96AF
8F9B73E30B329DC66C042866D741071A16CA61EA596BD807B581EB12432FB6BE
D9E05C545C238E7E7704E85DE89BA056750F24B1B7498563FA51E0A1F7B94771
7121243492783E8E2BE2B277B0B19323EF2DF673965AC4FE342DCC6788035200
DD801541CC1B760FF9A926D8DE5D0A087EC875F5E0D4B93797DAD619F8335197
1D3AA92C6C168E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 174 /alpha put
dup 175 /beta put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC34177C640BF66A3387FD8136A7D5EA4E26CAD7951CA8F67F8419D9B495C
1600D9FE3CDF0F0348D3C3EA3B035EE646944BEBBE11144EFC437541B45C36B5
3F1E1FA003F019265D9849EECC501082624FDADEF8C1E0F0CF846CE587DFF9F4
9C4438FACB8F871DAB5DE3FFC53FBD9B984B002F9552A3335FD13263D2876D76
BEC21F981F49B8CAB0F872DDEF7206B15E302C9207A071D513F3D29A2B1CB251
03C64745F23AF2CC8C8B621E9E3271620735C9C7C11C270B1C6BF96D555FF53B
4E8865CA38869A7EB7337CBF4871314D5D009BEC8C5951422C3492BE91886D52
6B94316E56A74DE14A0E8AAD7163D6D9B7823DB527C657944A22B273DEAF5C86
5DEA06501B0FC5300A27EF5A0FA16510FB9F6D14FC983E99D27F9136DDC7067E
DFC2807B3CE00CC05F6CA1D87A1C83530D8B49D261A5E22AFDC482192155507C
E3007250FBF4C90B3FC82C6D6209A6650551CEE3B17B32722B35CA6A99088EE0
A69FCCA3DE53CDA1D79D138402A27B50483606D5172F30BB68D00E8D0DE282DF
6D80192C2787656B2A9B672D764D2F51B2393ADC71A36AC0FF19688AA91E3A25
F9CFEA2C3E3EC8D826E45D21DE1CBD7460D11301E6A9828BFF34CE9E8D50A095
30D29617D1737F2D0A3F2FA1D88A32934AFBECBC8527A737E27EFD966A9B264B
C4DD2BAA7B849854C392E05AFDC82F982C4D14BF6B9F057A295E39479AD9EBAC
A543D8B18EA24CC257C16DE3AC1F8D85467B5146B72FD47EC0C3BF592AB98C19
276A104C8770D3E62C7EEA9759D337ABD316D717AE899B9AF5487B7FEADFE2B7
D651B09FAE89B0178B3227810D99B48361133B54A6DFDC8727424D5831517FF9
3411F08B5F5A17C1E554F67E8941A1497D72FD4AB3216DF6AC30A36A1D627829
5355E2C5397DFF3DA3EAF20FD08453F7D3A3463ABF03C400DE486813AD014D02
F85CBAB8AC63097A6025CCD2128AF86CC0D133DFA2A68A8D2F4056A282803877
33ED49CE80A0254541A3FE4712B1D0739BEA5B0586EDC6E7D6354A23DB779C68
B730D263835BE9FA02403821770F341D55CFC940B88FA9C09F411132EC6D54CA
BB0F0EB9BA120D8DB54879A0463788B5F261ECCF0412959B80F96B6A10D7D5EF
F8F0EA992128AE3DA845EA4F3E740870077ECD6D24A7F6A55D82A1F6873D16CC
DB80C5C2A43762813AE552C241BB1E85A4D04BE52C851FDB6A573C057E82026B
BEDF22B3CFCA3B568E460D034710D072EF36F587071ECFC91E81B1CC46990974
49769DBDF33DEE51F4C3CF9568B9F46B1F02FB0D9E8DD38E5D15D133A00308DF
3062F5CEE9B99A83300B21326D8EA80C628AB3B969A09E2B23C0D3BD129D234C
97A89010981312C0657134FC2FB997B1F1E7E611618FFAE7450C64C44CC9FE0E
AD36D6DF6350E7B14E87A6A4DAE3AA973110ED39EE7F487B3E8EB50273BE10B5
759202E96B5E42FC10CD9B56C37C1C9F170D8F09092A7FF2FA9E4D13CCAE0F14
E58E315D95BC7E02957A25AA3604E40A2605F1A76134A6FF6B6E519EC66EE3A3
E7D86843AFB2B27CF003E50B4689F13509345BE9EA46A035BE316282EC8CB58E
9196C38065157F3AA264E55CEC0020E2A92CC1C5F4E89B91A092FBEA3B888D5B
2DFA219D0CAA76FEE6D3F7FF984AB45C99E9708C56CF03BED8F76333451C6160
A21F433B96329001539E6812F33672EC3B58783AFB497ACB53C5FDECADD38CAA
16459B5E9B9E6D7124F242C869D8D79648EF6A0A3130B074CB4DC843BECA93F7
01DEB4776DBC191A5E622883137ABB59F96FC334803C3572F1E29DD7939CDD60
C51619D6D6E5E01B9C62729D8C4EBED49810765C9F3B3B3B914555C7F86AE47F
91521A7C72EE86A22853916ED2EF562D105B8C0A14D82F65E4DD2326B351EE67
9ECC1CFE66B861B8D2094D621709FD2B19C01568D5678DF29E715FAE1A80813A
4A1951DECB624EAEC8F0E1D30BAE9FF2F276B247E0E8D5F8BE1DEF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-BlackBoard
%!PS-AdobeFont-1.0: Fourier-Math-BlackBoard 001.004
%%CreationDate: Sun Sep 14 11:40:06 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-BlackBoard) readonly def
/FamilyName (Fourier-Math-BlackBoard) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /Fourier-Math-BlackBoard def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {34 -199 886 747} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18A96F6D1C771F81C4B3B8CF0CBC2E8
4B44D923DDCE84E17DAE82547EA9EA5E732D78F03AA245377BF0780A3752527B
6E63F6A41202E7A6C4E4F9330A0AABBD04387E12F2ABF531216BF498DC6B6BE6
06DD50B385DDB864515170905E2BF225AB9AEF29A2181200040460795735C124
59C90AE9BF9F01F42A2ACC5A5D97D4F6548FBC903ECEFE9FBC8492EFEE55ED6F
F29A7BB50432A42FF30DB3CEBFE1C2BF83D613F2C846B7F2173F00B4EE5FAA8E
12EDC39BDDF670F50F6AF072673281554416E77FF134014D5C465127C28647BE
3E810BBD9EC9F9580C21D2E9479B8F0435749734B76F4C06995E769710828768
3141ACD67803BC92D5B405AEBD4B25D5DF255B110F1EF1C35D45D24AD0B1E0C6
8816579DF17721764D5D2CE396276ECE1E6142DC2EEDF83FD7B65717064CF671
051D92A9993F82D241AA1C3254DBD3DC53886264BDA18DE9FB8F584DEC9A32F9
82A6131D7140BC7926C074E26639A7141B87ACCD64E61A25DD7E26F463FD7834
964655DDF83538CF1DEA3D6363DE79EBBCDB429279F84F5DA8035CE823A76FDA
C2FE77036F5B9D71C0CBB063689C0C9770514E550CDBB1BE97D763729B78CFE3
DD162726B3F3190F0003F4812E9877545507664B32A1BC0E6C933BA64EEB3563
39606495CEDCB8EA6E63ABEC9F3558DAA0BAA350F45A6E9B145480D9513B87EC
14F7551489E0F96B698A104DCDAEF9160549D551093AB3F5F7EBDDEBCAA3ABA5
F0CD388ED13E9611675BA045A8E99C002616ED89D1F3EF0537C6E787DEF9B5D3
F20879DF1555A646A79400D3EB80A209937A45A6345C4E51748D3A5C523F9F93
FCA3628D463FABD8537A948B3A3715BAAEE70345F5186A550FAC78ACD262E671
AF8FDCC133800B82183CD17B4EA18EB6AD976F91FE3C1447EAB9EACE7CAA00F8
69C9D899C80FDAA551B57BDFD7BFDFE5BE081D0AE6FC30D89B49C43AB5C8F923
13C1E770F0905663C6B7FF3B02723580D7B1E8C0DAA19968884E622821BC174E
58859FA90DF4D140C225017AE82F1C01CF0FE1952AC0CBFDB2B2AE148026C116
8E9D2D51BEECF04E3D194C3B62EBBA84552E741659DB3BEA3EB1887DDF2FF5EC
E616B5DDDF84603216ABD3CC62CCF91FCF4BBA041DB075C2A7DEFCE18F39B173
F296A12AE1CDD8B0C1DAD85E3F73F5D378EF9B3E44241869EF76C09CDA729288
046DC05F6A8281F31175DF235627E657CD3BACEF2AD0B700ACD6976C54D0B1E1
803BAB50CC45C5102647D7D2B835491465DD1A2507761E496334D370804A5E4A
5F1481C6A20C9AAECEBA628202ECD441DDECAAE92151F47AB7999A2290E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B187
7C165414D5B2A021154D159DA667468782F548182274D5C4EB2355B3321CB680
CA475069486BB3601A3485F10C700038FDB209DC179AE59E2C186F2D32DDBB65
5895D321F9F0D2CBC036634F63887CDDAE2DBC989D53EB4A5AC268A8A3577618
2B8D046D3EF0FB94D6BE34C01E2325FE9B31BC892A2C4B71162E7D2AACF63BFC
4A5D3020EC756F18E6D70D7AD680C722CC936FA22C7FEC1816313959F3EF0906
0D4FFA4EA2D2D80BABE43DDF50DB540EE7A5F227D50EF50F00B147E81F5B58AF
99DF6CF3664C0535D2734700C77E099A1165E5A293853409721B0DE41D703927
3F7873A164EAA2E60365A516F74E94A32707ED4F6C6F1693B4D536A9C2B78B15
58184CF236FBD2E6782AE62B82FC154B640CE864791473748DBA05B781F32E62
CBE114DD647EA64269749766A4A39D61350D26436C392137548DA53156315349
CF777382B77264E903A127DF482D2E710014081C2D560CE328719E88A037E133
A909D6C5D3D2B29176BB14C9F19F9E6DE1A7DC7C5761CEA43617A142295A9781
88BE518146A143DA368738D89BA2632DDB8B26B827F6E45D14DD80F3D202241B
4D42217AE4D6D6D2C4E3CF65BB0044F0D6FFF448CA1FB7D3D198249291D97CD0
06A68D1BC452B566BE5BC94F6744F78CFF4C8533054F11F5D48A2928C11023EA
F9532DE7B7795242998B929D51B9BD00E71E41DDF3BE3D271C3DD27C1A578CFF
BE68A3A263863230A1F4A644D178FD05F76EF52427E0B7900199D88E18617CC6
6B903BC56262FCDF8BE2A05BD04731BB9F5ED6FE1768B8E88C053F44244AAD74
46E5CF5B7E82DADC55C79F30FE6A4C0671097D7FDFEAB307064A5CF4E61DA5C2
D0EEB2667DCB43CE1845D56A3754F815D0B0AD37F815185CDEC3E9BAA011340D
F748327FBA645C94B7DB285BED8327D235B4442B568AB516C9FD3846D7CC202C
C8046D2C7AB0E904FE48D291642429DD536A07F238E7B6B7A3204F7CE4DA92FF
0C8988FB38B757DA81569E4C39894CC320E9D6B3230A629F953115FE510699C0
34F5279DD0F4B450CB5D21094F008B156E60D29C9E1C5ECFA1362C7693B01E7E
FD5187C07058BE0311E50E71FAE08549559AE4BED310DD87E3187A993F272D47
6FA103CB2F0D1F5598B4954AB97990864D3DD55BCC7ED1D902DF00554298ED4C
5C0A227B1A5831B40FE09962E46CCFEB995A3F3ACADBA99739FA5A9F1C7509EC
693369985223C59D2CE7B868EC81FDCB35ED6661CA21F0B20DD102A8E3C00370
2D4AE3FF0DB54879137B1DDA0B194DEB4130410F49FFE8A2D7BE85BC326D3CAD
200B16BBBCDA36B0032BDA36520992E573849A02AA09680E6C3882B8E6E927C8
787E95D411E017F12DFEAF5817A1D157C1E7187BBEBD56D628D828D514C87A68
0A48B809A3F2D596C5A9E1CB954A9AE218F44B4D9BFEE22C49F950AC48EF241F
F99CB97A09D1EE0CB348C5A0E024A9C1F139B6B9877AD923C153F7A83BF30AE2
8673190004A8E2D06D2C969BD78FD57BCFD272D8366C232DD3D6192638935F2F
38D70FA753A5088E3B0088E08E9B058A8C6BA92B95B480BCF317E49DBC2B8754
369C54C18F943AADAC37C152B0A37BC4550F2DB76D4A08FA8F19B1B6401ACB51
B108F7C9457DD2A90A78BE0DF6CED10EAD65D3F4C054EF6A52F467FCA88ACCC7
B627718F858EF6B7EEC4344376A5871D6F2E9B3F3B676A0C6B2BBB6A862879F5
A2403B3EC3157374BCD58B9435E2C2E28488438DCA901343A05AC8433937130D
84231D08DFCB75EF11E395BBE69D406AB968DD68938682CAC00425C75BFCB94C
427099D352D5EC4969A9EF3319614B8347290DA32A1FFD081770397A27350CF8
0F42F74798C872EA3FEF39B8BA4AC8D4322BFF168325431DDCC3DFAC51CEF67C
7026220CFC602CB55FBD8E43A845A1A93B9871ABFC07307F9A5112702660CF76
3C0BCFF81B897EF9053DF21B6DCFE6ACFB83170DAC6FC8B83A49C6777F3363D5
EF86E02E99B0248F1900681A2F346AED2E12B24A9D9E5B8D450449D97AD9DE51
DF7A1F70FB0249B1DD1D2B12D0285C3F452B9C1C20E4B1650C7AE9EEB3D43102
BD1FDCB5885902675DE925CEF162734BC0859B2EACEC6A570C974DEDC6612AB6
5C1CD41798C76D4F896469A787F341CDBF4A20254846AA18D71F3C72139EBA1B
12C647BD75D5AA71B5277303899160050CA56950D287A94CF9C6AB2CE270A4E9
2675CF69098F68424E38250C656485785C2B9C53336FAF9A44BCFEDE0AE58E29
1B2729B7D7FA45836511D7DF7365B87B022674455EB50238D4CCBCE91F21EEA5
AE0B77CDE59DCDD794F662426C8248232CF1254FBAE5EFBC754B59133F0E3E32
2F71826E55D3DD24587850D219D59CB95E417BC586BAB6C6ED50A12120E8B4DF
CDE7A0893885045A2A136A502738DA10FE6EF27770625E4A40AF37332FB1D9D1
A1F29EC7FF76D3E3452EEEDA319B36EBEB4F995A09C08C28F8BB6560258FB01B
B4D32AAE01FEC82EBCDC718D7938127A0B6D136FDC941CDAF5A4DE5BF8B193F6
4818FAEC29D3ACD4B308E47405C13E10EC62E06D6DFC899C6D1653BA05C6A3F1
C2641BFB7BEB5AD0EDA3C69AED133CF300C578EC84925955A5E7767F3A13B732
1489858C38C9C13B802452ECEFF289EAB5AC7C6D2987804A05241C9FA6457065
CBA4BCD6B493B49FA3CF4D25163A38861C8CB83FF356B51DEE5B4AF30D2DB258
028DD7CFDD98EAB24D3F93A1C34BBDA4BE849A02868BC27FD2E4B701609C859D
91ED5F1BB4777EB8E4BC2555F9A6F0EDD61898CECEE35585F636AA7620CC6B87
B543BB5338F24FE1524C4AC975D488494BBA03B17C8BFE4A2E42B70765178DCA
70FB02D446B305D67E5C250E79B10F44600E004D79E8A3A7C5369886C0660238
04D29F838A52AD159495DCEFA464089468A339B8FAB5F5116296B8817CB4513D
854B8696D7A485AF111425B2020349486A62D5BF6E6B402207946720C31C5D20
41B850D1C559A8D62F0F3FD910B9B12D53E262E780E3B876EACEABF95E6D652A
A8F1B82B395BDCE188689D9A1CCE52D10421D48FD572B72C2368FAFCBC925FB7
54650E85A2866DF293CF396537D781421DC5CC8EF06577BFFDDD0746B4429362
0C7564C463176A02111FF320EBF19BD448F2683EA0554338EE58950C8EDCF6CF
F798BDB714FD06025861CCDC1F0FEB0D82E739C4D2B23690AF2995AC54447DC6
E1AF3DC958B687C4B93B734C1CA45D084E7E39715296C66BBE59B7FBF3990F78
D69350BE9B41FDB65EB85DB60EB9C51AD650554C0136175BA70F9ECF756A12B6
5D7701BE2C4234D167F6AD72DE5606029C0ED56C442C5FB9B7C287D02D956561
FB10B6A4CB7DF6B5872A25F801B6B32EDE04D498CFA658BF6C3EA4211C61795A
7915464E1BB13DEB050BCEEEC5ED1EE7B494379523EB37EF741FCDA1C3029DA9
1CDD1586D9CFBECCC74F61082413742A4CD189DD0CAD0D5DBD504B1263F05E48
EC12EF096A2BE414356399B49BEC1E8C8FCAE104A8A620DD863BD536789AE4DD
1FA1B75E84D1C2958033AE0FBB7520FE621E07BFB7954A2B512074D1DF5C73C7
AAAF9EABD6BB15FDA56C856E0A2C63FDF6DDA9181D053025A68118EA271EB7B2
024EDAEFAE90EDB63C28E367EC94AC69FBC5ED80B4481C09A34D97A7A4CDA6D9
FE1590FB1CAB7590C769C117C625628AA527A6BBE250F5A649FFC6FC7B4DADA7
74C77C197A808487A992CA2D8945B3B83949B1CC8EA52E2B92F74A48F815B0E9
9873D98F61358A267105EA4458C59C52F8C7928DAE4739707500D7E6362E528C
AAA9BD585F4A680B37969F6754D662C94468128D6344D193295AE4BE5DB7725A
36C427F7A73A9BCF43682DEC39A5973EB482493407221B770A883D5D0AD26253
0A338A5365C4AF1AB4CFD1799A247BB46DF521821307F5741B04304504682580
82D672AB53871FBA39281AC97FE4B9E849FA8978990319F65EC6C7229DA9B539
41DB2B52B6D5AA0592946E2698F87056EDD8CBEE30B00A2C4FFFB007337B680C
9E3EFE930AC07EF0510E8FE3F61360797BD98C9EB73D6971972FD93DB836DFA6
B009402083B78DA708C3337250287798567D71F829A7B33E1E8E7EC290800783
494C5EE74F40D1EE7297CCCFF7EB05ADD3F849D4A8556C09CB74B3EF07D516D5
922E0BF8B05B9236B04C0E4FA3C5F0785EB23C367ACCD3585CEB7402F2917124
AB34397B5323ADB8FAB10300F09AA59AD9E53A6BF078100DFE97250E39883E95
2844B4183CEF55513819D2C649C0D4A6BC56F31431AFD0541AED00A23BA826EC
69C2987EB1F0ADBD89D5720185846B15647ED6C5EE5714245B951AC4533D84D0
2EA2FA826A806C0D4A3F0C3CE8A5946CF07056FF8E2090E5580074E9FA79E443
6C6564C703D3ECD242B2C54ED12529D709C0289E74C90451FC90F485F119D51F
D5061B48ABED2AFCF7E3752792059D48A17051DA8BCB8368B329ED72DFFF1421
0A12F526494C4B62EC82C0C524A4C06E26872CE5FF69257E42AA6C0B08CE4B00
F3428FC5B541D8F2FA7411F371B3895AA78C6B1AA1E1462DDE51A0EADDBBC2DF
3943D11F396DAAE8503C9BF8DDD904FAF6AB019A3AAD25E74679198497F341FD
30D0AC4BFA35BD39D1CA58BBB7775EB1BBAAE6797CF285FE11E8B61E2D7426EA
B926A05281C6B7C5D540E617F24470C4A6DF9486B3CFFA93999F5BC23358169D
F4A317E76444468609DF5554D8FECB9EDF8709AD017AE68035EF3FC6F923001A
2D4AA584D9EF0D0D3FB87B3CE00CC05F6C9334A46C864A4430774B9F20668E4C
EC33739EDA87DFE4D393CB67133D2A00242755B37D4D61C2AA87090D06AA74CA
C58FFB0325915AB0F7AFE6F221DED0D9949A1E96F4F6F4AEB402279E6AF739D8
E6BB078AA70A99004BB7024DD3CE2961167317E0CB1B0FA2E6EC8BA231DE2D06
58B4F6F607C8A7A52B64DD10291FE15DEBD5C99957283FFE51583DE166EAD307
6353157A091DF41E0518A99BF5A4AADBB4670469FDEA0CEB1E16ABCE86C6EDC4
33DCC5E5E96C16BFF358E63D9F6032F887E36190ECB743AEB12B9D210919A1AD
6230A0EE0A5316F9F40C1DF7DB7B4603D36FFE88F4CC54A26CE0AE7631B5E071
D74597FA14B788EDDBC340047701A04DDD891FFA6A340788670C6554C8528E8A
4BEBBD19FAC6A3957734E05360A4FCB1BA3C73F2196C7806C06C381F7B842084
8ED38AA59A6EF0C059090FB908BCF1D8FD899BB9AF4A355FC594A3F8B9058850
A3074DDAC2A26AFDF947B9A96FCFB635D780C30D7D30FBCEF78D51D4244C80B9
3D76922DD95C3F4E7B7B2E2DC8702A0376BFBA8720CD1D6A1A26C4DA3F701404
1A956329630A3D3425440FC34D948F01EFD3C68B55C9C93474AFDFF0790F677E
947AFD7FDBAB63E602D121E834CD0FDE07F7FF450BFEF8405E2B732F3079B8A2
138E2DB585CAAA989B1C5F6665F6E73CB25E3E1577259653C198D560B25E968E
A1A3F7447DA9415C4D7DD01B15D0A65F239171FF52A6A181EADC4427DF95C3F2
C2FDAE4BB6D84C63CD876F11EBB4FD0CDA78C6673150F5488A7E6E3275C0BE66
613E30CF027EF28C59D8C6F885EA21B3DE847053FC59A5CB5799C8151E791AC6
3C78F505DE991AE96ECB6872BE7965743DF08E4877E4A44995ECE7856D644CF6
9890EF519FBD74383CC3675F4646E37C6AC20A28C8FCDA9E9B8B8CB5A389F520
EFAD4C08CD468C99D7652E919084C7D490EA535A4650B52ACF7FCC644600D5F0
284D9893D32EF23086E3B533A186F1D643755D283066F6DE77BD7DAB3EBF015F
A81AB6EDBF6AB37C37000C5AA995ADE919CBEFA5C9999F7B5A180E21B7AC271B
1F39BB29576DAD8A569A91A6D99D2D7C9F426CFE64BE0E05DD154C1CDA2C40EF
97EE8B13EFAE8EE9C023C9E3386A3E312892B18CC51B23F866555DABBE326957
B6CDF4491E783B389678BDD4EC7A5DDFB8AC2ABBB33A3F5422FC751AA4AB1244
D14877605D0597B0255A91FF7A44C49C45507BE1B5B9D56AE74D4C9132CBD3B1
526FD58516F54291575931AB3F8308382B1DA8EF2EE615A9A553CD0554E041F5
9D2D7F5889ADA2D32193DC2E11D70E2C83610148C40FB9BB937568EFFC345954
EBE8EDF429DE136CB6C4D86F992B39AFA5728B46BACA35EB9FEE265DBB59565B
2D1B67B2CF3560ECFF826FB6CD3ADF46393E062DEE962598783BA821C35734F0
150BE28F17D57CEC390C4BC974F03B7C7D2452CE3A8EECD179D8120F9E6CC54C
CE2E51B9B33381A8A917584EBDF7EED9F6198430662B11EB6520D906FC7C9E26
AF23496D8882592499420D8E90EC1726324EC6A85AABE6AD902DC40293E6C79D
D1BAD7F63ABB930D4597086750E57C8B3B534199A66A3CB87B6AA2AA2BBE0623
D16885A589F79700C63355C540F7D76E5B0744A7F3C4AAE701C1AE40C6C062A8
A106ABF1E8A5D671DA08D29972E8478238C1006F8501988486E779A149C3F2D2
61E309760F5D859D3830D08ECB7A16866A80E32CC603D3D5F4E78E9F99E97B1A
323199D3F931914E0120FDF31447C7DA308F5C5C3C76473DF783E08ADD4AA086
648F432B0CE13291132AED6F59C0FA9B11ED5A5490C89142F2B667CF75A4C82A
E77DDFD450700C917A00C16F249A0112C84419356A65557D099DCC5DF8B4777A
8303A11196EFDE49DD2B89FF5E305464DCE1A5AD67BC58421F790502994505DB
FF0BE7EC279541C1CA4E377D7779481B79CE028D52D0708B23110CB18A5BDA0D
EA8CEFD4FA6745ED04DABDB2C456AC9580D506D42A48D81F5801665D600CA609
F91E1FEE276B00EC30B9E6EB409EA9B70EC43DD5538EAF89CDAB44FE02B764F2
EF196FEAA28E016FD79FA39DC59BEDD5369308E94EAA4F0A7B1D4A6ED5560917
B2A7265C397F2036C9FC1C45E497E990FB3E7A73D7661387BD1D8150E58204E6
3D119BBFCC9B6CAC35110226282862FF8200C615E72328CDEA7D451866F79DCC
6F79C594FB53E05C2282BDE22BD71FCB6BC3F155145DD4463B83583C5BDE3B1B
91161DA7D5039517F33B7B4146F2BAB25AA73F91C02B6F18F6CAC395794B79CD
E56B558C0E74F2B9CF45046DA9C4056610E49BA9CE2DA27A30C052DEC9101373
2E027546FDA559677A3C0E43DFC5ED93F5C47C6E7DD71900E88425BDDBFB17AA
6A4B45F3584EF13FEA427985FA9FE408B7717478F4991A1EF7C2BA84A94BBCEF
44E10A46B0CCAF6CD33F16E46493B0F96F9A2CECCAA2D827EC79D6B01A923868
6BAE95DD1411AC214B92F463B8A92EE9C29B460F0AF0B6D9A793DF69D8463C41
08D9470B9A697E43B9AE9CF54D42A82172CBEE204242AB2ACC0F8FF3CD3E1052
AA14170747A7291B111CA2F8C81DD9BFBF77F42267EA1534CDE85261C506696E
0D49E0E3D3BD02689FC0893A0C3C9C26891649D4CB50F5F28207671D7934C9CB
2825B3B563D35B66CF799F53F8489BDE53DF6500287D642B5A8FDCFA2CC37644
1FD4CE17497C22EDC541D00859407CD10ABB9A367C888075068836C45F877D6D
FD5EA2937DE11BA9DBF103538CF82EAA8D3E455CF0A8EAB476C718C635F7AA01
A6AA753CBBB2F804F531AA05D35191C114CA93D7ADA2646D60FF742E8E8B2B00
DD98BEC132242E1EDB8EDE39A16A55342D3F889BB181B271DA2274B3A6B8F048
C3324CE49139D86C707FC6A4FDFD8518DABDAD7B4FD271AB4CA167446782EE6D
815E1256EAA16AFDEA78EB40D8C8BD63D847C083680B064867359EC5BC402442
89A8755A2F15DCF059C10A61F40ADB33D5347FB4F029D458ED63A861DF35C489
A123C1A47B7403C44C7F2B1F841971349A2F49386144F0214FBE3D38AD0294B5
17270033344974E8F94A11D3FAB69ACB00F8A4A028E25F02347E8E75B99EEB4D
0BEF60737AADF0F6972BB12AA5583798AFC7F93F4B4A8E89634B3E4A68CD3E8B
92A0EC946E9A7CD5E80381E192091657EF87EA886A3E35F76D248774C90451FC
90F486A67F15A5C2452E85816E4CAD51721E5B7CF904EC3858AE7B48F5C43D21
B03D83630AC3EF82A1AB770C9761265DDA395B7B7E67255A28F875E46B98F193
FBE946D8E72073EC4F4DB4AF6C1AAD50FA9A22847FE0644123ABA2DD6A639EBA
5D241ACBDCA1DDDCF200A4E2230C7BE33998818FEB6A7943A201228F3224DBFC
DA1DD9E7698279AD38991F33FD801A8313F4ED2F5475C0C6C4F8F2DD86FAFF8D
B8AA826B08457AEE3988D312B3BF0ED76D228AB453594C75D28B25558281E224
28BE30183FF7D0FB97DE5ADE503B308465748E0C722A4B1FDF712FDD780BA105
952BDFE788A6FCB3A10AF9852614175B89EB59E59E8B8113B5B51E066AA366FD
B635B6D81E2EB2FA857793BBEDB83B50CB2D5C9AE201C72F1F0795394B158899
CB03FCB945FC2405E3DC0D87D76177FFC6D11209F745DE0F5CB549A5D2A33397
2193D80797BAF208429DC38E81F3C5AA93E06EFA0F579F896BB2B4177C9745B8
66A2DB1B877D342197311EB2A3A49DB7E251DAEC7746B4C1ED95AF72FA9E81C0
CBE64633BFB8381D6BE035546513C6F24F1B0C0A3780A3539D96F220407C8FA3
477D43C5740CC3A9C4ACB14D4894C6411FBA52005011B3A0E362D2125113FBE0
E56EEA8EA9652D678359743C65D961AA51DD4C68226F264E300B94D15AAD8CF0
7A25665375E465DD11AA26F5ACCFAC6D5546F977CCE2A2642C95909A7D91C055
E82C67E77E82FDA6C7A9ECDC78166AB62EE54937CDDBD003CC2D4C70C57B6231
CDFC0E19CDC6AF6DA5F416AC9447C912D58B388EFCEFE25DFEA521F3E94F4C5A
1FFF03C8866E4224FE51C7D9588A368F2C21C839A5CF1C41FAB7DD75E6E8AFC5
7CDE1A1023F31AE3EC37BEB58073063BEEF5C6688554A184CD1E8B27C7B0C214
44CD82CF93E0285C16B61BA3A17ACA66FF49925C807A36E2DFA5CE486417BCF4
A89070AEA5650EF9374AB4EF2BA067169DA93627B4BFFD5786F47E408653CA9F
5ED3F9D8AC61F328BC047678DA8F84CBA44256E14813707CA4D7914A09C01F17
9223DDE277364AAE6C1543A27828871CED1A045C30598AE8972EC466B6EFB959
354790D7877936F5A1CEAD05E1C45CFC3D6FB905091E7179E77C9523854462AD
ABE40D7FFEA74A7EB0093FF36C008F0930B880BA0E1F52AA2AD62BA6ABA55224
3149770B85C9299613FE41C8F89AC68DE87DB4B12F0902609FE445028A8A59BD
48F17C29414AFEC335C7D6D25426F3652906AA9E2B08977D79E99FDABD524120
F8DC0B42B9CBADBC4B41D5986EB0A40B5F6D291A6D5583E6D0C269EC967551C8
A05112A3BEA5C1128AC3EEE6C213CA06EAD9BA13CCFE11CD425657CD7CB6DFF0
893A15F60737ECDD6CB5C0B4F8781E39A610504D0B6A25315100BD6B4ADFD2D9
F568AF98766CE188CF838693E66B8DC8E572C0EC9FB7C32F0DA31743047259E5
9CEA146A9B5467E0C17280CAF26E94F2B75FD330C437DFF92BD195898BC5C453
2CFDA884BED6AF2BB539FF3D8D1FF250603306506148945C602DD6ABE22B162D
A9A7BECE3475109E22C38FABCC6C99A53E14689278DB70DCB24062227368A3D4
437DAD70F48FC8693880BDC6E00A06424B1BDC854C85CB0EE4A8E1C67603250B
43DEAE700C6D34D1228FEF84D1FA3AC7EFB8006500CF80F80783EC77EAE6F2F7
D0186CCDF30250E19FF719D6C5FFC32D55B8458C47B69787E60274B7EA6FF67F
B1977AF91A8FB37E1281E365838E05B517F43B7E54FE37EEE85C388452C6F600
95D1C0655BFC9D68F36A6280DF8AD58EC7B030AABD883BDE9D9DEE2153433DC2
75F4341AFF1322BB17784A4B7D51F43240ED018F5B1D3E5D9DAD3B403091F6ED
B9815471E960FD28994BC9E48B42322217B06CBF41F4D26EEDFCE51C1F8D41DF
26845E22F4CB0FB3B0D1538B6B13BF6241784D731FA5784DEE38599DB21D1627
65BF1FE8AF1E4E777C328EACE0AB193BCBF6C5D12CB95D3DF0552F7F63440807
BD0AD280A641EEF626A126E8006DEE93515ABB899083633BC5AFEB411E6940A5
7D78A84D5681CF05E4F5B08208D142A0707EEFC084F8472D8F4F22D99256305E
F1BEE27AC91D71F621CFC27F4A03163822F7BA8148EA7FE1D7AEA283DC9322CE
CEE724380739399FA0AD809EA0ECF290F3468A06B2FF024BFD60C09FEFD6FDFA
76A5E5B19C0B8146B8F0E24128E0045A6ECB1C1AC5FAA0B746872DA79B2FA315
3617F07CACDB25B6914E2C50A63534FF9698D0A369DAAB3305C4724D95B3F43E
C29C628A3C107F4DC9B7F27903B59CB19A17F28132BF00A1A6267D57B6D84B38
AE432E26E2A4FD5A951825CBED214580A18D4968FB9D72CB416954D1B8F8E493
077B4838371BBB5489D56258D6382B7AE3314477D1A83AF7FCB128DC7AAB4961
1D7CDE28498B98A373CC812427C841989C995738A25BFF5FE5BC50B2413B676C
F9CEB4B805D5D3550225B84E3C327787C9DD5B1A5F845604DFB2F93B3ADFF008
BD50F3A725777818CD7367E7DE00CF57EC4F1A74EB93E3DAC7B96BCABA7F2572
CDFD604707A2278FCB42A0866FB450344AFEC68F32FB8773336352F58192748B
28520B76112D1D27E9251F1E48C8021052DFC7E958E434401FEB79DC69A1F104
682B7829469E2135305EE3994870ED04CEAD7FC3A82267D6A7B0EC47EAEB9502
E1734E5AF28076571896D9C0C5B3166F933FA2EA68E779B420EBCF887F5777B0
63247CE22E18AC24D416D4917E202AE5043039196238404C42EF173E0B552558
1D1A316123043CACADF6808837952F11C01A9E0738D4DB1D92A96E8A8C0FE2E2
C8D216D4D11B46DD2CDD57A48A9ED93FCE02FFAB67E3CF88911B0C7E8E3A1F35
B8A7D7C329008F2F38960F407E66B80AD280A641EEF626A126E8006DEE93515A
BB88EA90EB5364B3D81A1FD85FF07CAA429F48C3D3A47CE5DEABE40E8AE0C757
3AB23D5C7470A459D34AC9966126C8B36EA71CE0C9018969D8CB038E903F0BEE
573BDBE70DA3944051AD23625E1745AAF9DD5C986EDF4DE67869AE7246FCA44E
4F798A902C20E4E4526ACBDE6CC483930B76C97C2CAC5E8BBAE50649E595C8B0
083E986DDB49C23E65BECBC939581A69392660EF00A0A040B5D481D5F0D8FC83
BCB2EA059B409C559024F52455990D034E24DB6E0A5C04E2CD76A60E8F85B838
B6097D1F339E713B35F6193A77E9AA937D32FACAB766517605AB5756052E1597
B54239A6A0FF1D6E807F779425410DE2572606541EE74905BA3315AFDE3B874F
398DD742DFBAFB1854E2317ABB53352DBA807E1D9931233A04311775D5CAB7B1
B0B5028A6D3A83F79E07108DACFF4E920CCD15B2E39548171511B86B3F0ED321
C14AEA2794C0751F51B76C76D884D93206ECF472BC82866232DB3D0C5E589CAE
52C4F59BBE0A778C264657478652DF37F1870228A55142AEE49E316B3C94F4A8
4BE57ECE860CCA41FBC3D285A49D09166E7C998623A434949CB0FEE68A931A65
11B73433E038C83FF456B5C433692CCFA0AD87FC481D90C4C1F90B30CAEE3E7F
7F1E3684D1EDA458062AE8985B1F52C92265477203DDCE9317041A5BF89C5B67
937DB96B4D75DFBF3D574F1AA40F5CC0E23058FF4E5D5A0B58BDD2C8CC282F58
D32554063EE2A0115AFF8CE7EABA27D325DF0F6E2AC67C46A34670B8F1331F3E
B7DE4A0BF7767CEBBFC4901029A44F50B83DB69DFDCD9D5DF04F8361A25C0272
C7D475EE77071C6ED33AD65D54DEE623103D5CE3A6CF8AE542B44E814C6C8439
85070ED99A5654FB2BF0C8A53D2E6DD4E60837D90EEB0AA4E778FAFFB185D517
7C1703A7FAE9FD67C3093B594288EF02EED17F9C23C6887531EA8FB2761DDAD2
11F5C72F311578699B881FF839CF992D0E5A92A50B56D05D29B9BE14AB037971
D495F2F6054309941F60D78689111BC8E03247DA02456134AE368A7E42DD8BA9
EAFCC2F30B78E3C24CEC7467440AA78A41E4BF53857D66D89ECEB4B10FB3C175
F828438291F5EA8C05CC405D523BD8070C476CBF7369C5DA952D6D1DCB04B3EF
C25B60E410564742B637038970762E016D4C21EAC58F0CD454FACF5292FE61C4
BB1B0793670A5801D85082A10E8E04BE4075ABFD1E4BB21AE84621E7187CA44C
D7DC6F714656E45E915E595BF4AB2DDF260985A2832A86A99F4D557E59BFD726
D189A26791BB653B8665406D37C55A99E63C8FF6CA6FA4F62D79BB352112BA9F
8D10469A0C8B3D2A2F54C63A0C68E046DE2817B1DFD11A06F572EF144E7C9DD6
9C4BDE25CA06CC6C5216BA54C7A51A0CD0134BDAA3BB1C6E1B04069357CC1334
FE0A4ECC977C949631C09E8235C6FAFBFD9818F06FCFD5299FF8D39881DDD83F
7EEE66624D0A4E0CAC310D61F570C7CC65455F852BEF101B1F49E1EDE204F1F5
2E2E5ACBD7D41F762A76FFEE1739B003D94B1BAC0CAFCECA8B82F4C2D73E41FE
7FC58AB9CC1B43FC75D52AACA553C5AAACB377F723F9973DE5565D46C0697380
7E0706A78982CE085FD838271030FFBDA5FF1B233CE645188C6B529C284A885A
7B01219500BB725B7232AFE9A446A8B45815BEFF219022C0A208191890105C9E
65C85882B554851484968B51EE65DEA2B3AC7D8581DC2DA3D06072FFF216E4AF
5D6CC6B7C1EF62A75F12297241A2E8A9A3E1479AE0F7A70A791CC22ED5181838
1D81C55EF8726BC7EDE9BC97550499F01463DCD4092DC435F322F81158C15B32
00DB52AAC221CBDFF9ADA10E84DEBCB9FD598FFF7CD65B050151E29FE3A593B4
74066655175AA2BA0631DBBBB220BE21062EB4100381A28C13BF5CD699883B99
8D2D1FCE83DE11223EEAE21F9E7E9905DC69E63C1A7476039A3C898456036231
CBC42DB21212224909626531DFA3A0182951928B2B3C1DE207D08B94597050E4
38AD2E1D54E84373F5DB1AE1A8C01E29F95024FFD77556ED944F7F62BFD1C2C6
4BE65E36E69EC5051D8852FD19A4F873C0AA9CDD1918D8A0091BF812322784B8
C3FB6C1EAF2BE414925B8EDE816CCD8A5AE4FFDC0CD7C551521C763800872CA9
98FCCCD643F9EA5098313BFF1E60C22B65D0BBDCECD26D08868F5AA6C23DA155
64A76BB8573F759ED5CB0DDEF484A5F4EFD50545F2BC6F75ACEB237798EA1404
E62E3A44C465E56DA2E5D589931CEDBE8E69FD278F7C73CFCF0F1A19DE06FDEB
71BC8D177DF2F41F1F0D3DE94E405E6A27DF52029F5FCEDCEEDA1C69B6ABF6AA
C2CEDC833C0E27DE2ED4A7CD7385B577C231E920A7D44FA3DB242C872889EFF6
EBAD58ABE167B37505B8E47572229E7ABC2235D2BE77B4AF4A696C2B969F0E27
C54E9B7B0FB0576A5FCE29ACC9AD97EF5C80AED315585E67E0295F30FBA33A9B
B184A0562F2AEADA0A3A3BB6C70FE94800F61190A2A031CD7793DF8F3069E87B
DE09B5386055427235FA92E233895FBDE110186BCBF6A6ABC84D60FE4DAA1A5C
F883522FA7F3DED3865AC9DD7628FD609654D45EA425419B2B7C08FB9E239F2D
923721666A561F1616286CEB428AFE4013B097E58C1428C9740A74822FD3D0CF
EC839735B324C067AE434A2F35D3BF2A0654F6DA165A79A64E341360C97424A9
11FCAA7BD0BF658DE7EA67AF8237AB70EF7AC15F788B52294DF22346596D1C38
F535DAE65DDB4B5159C91B7221FAD126AE999C076DFC67DD1082CCA17579FEDF
AAF662EAF18C63F60C0429C97D31A71CD330FD5A0BB424992621E7C1839F2B54
8D5CB371E8001AEA346457B7983070287ACC2874FB13365F8B287D9C0380DF07
BBA322AC066CE9260B1EE8821DE36BCEE5B54E507869888C5E1BAD383050183D
65B63A684B47730F6A1DDA318AD537684EB479D13B4F1397326DD22F808133E1
FDF0D376627D7A018F4D9CBABD2FD6C391BBA85A1DECBC0953BF66E4ECA820BB
DEB0E8F4A0A37AE758960A48BCAB182A4E76973002293044FD2879C9B8C63EA5
42D3BDD08C74490BE113651DE5130DF0F3D3BC5BBC3153DCFF6354E76DA65DFB
DE51B06D765EBD19CFFD05B711B2236D7B8E449E89A37B28F3BCD126E52626D2
CDB2D973DA5685932503938041E6AA5BBFB1E6F92181F068E6C6697BEE6C33AF
9D36A8AFD0B218A69BEA283E13CF00BBE3A4D5FB9B2AB8FA8D1C56C4481B002C
F4BF42C2625FDC399BE6E1E9B91E75A843ACDDB205F09526EDC71B7B6299D7D2
F56B946C1A2FEAF0091279366EBB2DB64FC8DC55BBE2DA33E60681FC0DCA1E67
0708F23FB4A17AEDDD857BF2964F6C6BDA7667F087D5402AEECB48213136B8A2
0C94519E4AA84BE732E54AE01179933F502651C55BA261579DC2946EBE5B6B46
EAC509506F6D9866931986CB19E585AF5015D1CEB56F565B9D99DBC416239CD6
FC060D3B05157DB7D53988FA5B5656A96E648F61F33BC85D4767B119BE162868
C0B6615DAB119C10130F8CFF9FF273FAA209A562659998237ECE5606EAB1FE40
5EBB7BCD55584609C9EBF8505DF3C602ADB07C6ED6E9212A0F02159BD6D95CB8
84707BCFB22E9D0FE3AD17C64AB08E922E5CBE5EC5B0DC5CA9CB1DC6C5EE9937
C61C3B166631ACC765B3D81A1F43DE2248F2434B62E47ED21E1438A2083B58B5
6E2BF3F487272883650F864819C4CC3184D7D137228E159AA96801E8C0638DA9
BE17C86363D8A443085156943B3D78F5C95496B54752C7C069BC5F20E78FE42D
154B86C04E4FA9E7EC973021BEF7424FE751DAEC7746193ACF39FDFB077F925A
5F32E1C5269BC63857ADDA8A1A3FCF7F9792FBF5D592AD792E8D9556B1E33D1A
B5B17E801DC40BD0BC793EBA2AC84AD010EB23C96E1D06161A4C455FD07C5FFB
67AD240DE1AB5E4F8D23815E93420E86844D75C4FB9ABFA2DB64BF8305749DC2
78734F7CCC39FADD1B782FCC757D513BF748E56D9F48A56BBB8592E5FE9FFC97
B04727A32C81AC3B4DD87005B51CF2DB612FEB4F0903B7A5494D146E716338B7
774CEBB5CDABC203D0FC02085B29913193183FF3EFF2F1465F639E8B78DDC188
21AF78C5A12B0E31D719414C46A4792BAC618C9EFFB1AD02619CC21507BCA933
E883E88591D6FB28C7E06B75470603C64178055403E52C04BE23462AA6635C1E
74FBFE97EB4EE954095418393C8A029CC5DD63778F8F21F05221FE9F5F44B028
3FAC37C94DB9F531845A3995B96FC9F8000F53815FF8FC818C687A80CD7BC9C0
BF3967FB67D6F5D56DCD802AAE49CC34F7D3B1CDDC891489C92A3448C5FA0856
4C1AFA221A6756C94958CA78EFA605DBC9D1C25DBAB784E4CF847C7AFE52CAAB
47ED6C4AE8E3A0D4D2BB13A4181A16846759FA3F1FD5CD1BB044377704B43C8B
8B22B1835E62887C2D4678FED1FFFB5ACDDACBDDED74B6F8F9BDCFEA90C20C8C
3696DB38AC3B655246731E6F97873A6E9032E5FA8450EC6133949850C1F16922
AEF3717D8A821A49295842D8403B143839B52921E337551056225F7BDC81C2B6
959C0F89C399F6A5BF0EAA3E6238BB622C9A8199D00F1F9F920675E927D96818
5A4027053A4023115802277BA52C23D5DE8C3C3BBD3285E530AB2B9ACAC75870
2AF4996996A63BB66D48FAE910CF6C248F562904CCD4671666AC0D040ABB960E
A67BFE3E7BCCDEB2258D4DF1F3709DFF8C816C4FDFF1DF468D805374A741E11E
B24373C0636A2072EC1B4BEB5959F91B11BC8CACB7BC5AF0A0834D9DACD15120
20DC384BFCD94CFF422B1F22ED6436D537B2BACF13A845AA2E0A2F9E44369800
6E8B17C1504C10417381EE4F16945D34D7F2EDA51502A8F6307E364F34133D35
06E0CAB6CD5DBED0F5C31409BFFCFA1BB341B4D906F3B450F2B41FE02F0A19C6
F05D9C7E4C1E56CF9CB99E2D323726B54A6D033B03786A76EA4315C1A8962C20
99FB5074B47AC543A5EC1EF26A41AB5266452AE5842237A368F1116A023BE4FA
08BD3F5645611EDD311354EE1B0AEC8802F078507ED7116542776BF30D5605C4
1D6BE3D8E8C583ED11A54B6E118FBB4528289A963E2012CC746C5F5B70EE73C7
FCA3481C396AE6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 162 /Delta put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C19F35A3BDA17F09D2293012310B114FF0BD4D1B99A685BA61CD6E4D63D45B
C47199D41B4DE8F7C00C0F17D72EF41B22A92D559DF471E29954893E6FFE85B2
98AC23152C26ED5EDD43DAC6F23F9D3D0E28D770CA6093A1AEB5365720153023
8DBF05303D4B957B2DA2159F8EC25CB9E26D04C079FFEFD11379918708B95247
E9E48D274C2C4566841020BB7935F900E86709518E7A133B75F878084B0AA054
D2A472488B698A5701C5C909102CBA7CD5812333B254F9648A0F4C33016DAE9F
BC9D19EC7A14960514496FDE776F1A4C73BAC8A050A858127B9B71DCCAEE03E0
BB66A003687A85186CA83B34625B87D53E08A6417BFDDA19AAF3806BDC0272BD
188187ED61E72D8DEC992FA4596F4201DF5D1B5462A22CA111C970E138EF3F13
A7B70573C4356BBF79D344223C3C5FFCC2BFFEA3E1E78D794FD29324B3239D9C
6B11B2EF293012F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748070
BC9E11AE09380BC750752A6B8CBAE3CE0D07E063F36784D8E79144EDA0FF52A7
3010A1738945BA0F664F19C2BB944885AB3E1B7F2AB3177143A41626F4902BF4
6D68C5D0EA8F30C5056C0783CEFD9A1DA74C4347A1C0C6B4FE349CE0B34A0BA7
578BF125AD6329DAE47688F52328AB183CC9382CF3035845EBFAFD42AC44B40D
535DA60EA23BF76211CD865CB665507B45B50783C0B7F2B149EBC1EBB02C3340
839B74411B7B4A3385DA035E9EE81724A19ABB79794E0557D90085D8AFC0EC6F
43B313FD8B3F70DFA0A3271C6D709209D8E53BECCB5A4D2443EB3A07F9C8BF47
AD2CFB938B0ADC4336125473E7FA6FB9A3EDBB5401458A9F79AC191B8E09FC38
6D4FCE408B0D851D898AB9A7EC2C36181DC56F9B0188798F80A5F2E2E240900C
2AC7BDEF8FB9D4574698BC8D4E374B322A5AA48B228CF68EE0032B1968EB8811
9A375D4FBBDAE0C84509C5E1537974E0CAF7DAEC080E933813CC9E0BBF9C71C9
46EB77ED556CD01675A5D45FC8BD0647A724AF9C66AE82CB864AB947E3582308
319FF3BA8D533BC804C1C8059928ABE24544F41569DAEB22B54DCD2A5D1CE3C5
DCF36A5C431C4FEE372219E708FD90F346F585A48F89006ADDE2E437DCADA997
D6EEDB6D146BA0468D5C5AEDBFD0B89ACB6D7CA66947E5402ACDA287DD0CA50D
820C2B37B06923F120D56A0C6FB6BD37D5F0F0981C1346403A7633361F78409D
4B2CBC7735D8AD96087DF02E549D236CE935BD070836251EAD33E292DFF730F8
F55224019393FE1BC88FB50A40296F42C66773B7ABB7913A4169BB5687CD90DC
412220BD4E61021A8F4D4C090D57045016268851E757695C37C73977A43DD936
87F24F9DD88D870BEED376C2A26857286884CCD1F8A12459FB8922D0771C696E
31F03CEB45C135D2108700287C02BB0174549267373C68D43F0DA94BC2C210E1
8E85658F9A7D6132B66744D6B0D0CDAD898E3EE9A22626FE8A16138DDE22FF80
69B6FA8706DB71E3B13933B2EF21551B4613E003DAF710C718899F45FD2A9E48
F749181BD07DB3E467D35F3E74E5D2B18ADB8BA12EC213EAC748E5DDB7157909
0D6D741BF12934280E3A2420841377163DCF52E162E06FAE45EB5B97BE1D450D
DBD40E120DCADA6E3F142FEE3137D6C90FD68C1166F6D1434CD6FA95DAF07AEC
964548B9FAC49842B1046857521BC52C3998849490668ECAA0578E5615E8D4FF
16ECB6F6205143626D0B3851753139A57080AE26714476D964347EB156D2DFE4
488ED32E32F4CEC7D4B0661B0AF16ED99D64D521A0D6A2590B7DF21DFD83332E
BF4142DA63E49752F5646F9821150A823DFE1794E40D81C9FD21F72FE32A27B4
9BD024D0462291FEAA6E2C23DFE0B9E45913EC2E093CA021E2B92130C167FE60
1E67A820FBF9E84293F9BE7CDF54A9B675E3074E81BB15DE358E5BC93755E8EC
ED87E888DAFD9395B43CA8FF36CB711DB94E2D59783FDF45E87ABC0BA26CF446
0951054BB4073F3253066BB6F629D90840E4BA424DDF75D76204167F515DFFB6
265D223065B4BFA69A208CFB9F3AE658685F693AA46DF846C93A2B744B1AD349
06B2E5967A12889DF3F5DABE78428082D83D4E76F26A279536E725242B88BCFD
36B80B5EFC68AB7D702DE8427A5F1CABEB7133D687128709241FDCAB8EA50C6A
AE31DFC6C787D2C38972561C9CACCE4B784C2C36EF0D9B028B11961D4550AABA
E725B13E75FD9A11FD55E9E3A178B1BBC0847E7570BFE9AD8DEB26A173C57C9C
A89530547B3201FA23408179013C741B1387A09300D54150B02BEF256EE8F916
4210C230F9E51D8652BD0F999AA1ED7FB1DACBF7D68735F709450D093259CFC3
CB0CEC7A591CA80B0559EAA5D2080CE6833E957CE90B7366DBFE635DE69630D4
109705D34624DC7BFB2A15BCAA73641FAE05D500172C55D7B6DD0AAE359C6C76
2653158E10FE9E687CA74AAB955BDAB93CC8CC57A22AE85EA31AA554B99AEFC9
C9C1ABB921C856C5B7117960FF8AEE279E36F2EB4D756870E8215624AE4194F9
ABD240977893CFF8412D9CC26FB09D3C2BEE06A2F52936C07880F8DDCB832646
094B2725A5F23AFECC9A03DE56818CAE682FB499ED8C988EC646891704FE95C9
CD3941F54A5F144583E8BBBD0B4C67E8A093FA560087B8E59B6A5595B5BF68F8
F35E6A3AFC09B3BCD519CBE52B95C183844514E831A38FDA42889D3627012B90
E41EBD57D647136E578BB554DDE84A45233A6DE4A7638F9E2A1572B1D5EFC0A8
CC71EB9B8F8B5370DD4059E736D1BDC2D0A5CAF2536E8AEF30742A52B430C5B0
BBBC4285E0B33B1039B03E6DED2DC26C8D166EDF2D6A208E51C3665C5B36F4BC
F0FA05C6A1E7B0B93E978B77CFE3AB5A238733925011D04AFD3410444B3FD321
08E74CC0956DFC0E8A38B3986818C08A288AD9108B26CAF9D23D5696E4D978BB
E81B9A2866BA0BD21E2B6C998908E32618ED2826802FFE09001301D083AC734C
753C1B2643F37EBBD7D2C2454711F398C76490B986F2952638938207600C8781
71496F88B855393288045353D196FB90E01B875A723B969788C10D813814FE97
46A78D41464E13D3CED1731583268E7AEFA0FDE8795DBB0A4925EE670B422711
BB8E9A93C2B14E05C1389DAAC1AFAE2F184C37226F11FE4F01410B42D572CF62
24CC9E34AF0E3A4043D56275868EF49884980097DD550FEBBF80FC9FCE2D5865
E2192CC3D432740D52ABD76F56D0304F0163416126F1D79E965156925FF99EE7
389EA5A204B990948A3AB783E2D6F3FC2F012A9D296AD06EF1EB70E5BDD960F6
1647461755258DD02362AEF1ED536B2979E72B261D6EDF18122DF81E1966F627
D4F010EB30EBC9D75C0D30D068C6DB61567515B05ACCE426C8FCD487E786521C
0208E9D882C23F9650CEDCB2E460B2B2CE1CD4CA17134A0ABD68BE1502696A22
6EE822D0A41C151E29E148874E95D79F32FEACC4273E58B358A4C0666E56183A
5FD5174AEAECCD2CBEEC6BD1F5019642B9F9A720C0E9D6E13716536E62DE7C42
03B7A8D9C2EAEC62530C97F6AC5EDFF086F1E4760A94E07266072E014F874914
8936050BDE5199E005BC25ECC5B38668F374A1945B54B14E1278CEC1303EA2AD
0F0F31402A555D65707DBF436F0E21B97C224BDF62807B9E5DBD8DDA2C5AD0A3
09341B5CF7D5F2F1B9EB74FDFDFEE9E4004A25EC7A2B917E2FFAB689A0ADC6A5
732C126A179AE5E8B5B5286F94351D3879381258F68B1242A15B4FF127311598
821B4ACC03A2ACCDE33B35400FB0C0E34EA9DD97CCE1D664C8A3BA1162032DF0
C96981BCBEFE4630EB4502C187261CA8D601223632EFFD3C1E84B8580D437AB2
C4AB38A18D2FAB1FF98C5FC6978AED53EEABC4B29F059377B5FD745A6B6DC34A
1F11789B93FD5994C56AE96A176E7A549A46629DE71547684664261BCC80CF7E
4B9B6AFF43E2A9133FB7DC48B9EB41F8EFD6DE3A1B5278FB178BE5B756498FF4
E71438AE8041DD5F2EA3E84C4021B1D1DDF613C8B8CC9D2824365A2797375298
74A400FAB70BBDF244F4075319A61C313D189787F5721592A99E9C34EA66C5C5
562E5E06219E9694468EC82DC7B742A3F70A4D7988D10740758A1C9E6A49017A
8C1D6ED62128F7723B9BB3F555EAE848442658909CEF0D9CE06468F9A7151119
EE7B6BC98B572A0C8253BEB0AFEAE21B366ED7B99EA673A0D9E68FDA83FA0123
7F37B0EB0C5BA8DA39F4CEA70587D35D35DC2036867BB690FED72F2E6219A58D
3DB2AE67C43A4C38B5F9A3B04FC6C2C9B42C21A574FA5DFB87B45FBD5DBF5446
5D6B645DAD92E0E689E98755883DD77C6CD0CE2B7698EB50A30A94F6F638BC4A
22704B1055F1637266F5A7521C898690CDA65FF54B2F663A733BE0C2B2AEDB30
B97EBB07FED9FC46C4C706AAF3338CF7F5F22102392436BB2B796BD4343C367E
0C82D1F06B99DEA5C2D134738A95B80197B95FD006E82EF3A146809590B1F385
571EBB4177FFF70C0DAE3FC0A3E963C6B1110F819201BAE5B2C37F226EA0A9CD
65992A8760535FE734D28268CC88DFD3698302E8251279A7CDCC52504D54A1B9
D39387494E7A0C83FFE1D7B6CF26790F9E095C04B4F64A85B7F95AEF536689E7
8FFBB3D5478E3D2DEC74FDC8FF7D1089084A6055C85D2C209FC74EF52034A1A3
1081FC44A0094CE0ED4720C664D3C4697C83BC38653448FF0B1BE99B74E50890
D660EA427BB7F0946D622827883F544213420DA690917984B561B10EBDE1F316
A2C88C1FF2C7CC214557C246310FB69DD96259225A24C2C0A48FB081FA908C79
DDA9DDDCFF95CAC3C4FBF2738CC8EBE81CB3E74FE90FE98D0B2BBB3E0FC8F6B0
CDA5926C41E0CB066B3820F0217B617C72331583E0656CDFBD5968B6B59313D8
EAE7F7ABF30F051A316B09814CF895B6FFA0FCBA4EF3F4E3C828DCE28E98E7C7
D0A5062F2D6A88878A397F53173D132C5B4B6C3168E3A3C54DDE1982A8A5A112
BC798A2052481A6828CC7656D8753AADBB6BB769FC74BE362A7143B7231A4F64
DEB9CAC69C99D4445D9E3691345C7FBBBD0EBE7FCB4DD44FF9E26B8D99B9829F
3F9D8BF1A04A138D9C9C454D0C86D722C00CCF823673347FADF51A9256673294
EC960BA3235BC1E82E4BD54018A75B843AEC3BB1B907CB9D64D02979892F2C39
9336C43F46421CAF2044D61891EEFA8829ABE46DFC09E1477F12B46E91C32623
C3ADB36D095D679977
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(cours_trinomes-du-second-degre.dvi)
@start /Fa 193[65 62[{}1 83.022 /MSAM10 rf /Fb 136[47
1[37 21 27 24 1[37 35 38 56 3[18 37 32 19 31 37 30 1[32
38[16 10[28 16 24 45[{ TeXBase1Encoding ReEncodeFont }21
61.1042 /Utopia-Regular rf /Fc 94[42 161[{}1 58.049
/Fourier-Math-Symbols rf /Fd 145[36 4[18 2[18 102[{
 TeXBase1Encoding ReEncodeFont }3 58.049 /Utopia-Italic
rf /Fe 204[31 31 31 31 48[{ TeXBase1Encoding ReEncodeFont }4
58.049 /Utopia-Regular rf /Fg 55[55 55 55 55 18[38 14[55
1[55 48[64 20[55 36[0 3[45 78 49[{}12 76.3802 /Fourier-Math-Symbols
rf /Fh 173[51 82[{}1 76.3801 /Fourier-Math-BlackBoard
rf /Fi 11[45 10[40 111[40 40 2[48 28 34 34 46 47 45 49
72 24 2[24 1[41 26 40 46 38 46 42 13[43 24[21 16[28 28
19 36[49 2[{ TeXBase1Encoding ReEncodeFont }28 76.3802
/Utopia-Bold rf /Fj 135[39 9[47 70 6[24 2[34 43 43 15[58
47 12[50 67[{ TeXBase1Encoding ReEncodeFont }10 76.3802
/Utopia-Italic rf /Fk 93[54 162[{}1 76.3802 /Fourier-Math-Letters
rf /Fl 80[50 53 174[{}2 76.3802 /Fourier-Math-Letters-Italic
rf /Fm 43[51 10[44 44 110[44 44 2[47 40 44 47 51 44 51
47 54 36 2[18 47 51 40 44 47 47 1[44 23[22 22 15 39[{
 TeXBase1Encoding ReEncodeFont }26 65.3798 /NimbusSanL-Regu
rf /Fn 43[68 10[58 111[58 3[63 53 58 63 1[58 68 63 73
48 2[24 1[68 53 58 63 63 16[48 48 2[24 46[{
 TeXBase1Encoding ReEncodeFont }21 87.1731 /NimbusSanL-Regu
rf /Fo 43[81 10[70 111[70 3[76 64 70 76 81 70 81 76 87
58 2[29 1[81 1[70 76 76 1[70 65[{ TeXBase1Encoding ReEncodeFont }19
104.608 /NimbusSanL-Regu rf /Fp 6[46 4[44 9[39 39 39
38 6[40 36[34 15[34 48[37 39 37 1[38 46 26 33 30 45 46
44 47 70 21 1[21 22 46 40 24 39 46 38 46 40 3[25 1[25
5[60 47 41 2[46 58 2[43 2[27 3[46 60 52 7[20 20 40 2[40
40 40 40 40 40 40 1[20 30 20 44 1[27 27 21 4[35 31[47
2[{ TeXBase1Encoding ReEncodeFont }64 76.3802 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author (Didier BONNEL - https://www.maths-cours.fr)/Keywords
() /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 100 -136 a Black 0 TeXcolorgray 109 79 a Fp(P)n(olyn\364mes)18
b(et)g(\351quations)g(du)g(second)f(degr\351)2092 b(1)p
109 110 3544 2 v Black 0 TeXcolorgray 109 316 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 109 316
a 109 316 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109 316 a 109 316 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 109 316 a 109 316 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109
316 a 109 316 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 109 316 a 109 316 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 109 316 a 109 316
a
SDict begin H.S end
 109 316 a 109 316 a
SDict begin 12 H.A end
 109 316 a 109 316 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 109 316 a 98
x Fo(POL)-15 b(YN\324MES)29 b(ET)g(\311Q)o(U)l(A)-13
b(TIONS)28 b(DU)g(SECOND)g(DEGR\311)p 0.4902 0.76077 0.27452
TeXcolorrgb 109 447 3544 4 v 0 TeXcolorgray 109 741 a
Fn(1.)d(FONCTIONS)f(POL)-12 b(YN\324MES)p 0.86276 0.86276 0.86276
TeXcolorrgb 109 770 V 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 1769 3539
785 v 1 TeXcolorgray 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 347 1164 a Fm(D\311FINITION)p 0 TeXcolorgray
347 1302 a Fp(U)m(ne)24 b(fonction)h Fj(P)31 b Fp(est)24
b(une)g Fi(fonction)d(polyn\364me)h Fp(si)i(elle)g(est)g(d\351\002nie)g
(sur)f Fh(R)g Fp(et)h(si)f(on)h(peut)g(l)o('\351cr)q(ir)o(e)347
1401 y(sous)18 b(la)g(for)q(me)g(:)p 0 TeXcolorgray 0
TeXcolorgray 1219 1638 a Fj(P)1282 1639 y Fp(\()1311
1638 y Fj(x)1355 1639 y Fp(\))1396 1638 y Fg(\306)e Fj(a)1512
1650 y Fd(n)1557 1638 y Fj(x)1601 1604 y Fd(n)1655 1638
y Fg(\305)c Fj(a)1767 1650 y Fd(n)s Fc(\241)p Fe(1)1885
1638 y Fj(x)1929 1604 y Fd(n)s Fc(\241)p Fe(1)2055 1638
y Fg(\305)e Fp(...)g Fg(\305)i Fj(a)2302 1650 y Fe(1)2340
1638 y Fj(x)j Fg(\305)d Fj(a)2506 1650 y Fe(0)p 1 TeXcolorgray
0.20392 0.59608 0.85883 TeXcolorrgb 109 985 3544 3 v
109 1771 3 788 v 3650 1771 V 109 1772 3544 3 v 0 TeXcolorgray
0.4902 0.76077 0.27452 TeXcolorrgb 109 1998 a Fm(REMARQ)o(UES)p
0 TeXcolorgray 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 237 2198 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
41 w Fp(par)17 b(abus)h(de)f(langage)o(,)g(on)h(dit)f(souvent)i
(polyn\364me)f(au)g(lieu)g(de)f(fonction)i(polyn\364me)o(.)p
0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 237
2317 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41 w Fp(les)f(nombr)o
(es)i Fj(a)800 2330 y Fd(i)846 2317 y Fp(s)m('appellent)h(les)d
Fi(coef\002cients)d Fp(du)i(polyn\364me)o(.)p 0.20392 0.59608 0.85883
TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 3076 3539
582 v 1 TeXcolorgray 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 347 2674 a Fm(D\311FINITION)i(\(DEGR\311)e(D'UN)i(POL)-9
b(YN\324ME\))p 0 TeXcolorgray 347 2840 a Fp(S)o(i)16
b Fj(P)488 2841 y Fp(\()517 2840 y Fj(x)561 2841 y Fp(\))602
2840 y Fg(\306)h Fj(a)719 2852 y Fd(n)764 2840 y Fj(x)808
2806 y Fd(n)858 2840 y Fg(\305)9 b Fj(a)967 2852 y Fd(n)s
Fc(\241)p Fe(1)1085 2840 y Fj(x)1129 2806 y Fd(n)s Fc(\241)p
Fe(1)1252 2840 y Fg(\305)e Fp(...)g Fg(\305)i Fj(a)1490
2852 y Fe(1)1527 2840 y Fj(x)j Fg(\305)d Fj(a)1687 2852
y Fe(0)1737 2840 y Fp(\(o\371)16 b(le)h(coef\002cient)h
Fj(a)2374 2852 y Fd(n)2433 2840 y Fp(est)f(non)f(nul\),)h(on)f(dit)g
(que)h Fj(P)24 b Fp(est)347 2939 y(une)18 b(fonction)h(polyn\364me)g
(de)e Fi(degr\351)f Fj(n)t Fp(.)p 1 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 109 2494 3544 3 v 109 3078 3 585 v 3650 3078
V 109 3079 3544 3 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb
109 3305 a Fm(CAS)h(P)-8 b(AR)n(TICULIERS)p 0 TeXcolorgray
0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 237
3505 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41 w Fp(la)18
b(fonction)g(nulle)h(n)-6 b('a)17 b(pas)h(de)f(degr\351.)p
0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 237
3624 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41 w Fp(une)23
b(fonction)f(constante)h(non)f(nulle)h(d\351\002nie)f(par)29
b Fj(f)1963 3625 y Fp(\()1992 3624 y Fj(x)2036 3625 y
Fp(\))2082 3624 y Fg(\306)20 b Fj(a)25 b Fp(avec)f Fj(a)e
Fg(6\306)d Fp(0)j(est)g(une)g(fonction)h(polyn\364me)g(de)316
3724 y(degr\351)17 b(0.)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 237 3843 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
41 w Fp(une)h(fonction)h(af\002ne)25 b Fj(f)1050 3844
y Fp(\()1079 3843 y Fj(x)1123 3844 y Fp(\))1164 3843
y Fg(\306)17 b Fj(a)6 b(x)15 b Fg(\305)10 b Fj(b)21 b
Fp(avec)e Fj(a)f Fg(6\306)d Fp(0)i(est)h(une)g(fonction)h(polyn\364me)g
(de)e(degr\351)g(1.)p 0.4902 0.76077 0.27452 TeXcolorrgb
1 TeXcolorgray 1 TeXcolorgray 111 4574 3539 554 v 1 TeXcolorgray
0 TeXcolorgray 0.4902 0.76077 0.27452 TeXcolorrgb 347
4200 a Fm(PR)o(OPRI\311T\311)p 0 TeXcolorgray 347 4337
a Fp(Le)22 b(produit)g(d)n('un)g(polyn\364me)h(de)e(degr\351)g
Fj(n)k Fp(par)d(un)g(polyn\364me)g(de)g(degr\351)f Fj(m)k
Fp(est)d(un)g(polyn\364me)g(de)347 4437 y(degr\351)17
b Fj(m)d Fg(\305)c Fj(n)t Fp(.)p 1 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 109 4020 3544 3 v 109 4575 3 556 v 3650 4575
V 109 4576 3544 3 v 0 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 109 4802 a Fm(REMARQ)o(UE)p 0 TeXcolorgray
109 4972 a Fp(Il)16 b(n)-6 b('existe)19 b(pas)f(de)f(for)q(mule)h
(donnant)g(le)g(degr\351)f(d)n('une)h(somme)h(de)e(polyn\364me)o(.)h
(On)f(peut)i(tout)f(au)f(plus)i(dir)o(e)d(que)i(le)109
5072 y(degr\351)e(de)i Fj(P)g Fg(\305)8 b Fj(Q)22 b Fp(est)c(inf\351r)q
(ieur)g(ou)g(\351gal)f(\340)g(la)h(fois)g(au)f(degr\351)g(de)g
Fj(P)26 b Fp(et)17 b(au)h(degr\351)f(de)e Fj(Q)6 b Fp(.)p
0.4902 0.76077 0.27452 TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray
111 5773 3539 554 v 1 TeXcolorgray 0 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 347 5399 a Fm(PR)o(OPRI\311T\311)p 0 TeXcolorgray
347 5536 a Fp(Deux)19 b(polyn\364mes)h(sont)f(\351gaux)g(si)g(et)g
(seulement)j(si)d(les)g(coef\002cients)h(des)f(ter)q(mes)g(de)g
(m\352me)h(degr\351)347 5636 y(sont)e(\351gaux.)p 1 TeXcolorgray
0.4902 0.76077 0.27452 TeXcolorrgb 109 5220 3544 3 v
109 5774 3 556 v 3650 5774 V 109 5775 3544 3 v 0 TeXcolorgray
0 TeXcolorgray 109 5980 3544 2 v OliveGreen 109 6095
a
SDict begin H.S end
 109 6095 a OliveGreen 0 TeXcolorgray -15 x Fb(https://www)-5
b(.maths-cours)o(.fr/cours/trinomes-du-second-degr)o(e/)p
OliveGreen OliveGreen 1869 6034 a
SDict begin H.R end
 1869 6034 a 1869 6080
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/trinomes-du-second-degre/)>>/Subtype
/Link H.B /ANN pdfmark end
 1869 6080 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fp(P)n(olyn\364mes)
18 b(et)g(\351quations)g(du)g(second)f(degr\351)2092
b(2)p 109 110 3544 2 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb
109 399 a Fm(CAS)17 b(P)-8 b(AR)n(TICULIER)p 0 TeXcolorgray
109 570 a Fj(P)25 b Fp(est)18 b(le)g(polyn\364me)h(nul)f(si)f(et)h
(seulement)i(si)e(tous)g(ses)g(coef\002cients)g(sont)g(nuls)o(.)p
0.20392 0.59608 0.85883 TeXcolorrgb 1 TeXcolorgray 1
TeXcolorgray 111 1171 3539 454 v 1 TeXcolorgray 0 TeXcolorgray
0.20392 0.59608 0.85883 TeXcolorrgb 347 897 a Fm(D\311FINITION)p
0 TeXcolorgray 347 1034 a Fp(On)f(dit)h(que)i Fj(a)e
Fg(2)c Fh(R)j Fp(est)h(une)g(r)o(acine)g(du)f(polyn\364me)i
Fj(P)25 b Fp(si)18 b(et)f(seulement)j(si)e Fj(P)2639
1035 y Fp(\()2668 1034 y Fj(a)2715 1035 y Fp(\))2756
1034 y Fg(\306)c Fp(0.)p 1 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 109 717 3544 3 v 109 1172 3 457 v 3650 1172
V 109 1173 3544 3 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb
109 1399 a Fm(EXEMPLE)p 0 TeXcolorgray 109 1570 a Fp(1)j(est)h(r)o
(acine)g(du)f(polyn\364me)i Fj(P)1056 1571 y Fp(\()1085
1570 y Fj(x)1129 1571 y Fp(\))1170 1570 y Fg(\306)e Fj(x)1286
1536 y Fe(3)1331 1570 y Fg(\241)10 b Fp(2)r Fj(x)15 b
Fg(\305)10 b Fp(1)19 b(car)e Fj(P)1804 1571 y Fp(\()1831
1570 y(1)1871 1571 y(\))1912 1570 y Fg(\306)d Fp(0)p
1 0 0 TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 2745
3539 1028 v 1 TeXcolorgray 0 TeXcolorgray 1 0 0 TeXcolorrgb
347 1897 a Fm(TH\311OR\310ME)p 0 TeXcolorgray 347 2034
a Fp(S)o(i)23 b Fj(P)31 b Fp(est)24 b(un)f(polyn\364me)i(de)e(degr\351)
f Fj(n)i Fa(>)c Fp(1)j(et)h(si)h Fj(a)i Fp(est)c(une)h(r)o(acine)g(de)e
Fj(P)31 b Fp(alors)24 b Fj(P)2861 2035 y Fp(\()2890 2034
y Fj(x)2934 2035 y Fp(\))2984 2034 y(peut)g(s)m('\351cr)q(ir)o(e)347
2134 y(sous)18 b(la)g(for)q(me)g(:)p 0 TeXcolorgray 0
TeXcolorgray 1557 2371 a Fj(P)1620 2372 y Fp(\()1649
2371 y Fj(x)1693 2372 y Fp(\))1734 2371 y Fg(\306)1803
2372 y Fp(\()1832 2371 y Fj(x)d Fg(\241)d Fj(a)2000 2372
y Fp(\))2033 2371 y Fj(Q)2105 2372 y Fp(\()2133 2371
y Fj(x)2177 2372 y Fp(\))347 2608 y(o\371)k Fj(Q)22 b
Fp(est)c(un)g(polyn\364me)g(de)g(degr\351)e Fj(n)e Fg(\241)c
Fp(1.)p 1 TeXcolorgray 1 0 0 TeXcolorrgb 109 1717 3544
3 v 109 2746 3 1030 v 3650 2746 V 109 2747 3544 3 v 0
TeXcolorgray 109 3115 a Fn(2.)25 b(FONCTIONS)f(POL)-12
b(YN\324MES)24 b(DU)h(SECOND)f(DEGR\311)p 0.86276 0.86276 0.86276
TeXcolorrgb 109 3143 3544 4 v 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 4378 3539
1020 v 1 TeXcolorgray 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 347 3538 a Fm(D\311FINITION)p 0 TeXcolorgray
347 3675 a Fp(On)19 b(appelle)i Fi(polyn\364me)16 b(\(ou)h(tr)q
(in\364me\))f(du)i(second)e(degr\351)i Fp(toute)h(expr)o(ession)h
(pouvant)g(se)g(mettr)o(e)347 3775 y(sous)e(la)g(for)q(me)g(:)p
0 TeXcolorgray 0 TeXcolorgray 1550 4012 a Fj(P)1613 4013
y Fp(\()1642 4012 y Fj(x)1686 4013 y Fp(\))1728 4012
y Fg(\306)e Fj(a)6 b(x)1892 3978 y Fe(2)1937 4012 y Fg(\305)k
Fj(b)c(x)15 b Fg(\305)10 b Fj(c)347 4249 y Fp(o\371)20
b Fj(a)t Fp(,)d Fj(b)k Fp(et)d Fj(c)23 b Fp(sont)18 b(des)f(r\351els)h
(avec)i Fj(a)e Fg(6\306)c Fp(0.)p 1 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 109 3358 3544 3 v 109 4379 3 1022 v 3650
4379 V 109 4380 3544 3 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb
109 4606 a Fm(EXEMPLES)p 0 TeXcolorgray 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 237 4821 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 41 w Fj(P)379 4822 y Fp(\()408
4821 y Fj(x)452 4822 y Fp(\))494 4821 y Fg(\306)g Fp(2)r
Fj(x)649 4786 y Fe(2)695 4821 y Fg(\305)c Fp(3)r Fj(x)15
b Fg(\241)10 b Fp(5)19 b(est)f(un)f(polyn\364me)i(du)e(second)h
(degr\351.)p 0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb
237 4949 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41
w Fj(P)379 4950 y Fp(\()408 4949 y Fj(x)452 4950 y Fp(\))494
4949 y Fg(\306)f Fj(x)610 4915 y Fe(2)656 4949 y Fg(\241)10
b Fp(1)19 b(est)f(un)h(polyn\364me)g(du)f(second)h(degr\351)e(avec)h
Fj(b)h Fg(\306)c Fp(0)j(mais)f Fj(Q)2581 4950 y Fp(\()2609
4949 y Fj(x)2653 4950 y Fp(\))2695 4949 y Fg(\306)g Fj(x)e
Fg(\241)10 b Fp(1)19 b(n)-6 b('en)19 b(est)g(pas)f(un)h(car)g
Fj(a)316 5049 y Fp(n)-6 b('est)19 b(pas)e(diff\351r)o(ent)h(de)f
(z\351ro)g(\(c)n('est)h(un)f(polyn\364me)i(du)e(pr)o(emier)h(degr\351)f
(-)g(ou)h(une)g(fonction)g(af\002ne\).)p 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 237 5178 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 41 w Fj(P)379 5179 y Fp(\()408
5178 y Fj(x)452 5179 y Fp(\))497 5178 y Fg(\306)f Fp(5)617
5179 y(\()647 5178 y Fj(x)e Fg(\241)10 b Fp(1)806 5179
y(\))f(\()869 5178 y(3)h Fg(\241)g Fp(2)r Fj(x)1070 5179
y Fp(\))1119 5178 y(est)21 b(un)g(polyn\364me)h(du)f(second)g(degr\351)
f(car)g(en)h(d\351veloppant)i(on)e(obtient)g(une)h(ex-)316
5277 y(pr)o(ession)c(du)g(type)f(souhait\351.)p 0 TeXcolorgray
109 5980 3544 2 v OliveGreen 109 6095 a
SDict begin H.S end
 109 6095 a OliveGreen
0 TeXcolorgray -15 x Fb(https://www)-5 b(.maths-cours)o
(.fr/cours/trinomes-du-second-degr)o(e/)p OliveGreen
OliveGreen 1869 6034 a
SDict begin H.R end
 1869 6034 a 1869 6080 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/trinomes-du-second-degre/)>>/Subtype
/Link H.B /ANN pdfmark end
 1869 6080
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fp(P)n(olyn\364mes)
18 b(et)g(\351quations)g(du)g(second)f(degr\351)2092
b(3)p 109 110 3544 2 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
1 TeXcolorgray 1 TeXcolorgray 111 1497 3539 1179 v 1
TeXcolorgray 0 TeXcolorgray 1 0 0 TeXcolorrgb 347 498
a Fm(TH\311OR\310ME)18 b(ET)g(D\311FINITION)p 0 TeXcolorgray
347 652 a Fp(T)-8 b(out)19 b(polyn\364me)g(du)e(second)g(degr\351)g
Fj(P)1537 653 y Fp(\()1566 652 y Fj(x)1610 653 y Fp(\))1652
652 y Fg(\306)f Fj(a)6 b(x)1816 617 y Fe(2)1861 652 y
Fg(\305)k Fj(b)c(x)15 b Fg(\305)10 b Fj(c)23 b Fp(peut)c(s)m('\351cr)q
(ir)o(e)e(sous)h(la)f(for)q(me)h(:)p 0 TeXcolorgray 0
TeXcolorgray 1534 888 a Fj(P)1597 889 y Fp(\()1626 888
y Fj(x)1670 889 y Fp(\))1712 888 y Fg(\306)e Fj(a)1838
889 y Fp(\()1866 888 y Fj(x)f Fg(\241)10 b Fl(\256)2038
889 y Fp(\))2066 854 y Fe(2)2111 888 y Fg(\305)g Fl(\257)347
1166 y Fp(avec)18 b Fl(\256)c Fg(\306)g(\241)743 1110
y Fj(b)p 721 1147 90 5 v 721 1223 a Fp(2)r Fj(a)838 1166
y Fp(et)j Fl(\257)e Fg(\306)f Fj(P)1117 1167 y Fp(\()1144
1166 y Fl(\256)1197 1167 y Fp(\))1224 1166 y(.)347 1360
y(C)o(ette)19 b(expr)o(ession)f(s)m('appelle)i Fi(for)q(me)15
b(canonique)g Fp(du)i(polyn\364me)i Fj(P)8 b Fp(.)p 1
TeXcolorgray 1 0 0 TeXcolorrgb 109 319 3544 3 v 109 1498
3 1181 v 3650 1498 V 109 1499 3544 3 v 0 TeXcolorgray
0.20392 0.59608 0.85883 TeXcolorrgb 1 TeXcolorgray 1
TeXcolorgray 111 2152 3539 469 v 1 TeXcolorgray 0 TeXcolorgray
0.20392 0.59608 0.85883 TeXcolorrgb 347 1863 a Fm(D\311FINITION)p
0 TeXcolorgray 347 2017 a Fp(Le)18 b(nombr)o(e)f Fk(\242)e
Fg(\306)f Fj(b)924 1982 y Fe(2)969 2017 y Fg(\241)c Fp(4)r
Fj(a)t(c)23 b Fp(s)m('appelle)d(le)e Fi(discr)q(iminant)e
Fp(du)h(tr)q(in\364me)j Fj(a)6 b(x)2563 1982 y Fe(2)2609
2017 y Fg(\305)k Fj(b)c(x)15 b Fg(\305)10 b Fj(c)5 b
Fp(.)p 1 TeXcolorgray 0.20392 0.59608 0.85883 TeXcolorrgb
109 1684 3544 3 v 109 2153 3 471 v 3650 2153 V 109 2154
3544 3 v 0 TeXcolorgray 0.4902 0.76077 0.27452 TeXcolorrgb
1 TeXcolorgray 1 TeXcolorgray 111 3376 3539 1038 v 1
TeXcolorgray 0 TeXcolorgray 0.4902 0.76077 0.27452 TeXcolorrgb
347 2518 a Fm(PR)o(OPRI\311T\311)17 b(\(RA)n(CINES)h(D'UN)g(POL)-9
b(YN\324ME)17 b(DU)i(SECOND)f(DEGR\311\))p 0 TeXcolorgray
347 2684 a Fp(L)-10 b('\351quation)22 b Fj(a)6 b(x)825
2650 y Fe(2)870 2684 y Fg(\305)k Fj(b)c(x)15 b Fg(\305)10
b Fj(c)20 b Fg(\306)15 b Fp(0)i(:)p 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 475 2813 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 42 w Fp(n)-6 b('a)17 b(aucune)h(solution)
h(r\351elle)g(si)f Fk(\242)c Fg(\307)g Fp(0)9 b(;)p 0
TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 475 2974
a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 42 w Fp(a)17
b(une)h(solution)h(unique)i Fj(x)1371 2986 y Fe(0)1420
2974 y Fg(\306)15 b Fl(\256)f Fg(\306)g(\241)1713 2918
y Fj(b)p 1691 2955 90 5 v 1691 3031 a Fp(2)r Fj(a)1808
2974 y Fp(si)k Fk(\242)c Fg(\306)g Fp(0)9 b(;)p 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 475 3201 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 42 w Fp(a)17 b(deux)g(solutions)22
b Fj(x)1176 3213 y Fe(1)1226 3201 y Fg(\306)1305 3144
y(\241)p Fj(b)14 b Fg(\305)1482 3078 y(p)p 1545 3078
55 5 v 1545 3144 a Fk(\242)p 1305 3181 296 5 v 1408 3258
a Fp(2)r Fj(a)1627 3201 y Fp(et)20 b Fj(x)1753 3213 y
Fe(2)1802 3201 y Fg(\306)1881 3144 y(\241)p Fj(b)14 b
Fg(\241)2058 3078 y(p)p 2122 3078 55 5 v 66 x Fk(\242)p
1881 3181 296 5 v 1984 3258 a Fp(2)r Fj(a)2204 3201 y
Fp(si)j Fk(\242)e Fg(\310)f Fp(0.)p 1 TeXcolorgray
0.4902 0.76077 0.27452 TeXcolorrgb 109 2339 3544 3 v
109 3378 3 1041 v 3650 3378 V 109 3379 3544 3 v 0 TeXcolorgray
1 0.37646 0 TeXcolorrgb 109 3605 a Fm(EXEMPLES)p 0 TeXcolorgray
0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 237
3819 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41 w Fj(P)366
3831 y Fe(1)410 3820 y Fp(\()438 3819 y Fj(x)482 3820
y Fp(\))524 3819 y Fg(\306)g(\241)r Fj(x)694 3785 y Fe(2)739
3819 y Fg(\305)c Fp(3)r Fj(x)15 b Fg(\241)10 b Fp(2)19
b(:)316 3933 y Fk(\242)c Fg(\306)f Fp(9)c Fg(\241)g Fp(4)g
Fg(\243)684 3934 y Fp(\()712 3933 y Fg(\241)p Fp(1)807
3934 y(\))845 3933 y Fg(\243)910 3934 y Fp(\()937 3933
y Fg(\241)p Fp(2)1032 3934 y(\))1073 3933 y Fg(\306)k
Fp(1.)316 4048 y Fj(P)366 4060 y Fe(1)419 4048 y Fp(poss\350de)k(2)g(r)
o(acines)g(:)318 4195 y Fj(x)359 4207 y Fe(1)409 4195
y Fg(\306)488 4139 y(\241)p Fp(3)10 b Fg(\241)g Fp(1)p
488 4176 212 5 v 546 4252 a Fg(\241)p Fp(2)723 4195 y
Fg(\306)15 b Fp(2)i(et)j Fj(x)976 4207 y Fe(2)1026 4195
y Fg(\306)1105 4139 y(\241)p Fp(3)10 b Fg(\305)g Fp(1)p
1105 4176 V 1163 4252 a Fg(\241)p Fp(2)1340 4195 y Fg(\306)k
Fp(1)p 0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb
237 4363 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41
w Fj(P)366 4375 y Fe(2)410 4364 y Fp(\()438 4363 y Fj(x)482
4364 y Fp(\))524 4363 y Fg(\306)i Fj(x)639 4328 y Fe(2)684
4363 y Fg(\241)10 b Fp(4)r Fj(x)15 b Fg(\305)10 b Fp(4)19
b(:)316 4477 y Fk(\242)c Fg(\306)f Fp(16)c Fg(\241)g
Fp(4)g Fg(\243)g Fp(1)g Fg(\243)g Fp(4)18 b Fg(\306)c
Fp(0.)316 4591 y Fj(P)366 4603 y Fe(2)419 4591 y Fp(poss\350de)k(une)g
(seule)h(r)o(acine)e(:)318 4738 y Fj(x)359 4750 y Fe(0)409
4738 y Fg(\306)d(\241)543 4682 y(\241)p Fp(4)p 543 4719
96 5 v 571 4795 a(2)663 4738 y Fg(\306)g Fp(2.)p 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 237 4906 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 41 w Fj(P)366 4918 y Fe(3)410
4907 y Fp(\()438 4906 y Fj(x)482 4907 y Fp(\))524 4906
y Fg(\306)i Fj(x)639 4872 y Fe(2)684 4906 y Fg(\305)c
Fj(x)j Fg(\305)10 b Fp(1)19 b(:)316 5020 y Fk(\242)c
Fg(\306)f Fp(1)c Fg(\241)g Fp(4)g Fg(\243)g Fp(1)g Fg(\243)g
Fp(1)17 b Fg(\306)d(\241)p Fp(3.)316 5135 y Fj(P)366
5147 y Fe(3)419 5135 y Fp(ne)j(poss\350de)i(aucune)f(r)o(acine)o(.)p
0 TeXcolorgray 109 5980 3544 2 v OliveGreen 109 6095
a
SDict begin H.S end
 109 6095 a OliveGreen 0 TeXcolorgray -15 x Fb(https://www)-5
b(.maths-cours)o(.fr/cours/trinomes-du-second-degr)o(e/)p
OliveGreen OliveGreen 1869 6034 a
SDict begin H.R end
 1869 6034 a 1869 6080
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/trinomes-du-second-degre/)>>/Subtype
/Link H.B /ANN pdfmark end
 1869 6080 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fp(P)n(olyn\364mes)
18 b(et)g(\351quations)g(du)g(second)f(degr\351)2092
b(4)p 109 110 3544 2 v 0 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 1198 3539
880 v 1 TeXcolorgray 0 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 347 498 a Fm(PR)o(OPRI\311T\311)17 b(\(SOMME)h(ET)g(PR)o
(ODUIT)g(DES)f(RA)n(CINES\))p 0 TeXcolorgray 347 664
a Fp(S)o(oit)h(un)g(polyn\364me)h Fj(P)1040 665 y Fp(\()1069
664 y Fj(x)1113 665 y Fp(\))1154 664 y Fg(\306)d Fj(a)6
b(x)1318 630 y Fe(2)1364 664 y Fg(\305)k Fj(b)c(x)15
b Fg(\305)10 b Fj(c)23 b Fp(dont)18 b(le)f(discr)q(iminant)i(est)f(str)
q(ictement)g(positif.)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 834 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
42 w Fp(La)f(somme)i(des)f(r)o(acines)g(vaut)h Fj(x)1542
846 y Fe(1)1588 834 y Fg(\305)12 b Fj(x)1696 846 y Fe(2)1746
834 y Fg(\306)i(\241)1881 777 y Fj(b)p 1880 814 49 5
v 1882 891 a(a)1939 834 y Fp(.)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 1023 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
42 w Fp(Le)k(produit)f(des)g(r)o(acines)h(vaut)i Fj(x)1544
1035 y Fe(1)1582 1023 y Fj(x)1623 1035 y Fe(2)1672 1023
y Fg(\306)1756 966 y Fj(c)p 1752 1003 V 1754 1080 a(a)1810
1023 y Fp(.)p 1 TeXcolorgray 0.4902 0.76077 0.27452 TeXcolorrgb
109 319 3544 3 v 109 1200 3 883 v 3650 1200 V 109 1201
3544 3 v 0 TeXcolorgray 1 0 0 0 TeXcolorcmyk 109 1427
a Fm(REMARQ)o(UE)p 0 TeXcolorgray 109 1597 a Fp(C)o(es)j(propr)q
(i\351t\351s)g(sont)g(souvent)h(utilis\351es)g(pour)f(r\351soudr)o(e)f
(r)o(apidement)i(une)f(\351quation)h(qui)f(poss\350de)g(une)g(r)o
(acine)109 1697 y("\351vidente".)109 1867 y(P)m(ar)f(exemple)j(l)o
('\351quation)i Fj(x)981 1833 y Fe(2)1029 1867 y Fg(\241)12
b Fp(4)r Fj(x)19 b Fg(\305)12 b Fp(3)20 b Fg(\306)g Fp(0)j(admet)j
Fj(x)1749 1879 y Fe(1)1804 1867 y Fg(\306)20 b Fp(1)j(comme)h(r)o
(acine)f(puisque)i(1)2807 1833 y Fe(2)2855 1867 y Fg(\241)12
b Fp(4)g Fg(\243)g Fp(1)g Fg(\305)g Fp(3)23 b Fg(\306)d
Fp(0)9 b(;)23 b(comme)111 1987 y Fj(x)152 1999 y Fe(1)197
1987 y Fg(\243)12 b Fj(x)305 1999 y Fe(2)355 1987 y Fg(\306)439
1931 y Fj(c)p 434 1968 49 5 v 436 2044 a(a)507 1987 y
Fg(\306)i Fp(3)k(l)o('autr)o(e)g(r)o(acine)g(est)i Fj(x)1265
1999 y Fe(2)1315 1987 y Fg(\306)14 b Fp(3)j(.)p 0.4902 0.76077 0.27452
TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 3206 3539
1033 v 1 TeXcolorgray 0 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 347 2352 a Fm(PR)o(OPRI\311T\311)g(\(SIGNE)g(D'UN)i(POL)-9
b(YN\324ME)17 b(DU)i(SECOND)f(DEGR\311\))p 0 TeXcolorgray
347 2519 a Fp(Le)g(polyn\364me)h Fj(P)879 2520 y Fp(\()908
2519 y Fj(x)952 2520 y Fp(\))993 2519 y Fg(\306)d Fj(a)6
b(x)1157 2484 y Fe(2)1203 2519 y Fg(\305)k Fj(b)c(x)15
b Fg(\305)10 b Fj(c)23 b Fp(:)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 2647 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
42 w Fp(est)18 b(toujours)g(du)g(signe)g(de)h Fj(a)i
Fp(si)c Fk(\242)e Fg(\307)f Fp(0)9 b(;)p 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 475 2817 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 42 w Fp(est)18 b(toujours)g(du)g(signe)g
(de)h Fj(a)i Fp(mais)d(s)m('annule)h(en)h Fj(x)2096 2829
y Fe(0)2145 2817 y Fg(\306)14 b Fl(\256)h Fg(\306)f(\241)2437
2761 y Fj(b)p 2416 2798 90 5 v 2416 2874 a Fp(2)r Fj(a)2533
2817 y Fp(si)j Fk(\242)e Fg(\306)f Fp(0)9 b(;)p 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 475 2969 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 42 w Fp(est)19 b(du)g(signe)h(de)h
Fj(a)h Fp(\253)14 b(\340)19 b(l)o('ext\351r)q(ieur)i(des)e(r)o(acines)c
(\273)j(\(c)n('est)i(\340)e(dir)o(e)h(sur)2628 2970 y(])2653
2969 y Fg(\2411)e Fp(;)10 b Fj(x)2874 2981 y Fe(1)2910
2970 y Fp([)2946 2969 y Fg([)3012 2970 y Fp(])3039 2969
y Fj(x)3080 2981 y Fe(2)3116 2969 y Fp(;)e Fg(\3051)3277
2970 y Fp([)3302 2969 y(\))19 b(et)555 3069 y(du)e(signe)h(oppos\351)h
(\253)14 b(entr)o(e)j(les)h(r)o(acines)c(\273)j(\()g(sur)1974
3070 y(])2001 3069 y Fj(x)2042 3081 y Fe(1)2077 3069
y Fp(;)10 b Fj(x)2148 3081 y Fe(2)2184 3070 y Fp([)2210
3069 y(\).)p 1 TeXcolorgray 0.4902 0.76077 0.27452 TeXcolorrgb
109 2173 3544 3 v 109 3207 3 1035 v 3650 3207 V 109 3208
3544 3 v 0 TeXcolorgray 1 0 0 0 TeXcolorcmyk 109 3434
a Fm(REMARQ)o(UE)p 0 TeXcolorgray 109 3605 a Fp(S)n(uivant)18
b(chacun)g(des)g(cas)f(on)g(peut)i(r)o(epr\351senter)f(le)g(tableau)f
(de)h(signe)g(de)f Fj(P)25 b Fp(de)17 b(la)h(fa\347on)f(suivante)i(:)p
0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 237
3725 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41 w Fi(S)o(i)c
Fk(\242)f Fg(\310)h Fp(0)g Fi(:)h Fj(P)690 3726 y Fp(\()719
3725 y Fj(x)763 3726 y Fp(\))805 3725 y(est)h(du)e(signe)h(de)i
Fj(a)h Fp(\340)d(l)o('ext\351r)q(ieur)h(des)f(r)o(acines)g(\(c)n('est)g
(\340)g(dir)o(e)f(si)j Fj(x)h Fg(\307)d Fj(x)2858 3737
y Fe(1)2910 3725 y Fp(ou)h Fj(x)j Fg(\310)c Fj(x)3188
3737 y Fe(2)3239 3725 y Fp(\))g(et)g(du)f(signe)316 3825
y(oppos\351)k(entr)o(e)e(les)h(r)o(acines)g(\(si)i Fj(x)1304
3837 y Fe(1)1354 3825 y Fg(\307)c Fj(x)j Fg(\307)e Fj(x)1596
3837 y Fe(2)1631 3825 y Fp(\).)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1054 4034 a

 1054 4034 a
1054 4034 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save
 0.5 TeXcolorgray
 89.29259 -14.88184 moveto

 89.29259 -44.6459 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save
 0.5 TeXcolorgray
 178.58519 -14.88184 moveto

 178.58519 -44.6459 lineto

 pgfstr

0 TeXcolorgray
 restore

 save

 save

 [1.0 0.0 0.0 1.0 -47.43085 -2.22667 ] concat

 pgfs



 0 setgray
 1056 4034 a Fj(x)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -7.97517 -2.03241 ] concat

 pgfs



 0 setgray
 1054 4034
a Fg(\2411)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 84.58081 -1.51932 ] concat

 pgfs



 0 setgray
 1056 4034 a Fj(x)1097 4046 y Fe(1)1054
4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 173.87341 -1.51932 ] concat

 pgfs



 0 setgray
 1056 4034 a Fj(x)1097 4046 y Fe(2)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 259.9026 -2.55545 ] concat

 pgfs



 0 setgray

1054 4034 a Fg(\3051)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -53.94647 -32.4266 ] concat

 pgfs



 0 setgray
 1054 4034 a Fj(P)8 b
Fp(\()r Fj(x)d Fp(\))1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.0 -29.76405 ] concat

 pgfs



 0 setgray
 1054 4034 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 23.65475 -32.053 ] concat

 pgfs



 0 setgray
 1054 4034
a Fp(signe)18 b(de)h Fj(a)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 86.86168 -32.80768 ] concat

 pgfs



 0 setgray
 1054 4034 a Fp(0)1054
4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 109.64969 -32.053 ] concat

 pgfs



 0 setgray
 1054 4034 a Fp(signe)f(de)f Fg(\241)r Fj(a)1054
4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 176.15428 -32.80768 ] concat

 pgfs



 0 setgray
 1054 4034 a Fp(0)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 202.23997 -32.053 ] concat

 pgfs



 0 setgray
 1054 4034 a Fp(signe)h(de)h
Fj(a)1054 4034 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 267.87779 -29.76405 ] concat

 pgfs



 0 setgray
 1054 4034 a


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 -22.32294 14.88184 moveto

 -22.32294 -44.6459 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 -66.96924 14.88184 moveto

 -66.96924 14.88184 moveto

 -66.96924 -44.6459 lineto

 290.20076 -44.6459 lineto

 290.20076 14.88184 lineto

 closepath

 290.20076 -44.6459 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 -66.96924 -14.88184 moveto

 290.20076 -14.88184 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 237 4566 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
41 w Fi(S)o(i)d Fk(\242)f Fg(\306)f Fp(0)j Fi(:)g Fj(P)694
4567 y Fp(\()723 4566 y Fj(x)767 4567 y Fp(\))812 4566
y(est)h(toujours)g(du)f(signe)h(de)h Fj(a)i Fp(sauf)e(en)g
Fj(x)2020 4578 y Fe(0)2073 4566 y Fp(\(o\371)e(il)h(s)m('annule\).)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1426 4777 a

 1426 4777 a 1426 4777 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save
 0.5 TeXcolorgray
 89.29259 -14.88184 moveto

 89.29259 -44.6459 lineto

 pgfstr

0 TeXcolorgray
 restore

 save

 save

 [1.0 0.0 0.0 1.0 -47.43085 -2.22667 ] concat

 pgfs



 0 setgray
 1428 4777 a Fj(x)1426 4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -7.97517 -2.03241 ] concat

 pgfs



 0 setgray
 1426 4777
a Fg(\2411)1426 4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 84.58081 -1.5004 ] concat

 pgfs



 0 setgray
 1428 4777 a Fj(x)1469 4789 y Fe(0)1426
4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 170.61 -2.55545 ] concat

 pgfs



 0 setgray
 1426 4777 a Fg(\3051)1426 4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -53.94647 -32.4266 ] concat

 pgfs



 0 setgray
 1426 4777 a Fj(P)8
b Fp(\()r Fj(x)d Fp(\))1426 4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.0 -29.76405 ] concat

 pgfs



 0 setgray
 1426 4777 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 23.65475 -32.053 ] concat

 pgfs



 0 setgray
 1426 4777
a Fp(signe)18 b(de)h Fj(a)1426 4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 86.86168 -32.80768 ] concat

 pgfs



 0 setgray
 1426 4777 a Fp(0)1426
4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 112.94736 -32.053 ] concat

 pgfs



 0 setgray
 1426 4777 a Fp(signe)f(de)h Fj(a)1426 4777 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 178.58519 -29.76405 ] concat

 pgfs



 0 setgray
 1426
4777 a


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 -22.32294 14.88184 moveto

 -22.32294 -44.6459 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 -66.96924 14.88184 moveto

 -66.96924 14.88184 moveto

 -66.96924 -44.6459 lineto

 200.90816 -44.6459 lineto

 200.90816 14.88184 lineto

 closepath

 200.90816 -44.6459 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 -66.96924 -14.88184 moveto

 200.90816 -14.88184 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb
237 5308 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41
w Fi(S)o(i)d Fk(\242)f Fg(\307)f Fp(0)j Fi(:)g Fj(P)694
5309 y Fp(\()723 5308 y Fj(x)767 5309 y Fp(\))812 5308
y(est)h(toujours)g(du)f(signe)h(de)h Fj(a)t Fp(.)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1829 5520 a

 1829 5520 a 1829 5520 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -39.98975 -2.22667 ] concat

 pgfs



 0 setgray
 1831 5520 a Fj(x)1829
5520 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -7.97517 -2.03241 ] concat

 pgfs



 0 setgray
 1829 5520 a Fg(\2411)1829 5520 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 66.43518 -2.55545 ] concat

 pgfs



 0 setgray
 1829 5520 a Fg(\3051)1829
5520 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -46.50537 -32.4266 ] concat

 pgfs



 0 setgray
 1829 5520 a Fj(P)8 b Fp(\()r Fj(x)d Fp(\))1829
5520 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.0 -29.76405 ] concat

 pgfs



 0 setgray
 1829 5520 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 16.21365 -32.053 ] concat

 pgfs



 0 setgray
 1829 5520 a Fp(signe)18 b(de)h Fj(a)1829
5520 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 74.41037 -29.76405 ] concat

 pgfs



 0 setgray
 1829 5520 a


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 -18.60258 14.88184 moveto

 -18.60258 -44.6459 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 14.88184 moveto

 -55.80777 14.88184 moveto

 -55.80777 -44.6459 lineto

 93.01295 -44.6459 lineto

 93.01295 14.88184 lineto

 closepath

 93.01295 -44.6459 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 -14.88184 moveto

 93.01295 -14.88184 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 109 5980 3544 2 v OliveGreen
109 6095 a
SDict begin H.S end
 109 6095 a OliveGreen 0 TeXcolorgray -15 x
Fb(https://www)-5 b(.maths-cours)o(.fr/cours/trinomes-du-second-degr)o
(e/)p OliveGreen OliveGreen 1869 6034 a
SDict begin H.R end
 1869 6034 a 1869
6080 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/trinomes-du-second-degre/)>>/Subtype
/Link H.B /ANN pdfmark end
 1869 6080 a 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fp(P)n(olyn\364mes)
18 b(et)g(\351quations)g(du)g(second)f(degr\351)2092
b(5)p 109 110 3544 2 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb
109 399 a Fm(EXEMPLES)p 0 TeXcolorgray 109 570 a Fp(S)o(i)17
b(l)o('on)h(r)o(epr)o(end)f(les)h(exemples)i(pr\351c\351dents)e(:)p
0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb 237
699 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray 41 w Fj(P)366
711 y Fe(1)410 700 y Fp(\()438 699 y Fj(x)482 700 y Fp(\))524
699 y Fg(\306)c(\241)r Fj(x)694 664 y Fe(2)739 699 y
Fg(\305)c Fp(3)r Fj(x)15 b Fg(\241)10 b Fp(2)19 b(:)316
813 y Fk(\242)c Fg(\310)f Fp(0)k(et)h Fj(a)f Fg(\307)d
Fp(0.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1209 1028 a

 1209 1028 a 1209 1028 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save
 0.5
TeXcolorgray
 74.41037 -14.88184 moveto

 74.41037 -44.6459 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save
 0.5 TeXcolorgray
 148.82074 -14.88184 moveto

 148.82074 -44.6459 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 save

 [1.0 0.0 0.0 1.0 -39.98975 -2.22667 ] concat

 pgfs



 0 setgray

1211 1028 a Fj(x)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -7.97517 -2.03241 ] concat

 pgfs



 0 setgray
 1209 1028 a Fg(\2411)1209
1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 71.97946 -3.06851 ] concat

 pgfs



 0 setgray
 1209 1028 a Fp(1)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 146.38983 -3.06851 ] concat

 pgfs



 0 setgray
 1209 1028 a Fp(2)1209
1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 215.25594 -2.55545 ] concat

 pgfs



 0 setgray
 1209 1028 a Fg(\3051)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -46.50537 -32.4266 ] concat

 pgfs



 0 setgray
 1209 1028 a Fj(P)8
b Fp(\()r Fj(x)d Fp(\))1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.0 -29.76405 ] concat

 pgfs



 0 setgray
 1209 1028 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 33.90749 -31.18872 ] concat

 pgfs



 0 setgray
 1209 1028
a Fg(\241)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 71.97946 -32.80768 ] concat

 pgfs



 0 setgray
 1209 1028 a Fp(0)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 108.31787 -32.3195 ] concat

 pgfs



 0 setgray
 1209
1028 a Fg(\305)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 146.38983 -32.80768 ] concat

 pgfs



 0 setgray
 1209 1028 a Fp(0)1209 1028
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 182.72824 -31.18872 ] concat

 pgfs



 0 setgray
 1209 1028 a Fg(\241)1209 1028 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 223.23112 -29.76405 ] concat

 pgfs



 0 setgray
 1209 1028 a


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 -18.60258 14.88184 moveto

 -18.60258 -44.6459 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 14.88184 moveto

 -55.80777 14.88184 moveto

 -55.80777 -44.6459 lineto

 241.83371 -44.6459 lineto

 241.83371 14.88184 lineto

 closepath

 241.83371 -44.6459 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 -14.88184 moveto

 241.83371 -14.88184 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 237 1583 a Fg(\262)p
0 TeXcolorgray 0 TeXcolorgray 41 w Fj(P)366 1595 y Fe(2)410
1584 y Fp(\()438 1583 y Fj(x)482 1584 y Fp(\))524 1583
y Fg(\306)16 b Fj(x)639 1549 y Fe(2)684 1583 y Fg(\241)10
b Fp(4)r Fj(x)15 b Fg(\305)10 b Fp(4)19 b(:)316 1697
y Fk(\242)c Fg(\306)f Fp(0)k(et)h Fj(a)f Fg(\310)d Fp(0.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1519 1913 a

 1519 1913 a 1519 1913 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save
 0.5 TeXcolorgray
 74.41037 -14.88184 moveto

 74.41037 -44.6459 lineto

 pgfstr

0 TeXcolorgray
 restore

 save

 save

 [1.0 0.0 0.0 1.0 -39.98975 -2.22667 ] concat

 pgfs



 0 setgray
 1521 1913 a Fj(x)1519 1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -7.97517 -2.03241 ] concat

 pgfs



 0 setgray
 1519 1913
a Fg(\2411)1519 1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 71.97946 -3.06851 ] concat

 pgfs



 0 setgray
 1519 1913 a Fp(2)1519 1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 140.84555 -2.55545 ] concat

 pgfs



 0 setgray
 1519
1913 a Fg(\3051)1519 1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -46.50537 -32.4266 ] concat

 pgfs



 0 setgray
 1519 1913 a Fj(P)8 b Fp(\()r
Fj(x)d Fp(\))1519 1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.0 -29.76405 ] concat

 pgfs



 0 setgray
 1519 1913 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 34.59492 -32.06047 ] concat

 pgfs



 0 setgray
 1519 1913 a Fp(+)1519
1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 71.97946 -32.80768 ] concat

 pgfs



 0 setgray
 1519 1913 a Fp(0)1519 1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 109.00531 -32.06047 ] concat

 pgfs



 0 setgray
 1519 1913 a Fp(+)1519
1913 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 148.82074 -29.76405 ] concat

 pgfs



 0 setgray
 1519 1913 a


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 -18.60258 14.88184 moveto

 -18.60258 -44.6459 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 14.88184 moveto

 -55.80777 14.88184 moveto

 -55.80777 -44.6459 lineto

 167.42334 -44.6459 lineto

 167.42334 14.88184 lineto

 closepath

 167.42334 -44.6459 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 -14.88184 moveto

 167.42334 -14.88184 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 237 2467 a Fg(\262)p 0 TeXcolorgray 0 TeXcolorgray
41 w Fj(P)366 2479 y Fe(3)410 2468 y Fp(\()438 2467 y
Fj(x)482 2468 y Fp(\))524 2467 y Fg(\306)16 b Fj(x)639
2433 y Fe(2)684 2467 y Fg(\305)c Fj(x)j Fg(\305)10 b
Fp(1)19 b(:)316 2581 y Fk(\242)c Fg(\307)f Fp(0)k(et)h
Fj(a)f Fg(\310)d Fp(0.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1829 2797 a

 1829 2797 a
1829 2797 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 [1.0 0.0 0.0 1.0 -39.98975 -2.22667 ] concat

 pgfs



 0 setgray
 1831 2797 a Fj(x)1829 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -7.97517 -2.03241 ] concat

 pgfs



 0 setgray
 1829 2797 a
Fg(\2411)1829 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 66.43518 -2.55545 ] concat

 pgfs



 0 setgray
 1829 2797 a Fg(\3051)1829 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -46.50537 -32.4266 ] concat

 pgfs



 0 setgray

1829 2797 a Fj(P)8 b Fp(\()r Fj(x)d Fp(\))1829 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.0 -29.76405 ] concat

 pgfs



 0 setgray

1829 2797 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 33.90749 -32.3195 ] concat

 pgfs



 0 setgray
 1829 2797 a Fg(\305)1829 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 74.41037 -29.76405 ] concat

 pgfs



 0 setgray
 1829 2797
a


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 -18.60258 14.88184 moveto

 -18.60258 -44.6459 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 14.88184 moveto

 -55.80777 14.88184 moveto

 -55.80777 -44.6459 lineto

 93.01295 -44.6459 lineto

 93.01295 14.88184 lineto

 closepath

 93.01295 -44.6459 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 -55.80777 -14.88184 moveto

 93.01295 -14.88184 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 109 3310 a Fp(On)22 b(r)o(appelle)i(que)f(les)g(solutions)h(de)f(l)o
('\351quation)32 b Fj(f)1691 3311 y Fp(\()1720 3310 y
Fj(x)1764 3311 y Fp(\))1810 3310 y Fg(\306)19 b Fp(0)k(sont)g(les)g
(abscisses)h(des)e Fi(points)e(d)n('intersection)g(de)h(la)109
3409 y(courbe)14 b Fj(C)434 3423 y Fd(f)488 3409 y Fp(et)k(de)f(l)o(')p
Fi(ax)o(e)f(des)g(abscisses)p Fp(.)109 3580 y(En)f(r)o(egroupant)g(les)
h(propr)q(i\351t\351s)g(de)f(ce)h(chapitr)o(e)f(et)h(celles)h(vues)f
(en)g(S)o(econde)g(on)g(peut)g(r\351sumer)g(ces)g(r\351sultats)h(dans)
109 3679 y(le)g(tableau)h(:)p 0 TeXcolorgray 109 5980
3544 2 v OliveGreen 109 6095 a
SDict begin H.S end
 109 6095 a OliveGreen
0 TeXcolorgray -15 x Fb(https://www)-5 b(.maths-cours)o
(.fr/cours/trinomes-du-second-degr)o(e/)p OliveGreen
OliveGreen 1869 6034 a
SDict begin H.R end
 1869 6034 a 1869 6080 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/trinomes-du-second-degre/)>>/Subtype
/Link H.B /ANN pdfmark end
 1869 6080
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fp(P)n(olyn\364mes)
18 b(et)g(\351quations)g(du)g(second)f(degr\351)2092
b(6)p 109 110 3544 2 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 378 320
3006 4 v 378 419 4 100 v 659 419 V 1256 389 a Fj(a)18
b Fg(\310)d Fp(0)p 2019 419 V 1190 w Fj(a)j Fg(\307)c
Fp(0)p 3380 419 V 378 422 3006 4 v 378 1559 4 1137 v
431 1530 a Fk(\242)h Fg(\310)f Fp(0)p 659 1559 V 103
w @beginspecial 0 @llx 0 @lly 177 @urx 158 @ury 1488
@rwi @setspecial
%%BeginDocument: C:/laragon/www/newmc/assets/imgsvg/parabole-1-1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.15.12 (http://cairographics.org)
%%CreationDate: Thu Aug 12 17:23:13 2021
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 177 158
%%EndComments
%%BeginProlog
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 177 158
%%EndPageSetup
q 0 0 177 158 rectclip
1 0 0 -1 0 158 cm q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 1.051 m 20.023 157.125 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.527 m 18.445 2.102 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.527 m 21.598 2.102 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
0 112.312 m 175.52 112.312 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 112.312 m 174.469 110.734 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 112.312 m 174.469 113.887 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
0.788255 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
37.938 -5.566 m 38.625 -2.371 l 39.316 0.789 l 40.004 3.91 l 40.695 6.996
 l 41.383 10.047 l 42.074 13.062 l 42.766 16.043 l 43.453 18.988 l 44.145
 21.895 l 44.832 24.77 l 45.523 27.605 l 46.211 30.406 l 46.902 33.172 l
 47.59 35.902 l 48.281 38.598 l 48.973 41.254 l 49.66 43.879 l 51.039 49.016
 l 52.422 54.012 l 53.801 58.867 l 55.18 63.574 l 56.555 68.148 l 57.938
 72.57 l 59.32 76.855 l 60.695 80.996 l 62.074 84.988 l 63.457 88.848 l 
64.836 92.559 l 66.215 96.125 l 67.59 99.551 l 68.973 102.836 l 70.355 105.973
 l 71.73 108.973 l 73.109 111.828 l 74.492 114.539 l 75.875 117.109 l 77.25
 119.535 l 78.625 121.82 l 80.008 123.961 l 81.391 125.965 l 82.77 127.816
 l 84.145 129.531 l 85.527 131.102 l 86.91 132.531 l 88.285 133.812 l 89.664
 134.961 l 91.043 135.957 l 92.426 136.816 l 93.805 137.531 l 95.18 138.102
 l 96.562 138.527 l 97.945 138.816 l 99.32 138.957 l 100.699 138.957 l 102.082
 138.816 l 103.461 138.531 l 104.84 138.102 l 106.215 137.535 l 107.598 
136.82 l 108.98 135.965 l 110.355 134.965 l 111.734 133.824 l 113.117 132.543
 l 114.496 131.113 l 115.875 129.547 l 117.25 127.832 l 118.633 125.98 l
 120.016 123.98 l 121.391 121.84 l 122.77 119.559 l 124.152 117.129 l 125.535
 114.559 l 126.91 111.848 l 128.285 108.996 l 129.668 106 l 131.051 102.863
 l 132.43 99.578 l 133.805 96.152 l 135.188 92.582 l 136.57 88.875 l 137.945
 85.02 l 139.324 81.027 l 140.703 76.887 l 142.086 72.605 l 143.465 68.184
 l 144.84 63.613 l 146.223 58.902 l 147.605 54.055 l 148.98 49.059 l 150.359
 43.922 l 151.051 41.297 l 151.738 38.641 l 152.43 35.945 l 153.121 33.215
 l 153.812 30.449 l 154.5 27.652 l 155.188 24.812 l 155.875 21.941 l 156.57
 19.035 l 157.258 16.09 l 157.945 13.109 l 158.641 10.098 l 159.328 7.047
 l 160.016 3.961 l 160.707 0.836 l 161.395 -2.32 l 162.086 -5.516 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
1 j
[ 0.525503 1.57651] 0 d
10 M q 1 0 0 1 0 0 cm
100.016 112.312 m 100.016 138.977 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.266667 g
73.875 112.312 m 73.875 112.605 73.645 112.836 73.352 112.836 c 73.062 
112.836 72.824 112.605 72.824 112.312 c 72.824 112.023 73.062 111.785 73.352
 111.785 c 73.645 111.785 73.875 112.023 73.875 112.312 c f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
73.875 112.312 m 73.875 112.605 73.645 112.836 73.352 112.836 c 73.062 
112.836 72.824 112.605 72.824 112.312 c 72.824 112.023 73.062 111.785 73.352
 111.785 c 73.645 111.785 73.875 112.023 73.875 112.312 c h
73.875 112.312 m S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.266667 g
127.203 112.312 m 127.203 112.605 126.969 112.836 126.68 112.836 c 126.391
 112.836 126.152 112.605 126.152 112.312 c 126.152 112.023 126.391 111.785
 126.68 111.785 c 126.969 111.785 127.203 112.023 127.203 112.312 c f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
127.203 112.312 m 127.203 112.605 126.969 112.836 126.68 112.836 c 126.391
 112.836 126.152 112.605 126.152 112.312 c 126.152 112.023 126.391 111.785
 126.68 111.785 c 126.969 111.785 127.203 112.023 127.203 112.312 c h
127.203 112.312 m S Q
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
34.414 6.793 m 33.918 8.766 l 33.836 8.848 33.793 8.891 33.793 8.891 c 
33.668 8.891 l 33.582 8.891 33.539 8.848 33.539 8.766 c 33.668 8.395 l 33.668
 7.738 33.461 7.285 33.051 7.039 c 32.805 6.953 32.559 6.914 32.312 6.914
 c 31.816 6.914 31.324 7.117 30.828 7.527 c 30.664 7.613 30.543 7.734 30.457
 7.898 c 29.965 8.473 29.637 9.211 29.473 10.113 c 29.473 10.277 29.473 
10.398 29.473 10.484 c 29.473 11.227 29.758 11.719 30.332 11.965 c 30.496
 12.051 30.742 12.094 31.074 12.094 c 31.566 12.094 32.02 11.926 32.43 11.594
 c 32.84 11.27 33.125 10.859 33.289 10.367 c 33.289 10.281 33.328 10.238
 33.414 10.238 c 33.414 10.238 33.414 10.281 33.414 10.367 c 33.414 10.449
 33.371 10.613 33.289 10.863 c 33.125 11.191 32.879 11.48 32.547 11.723 
c 32.055 12.133 31.52 12.336 30.945 12.336 c 30.207 12.336 29.629 12.133
 29.219 11.723 c 28.891 11.312 28.723 10.816 28.723 10.238 c 28.723 9.418
 29.012 8.68 29.582 8.023 c 30.156 7.367 30.77 6.957 31.426 6.793 c 31.758
 6.711 32.047 6.668 32.285 6.668 c 32.859 6.668 33.27 6.914 33.516 7.41 
c 34.133 6.793 l 34.215 6.711 34.258 6.668 34.258 6.668 c 34.34 6.668 34.383
 6.711 34.383 6.793 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
35.992 11.16 m 35.734 12.969 l 35.672 13.203 35.586 13.461 35.473 13.746
 c 35.473 13.863 35.445 13.949 35.387 14.008 c 35.27 14.293 35.098 14.469
 34.867 14.527 c 34.867 14.527 34.836 14.527 34.777 14.527 c 34.605 14.527
 34.461 14.469 34.348 14.355 c 34.289 14.297 34.258 14.238 34.258 14.184
 c 34.258 14.012 34.348 13.898 34.52 13.84 c 34.52 13.84 34.547 13.84 34.605
 13.84 c 34.723 13.84 34.777 13.871 34.777 13.93 c 34.777 13.988 34.777 
14.02 34.777 14.02 c 34.777 14.133 34.723 14.219 34.605 14.277 c 34.605 
14.277 34.578 14.309 34.52 14.367 c 34.578 14.426 34.664 14.453 34.777 14.453
 c 34.949 14.453 35.066 14.254 35.125 13.852 c 35.184 13.793 35.215 13.707
 35.215 13.594 c 35.215 13.422 l 35.645 11.184 l 35.301 11.184 l 35.188 
11.184 35.133 11.184 35.133 11.184 c 35.133 11.125 35.16 11.066 35.219 11.012
 c 35.738 11.012 l 35.797 10.551 35.855 10.266 35.91 10.148 c 36.023 9.805
 36.195 9.605 36.43 9.551 c 36.488 9.551 36.543 9.551 36.598 9.551 c 36.773
 9.551 36.914 9.605 37.031 9.719 c 37.031 9.777 37.031 9.836 37.031 9.891
 c 37.031 10.062 36.973 10.18 36.859 10.238 c 36.859 10.238 36.828 10.238
 36.77 10.238 c 36.656 10.238 36.598 10.211 36.598 10.148 c 36.539 10.09
 36.512 10.062 36.512 10.062 c 36.512 9.949 36.566 9.863 36.684 9.805 c 
36.742 9.805 36.797 9.773 36.852 9.715 c 36.793 9.656 36.707 9.625 36.594
 9.625 c 36.48 9.625 36.395 9.684 36.336 9.797 c 36.273 9.855 36.219 10.055
 36.164 10.398 c 36.074 11 l 36.504 11 l 36.621 11 36.676 11.031 36.676 
11.09 c 36.676 11.148 36.648 11.176 36.59 11.176 c 35.98 11.176 l f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
95.031 102.5 m 90.719 102.5 l 90.559 102.5 90.477 102.457 90.477 102.375
 c 90.477 102.289 90.559 102.246 90.719 102.246 c 95.031 102.246 l 95.195
 102.246 95.277 102.289 95.277 102.375 c 95.277 102.457 95.195 102.5 95.031
 102.5 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
102.457 93.594 m 101.961 96.059 l 102.207 95.727 102.496 95.562 102.82 
95.562 c 103.23 95.562 103.516 95.727 103.68 96.059 c 103.844 96.305 103.922
 96.555 103.922 96.801 c 103.922 97.375 103.719 97.906 103.309 98.402 c 
102.898 98.809 102.488 99.059 102.078 99.141 c 102.078 99.141 102.035 99.141
 101.953 99.141 c 101.621 99.141 101.336 98.938 101.094 98.527 c 101.008
 98.363 100.969 98.16 100.969 97.91 c 100.969 97.664 101.008 97.379 101.094
 97.051 c 101.707 94.469 l 101.793 94.219 101.836 94.055 101.836 93.969 
c 101.836 93.969 101.793 93.93 101.707 93.844 c 101.707 93.844 101.629 93.844
 101.465 93.844 c 101.379 93.844 101.297 93.844 101.219 93.844 c 101.219
 93.68 101.301 93.602 101.465 93.602 c 102.324 93.602 l 102.406 93.602 102.449
 93.602 102.449 93.602 c 101.707 96.555 m 101.582 97.297 l 101.5 97.629 
101.457 97.914 101.457 98.156 c 101.457 98.566 101.578 98.812 101.828 98.898
 c 101.91 98.898 101.953 98.898 101.953 98.898 c 102.285 98.898 102.531 
98.73 102.695 98.402 c 102.777 98.316 102.859 98.234 102.938 98.156 c 103.023
 97.824 103.145 97.414 103.309 96.926 c 103.309 96.762 103.309 96.598 103.309
 96.43 c 103.309 96.02 103.184 95.773 102.938 95.688 c 102.855 95.688 102.812
 95.688 102.812 95.688 c 102.48 95.688 102.152 95.895 101.828 96.305 c 101.828
 96.387 101.785 96.469 101.699 96.547 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
98.25 102.223 8.109 0.312 re f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
101.824 108.395 m 101.578 109.75 l 98.625 109.75 l 98.625 109.59 98.664
 109.508 98.75 109.508 c 100.23 107.781 l 100.805 107.125 101.09 106.547
 101.09 106.055 c 101.09 105.559 100.926 105.191 100.594 104.941 c 100.43
 104.781 100.227 104.699 99.98 104.699 c 99.648 104.699 99.363 104.863 99.121
 105.195 c 99.035 105.281 98.996 105.402 98.996 105.566 c 98.996 105.566
 99.035 105.566 99.121 105.566 c 99.285 105.566 99.406 105.648 99.492 105.809
 c 99.492 105.895 99.492 105.938 99.492 105.938 c 99.492 106.184 99.367 
106.309 99.121 106.309 c 99.121 106.391 99.121 106.434 99.121 106.434 c 
98.875 106.434 98.707 106.352 98.625 106.188 c 98.625 106.105 98.625 106.023
 98.625 105.945 c 98.625 105.535 98.789 105.207 99.121 104.957 c 99.367 
104.629 99.695 104.461 100.105 104.461 c 100.68 104.461 101.129 104.668 
101.461 105.078 c 101.625 105.324 101.746 105.609 101.832 105.938 c 101.832
 105.938 101.832 105.977 101.832 106.062 c 101.832 106.395 101.668 106.766
 101.336 107.172 c 101.172 107.336 100.926 107.543 100.594 107.789 c 100.223
 108.285 l 100.098 108.285 l 99.238 109.145 l 100.719 109.145 l 101.129 
109.145 101.379 109.145 101.461 109.145 c 101.461 109.059 101.504 108.812
 101.586 108.402 c 101.832 108.402 l f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
105.152 106.797 m 105.152 106.633 105.23 106.508 105.395 106.426 c 105.395
 106.426 105.438 106.426 105.52 106.426 c 105.605 106.426 105.648 106.508
 105.648 106.668 c 105.648 106.668 105.648 106.75 105.648 106.914 c 105.402
 108.023 l 105.32 108.355 105.238 108.602 105.16 108.766 c 105.074 109.012
 105.031 109.18 105.031 109.262 c 105.031 109.508 105.113 109.633 105.277
 109.633 c 105.523 109.633 105.688 109.43 105.773 109.02 c 105.855 108.934
 105.898 108.812 105.898 108.648 c 105.984 108.562 106.027 108.523 106.027
 108.523 c 106.109 108.523 106.152 108.562 106.152 108.648 c 106.152 108.73
 106.109 108.895 106.027 109.137 c 105.941 109.219 105.898 109.301 105.898
 109.383 c 105.738 109.711 105.531 109.879 105.285 109.879 c 105.039 109.879
 104.832 109.754 104.668 109.508 c 104.668 109.422 104.629 109.34 104.543
 109.262 c 104.219 109.672 103.891 109.879 103.559 109.879 c 103.148 109.879
 102.863 109.672 102.699 109.262 c 102.613 109.102 102.574 108.852 102.574
 108.523 c 102.574 108.027 102.738 107.535 103.07 107.039 c 103.48 106.547
 103.891 106.297 104.301 106.297 c 104.383 106.297 104.426 106.297 104.426
 106.297 c 104.758 106.297 105.004 106.465 105.168 106.797 c 104.668 108.766
 m 105.039 107.285 l 105.039 107.199 105.039 107.156 105.039 107.156 c 105.039
 106.996 105 106.828 104.914 106.66 c 104.828 106.5 104.664 106.418 104.418
 106.418 c 104.172 106.418 103.922 106.582 103.676 106.914 c 103.594 106.996
 103.551 107.078 103.551 107.156 c 103.387 107.488 103.223 107.941 103.055
 108.516 c 103.055 108.676 103.055 108.801 103.055 108.883 c 103.055 109.293
 103.176 109.543 103.426 109.625 c 103.426 109.625 103.465 109.625 103.551
 109.625 c 103.883 109.625 104.168 109.461 104.41 109.129 c 104.492 109.043
 104.574 108.965 104.652 108.883 c 104.652 108.801 104.652 108.758 104.652
 108.758 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
65.121 117.191 m 64.875 118.176 l 64.793 118.586 64.75 118.832 64.75 118.918
 c 64.75 119.164 64.832 119.328 64.996 119.414 c 65.078 119.414 65.16 119.414
 65.238 119.414 c 65.484 119.414 65.691 119.289 65.852 119.043 c 66.016 
118.879 66.141 118.676 66.223 118.426 c 66.223 118.344 66.266 118.301 66.352
 118.301 c 66.434 118.301 66.477 118.344 66.477 118.426 c 66.477 118.512
 66.395 118.676 66.23 118.918 c 65.902 119.41 65.574 119.656 65.246 119.656
 c 64.836 119.656 64.551 119.492 64.387 119.16 c 64.387 119.078 64.387 119.035
 64.387 119.035 c 64.223 119.281 64.02 119.445 63.773 119.531 c 63.688 119.613
 63.605 119.656 63.527 119.656 c 63.195 119.656 62.949 119.535 62.789 119.285
 c 62.789 119.285 62.789 119.207 62.789 119.043 c 62.789 118.879 62.867 
118.758 63.031 118.672 c 63.117 118.672 63.156 118.672 63.156 118.672 c 
63.32 118.672 63.445 118.715 63.527 118.797 c 63.527 118.883 63.527 118.926
 63.527 118.926 c 63.527 119.086 63.445 119.211 63.285 119.293 c 63.199 
119.293 63.156 119.293 63.156 119.293 c 63.242 119.379 63.363 119.422 63.527
 119.422 c 63.773 119.422 63.98 119.254 64.145 118.926 c 64.227 118.84 64.27
 118.758 64.27 118.68 c 64.516 117.613 64.641 116.957 64.641 116.711 c 64.641
 116.379 64.516 116.211 64.27 116.211 c 64.023 116.211 63.773 116.379 63.527
 116.711 c 63.445 116.793 63.363 116.918 63.285 117.078 c 63.285 117.078
 63.285 117.121 63.285 117.207 c 63.156 117.332 l 63.074 117.332 63.031 
117.332 63.031 117.332 c 63.031 117.168 63.113 116.965 63.277 116.719 c 
63.523 116.309 63.852 116.102 64.262 116.102 c 64.672 116.102 64.957 116.309
 65.121 116.719 c 65.285 116.387 65.488 116.18 65.734 116.102 c 65.82 116.102
 65.902 116.102 65.98 116.102 c 66.312 116.102 66.516 116.184 66.594 116.348
 c 66.68 116.43 66.719 116.512 66.719 116.59 c 66.719 116.836 66.598 116.961
 66.352 116.961 c 66.352 117.047 66.309 117.086 66.223 117.086 c 66.062 
117.086 65.98 117.008 65.98 116.844 c 65.98 116.844 65.98 116.801 65.98 
116.719 c 65.98 116.555 66.062 116.43 66.223 116.348 c 66.223 116.348 66.266
 116.348 66.352 116.348 c 66.266 116.262 66.141 116.219 65.98 116.219 c 
65.57 116.219 65.324 116.508 65.238 117.078 c 65.156 117.078 65.113 117.121
 65.113 117.207 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
68.676 117.176 m 68.676 120.277 l 68.676 120.391 68.707 120.449 68.766 
120.449 c 68.824 120.508 68.969 120.535 69.195 120.535 c 69.367 120.535 
l 69.367 120.707 l 69.254 120.707 68.938 120.707 68.418 120.707 c 67.957
 120.707 67.672 120.707 67.559 120.707 c 67.559 120.535 l 67.727 120.535
 l 68.016 120.535 68.188 120.508 68.246 120.449 c 68.246 120.391 68.246 
120.332 68.246 120.277 c 68.246 117.43 l 68.074 117.488 67.844 117.52 67.559
 117.52 c 67.559 117.348 l 67.957 117.348 68.273 117.23 68.508 117 c 68.621
 117 68.676 117.031 68.676 117.09 c 68.676 117.09 68.676 117.117 68.676 
117.176 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
132.387 116.664 m 132.141 117.648 l 132.055 118.059 132.016 118.305 132.016
 118.391 c 132.016 118.637 132.098 118.805 132.258 118.887 c 132.344 118.887
 132.426 118.887 132.504 118.887 c 132.75 118.887 132.953 118.766 133.117
 118.516 c 133.281 118.355 133.402 118.148 133.488 117.902 c 133.488 117.816
 133.531 117.777 133.613 117.777 c 133.699 117.777 133.742 117.816 133.742
 117.902 c 133.742 117.984 133.66 118.148 133.496 118.391 c 133.164 118.883
 132.836 119.133 132.512 119.133 c 132.102 119.133 131.816 118.965 131.652
 118.637 c 131.652 118.551 131.652 118.508 131.652 118.508 c 131.488 118.758
 131.285 118.922 131.035 119.004 c 130.953 119.09 130.871 119.133 130.793
 119.133 c 130.461 119.133 130.215 119.008 130.051 118.762 c 130.051 118.762
 130.051 118.68 130.051 118.516 c 130.051 118.355 130.133 118.23 130.297
 118.145 c 130.379 118.145 130.422 118.145 130.422 118.145 c 130.586 118.145
 130.707 118.188 130.793 118.273 c 130.793 118.355 130.793 118.398 130.793
 118.398 c 130.793 118.562 130.711 118.684 130.547 118.77 c 130.465 118.77
 130.422 118.77 130.422 118.77 c 130.508 118.852 130.629 118.895 130.793
 118.895 c 131.039 118.895 131.246 118.73 131.406 118.398 c 131.492 118.316
 131.535 118.234 131.535 118.152 c 131.781 117.086 131.902 116.43 131.902
 116.184 c 131.902 115.852 131.781 115.688 131.535 115.688 c 131.285 115.688
 131.039 115.852 130.793 116.184 c 130.707 116.27 130.629 116.391 130.547
 116.555 c 130.547 116.555 130.547 116.598 130.547 116.68 c 130.422 116.805
 l 130.34 116.805 130.297 116.805 130.297 116.805 c 130.297 116.645 130.379
 116.438 130.539 116.191 c 130.789 115.781 131.117 115.578 131.527 115.578
 c 131.934 115.578 132.223 115.781 132.387 116.191 c 132.547 115.859 132.754
 115.656 133 115.578 c 133.082 115.578 133.164 115.578 133.242 115.578 c
 133.574 115.578 133.781 115.656 133.859 115.82 c 133.941 115.906 133.984
 115.988 133.984 116.066 c 133.984 116.312 133.863 116.438 133.613 116.438
 c 133.613 116.52 133.574 116.562 133.488 116.562 c 133.324 116.562 133.242
 116.48 133.242 116.316 c 133.242 116.316 133.242 116.277 133.242 116.191
 c 133.242 116.027 133.324 115.906 133.488 115.82 c 133.488 115.82 133.531
 115.82 133.613 115.82 c 133.531 115.738 133.406 115.695 133.242 115.695
 c 132.836 115.695 132.586 115.98 132.504 116.555 c 132.418 116.555 132.375
 116.598 132.375 116.68 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
136.801 119.238 m 136.633 120.188 l 134.562 120.188 l 134.562 120.074 134.59
 120.016 134.652 120.016 c 135.688 118.809 l 136.09 118.348 136.289 117.945
 136.289 117.602 c 136.289 117.254 136.172 116.996 135.941 116.82 c 135.828
 116.707 135.684 116.652 135.512 116.652 c 135.281 116.652 135.078 116.766
 134.91 117 c 134.852 117.059 134.82 117.145 134.82 117.258 c 134.82 117.258
 134.852 117.258 134.91 117.258 c 135.023 117.258 135.109 117.316 135.168
 117.43 c 135.168 117.488 135.168 117.516 135.168 117.516 c 135.168 117.691
 135.082 117.777 134.91 117.777 c 134.91 117.836 134.91 117.863 134.91 117.863
 c 134.738 117.863 134.621 117.809 134.562 117.695 c 134.562 117.637 134.562
 117.578 134.562 117.523 c 134.562 117.234 134.68 117.008 134.91 116.832
 c 135.082 116.602 135.312 116.484 135.598 116.484 c 136 116.484 136.316
 116.629 136.547 116.914 c 136.664 117.09 136.75 117.289 136.809 117.516
 c 136.809 117.516 136.809 117.547 136.809 117.605 c 136.809 117.836 136.691
 118.098 136.461 118.383 c 136.348 118.496 136.172 118.641 135.941 118.812
 c 135.684 119.16 l 135.594 119.16 l 134.992 119.762 l 136.031 119.762 l
 136.316 119.762 136.488 119.762 136.547 119.762 c 136.547 119.703 136.578
 119.531 136.637 119.246 c 136.809 119.246 l f
  Q
Q
Q Q
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 2019 1559 V 1360 w @beginspecial 0 @llx
0 @lly 177 @urx 157 @ury 1488 @rwi @setspecial
%%BeginDocument: C:/laragon/www/newmc/assets/imgsvg/parabole-1-2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.15.12 (http://cairographics.org)
%%CreationDate: Thu Aug 12 17:21:46 2021
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 177 157
%%EndComments
%%BeginProlog
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 177 157
%%EndPageSetup
q 0 0 177 157 rectclip
1 0 0 -1 0 157 cm q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.711 m 20.023 156.785 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.188 m 18.445 1.762 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.188 m 21.598 1.762 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
0 111.973 m 175.52 111.973 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 111.973 m 174.469 110.395 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 111.973 m 174.469 113.547 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
0.788255 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
55.18 160.707 m 56.555 156.141 l 57.938 151.715 l 59.32 147.434 l 60.695
 143.289 l 62.074 139.297 l 63.453 135.441 l 64.836 131.73 l 66.215 128.16
 l 67.59 124.734 l 68.973 121.449 l 70.355 118.309 l 71.73 115.312 l 73.109
 112.461 l 74.488 109.742 l 75.871 107.172 l 77.25 104.75 l 78.625 102.465
 l 80.008 100.32 l 81.391 98.324 l 82.766 96.469 l 84.145 94.754 l 85.527
 93.184 l 86.906 91.754 l 88.285 90.473 l 89.66 89.328 l 91.043 88.328 l
 92.426 87.473 l 93.801 86.758 l 95.18 86.184 l 96.562 85.758 l 97.941 85.469
 l 99.32 85.328 l 100.695 85.328 l 102.078 85.469 l 103.461 85.754 l 104.84
 86.18 l 106.215 86.754 l 107.598 87.465 l 108.98 88.324 l 110.355 89.32
 l 111.734 90.461 l 113.113 91.746 l 114.496 93.172 l 115.875 94.738 l 117.25
 96.453 l 118.633 98.309 l 120.016 100.305 l 121.391 102.449 l 122.77 104.73
 l 124.148 107.156 l 125.531 109.723 l 126.91 112.434 l 128.285 115.285 
l 129.668 118.289 l 131.051 121.426 l 132.426 124.711 l 133.805 128.137 
l 135.188 131.699 l 136.566 135.41 l 137.945 139.266 l 139.32 143.258 l 
140.703 147.398 l 142.086 151.68 l 143.461 156.102 l 144.84 160.668 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
1 j
[ 0.525503 1.57651] 0 d
10 M q 1 0 0 1 0 0 cm
100.016 85.309 m 100.016 111.973 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.266667 g
73.875 111.973 m 73.875 112.266 73.645 112.496 73.352 112.496 c 73.062 
112.496 72.824 112.266 72.824 111.973 c 72.824 111.684 73.062 111.445 73.352
 111.445 c 73.645 111.445 73.875 111.684 73.875 111.973 c f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
73.875 111.973 m 73.875 112.266 73.645 112.496 73.352 112.496 c 73.062 
112.496 72.824 112.266 72.824 111.973 c 72.824 111.684 73.062 111.445 73.352
 111.445 c 73.645 111.445 73.875 111.684 73.875 111.973 c h
73.875 111.973 m S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.266667 g
127.203 111.973 m 127.203 112.266 126.969 112.496 126.68 112.496 c 126.391
 112.496 126.152 112.266 126.152 111.973 c 126.152 111.684 126.391 111.445
 126.68 111.445 c 126.969 111.445 127.203 111.684 127.203 111.973 c f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
127.203 111.973 m 127.203 112.266 126.969 112.496 126.68 112.496 c 126.391
 112.496 126.152 112.266 126.152 111.973 c 126.152 111.684 126.391 111.445
 126.68 111.445 c 126.969 111.445 127.203 111.684 127.203 111.973 c h
127.203 111.973 m S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.2 0 0 rg
100.539 85.309 m 100.539 85.602 100.309 85.832 100.016 85.832 c 99.727 
85.832 99.488 85.602 99.488 85.309 c 99.488 85.02 99.727 84.781 100.016 
84.781 c 100.309 84.781 100.539 85.02 100.539 85.309 c f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
100.539 85.309 m 100.539 85.602 100.309 85.832 100.016 85.832 c 99.727 
85.832 99.488 85.602 99.488 85.309 c 99.488 85.02 99.727 84.781 100.016 
84.781 c 100.309 84.781 100.539 85.02 100.539 85.309 c h
100.539 85.309 m S Q
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
50.18 144.137 m 49.684 146.109 l 49.602 146.191 49.559 146.234 49.559 146.234
 c 49.43 146.234 l 49.348 146.234 49.305 146.191 49.305 146.109 c 49.43 
145.738 l 49.43 145.082 49.227 144.629 48.816 144.383 c 48.57 144.297 48.324
 144.254 48.074 144.254 c 47.582 144.254 47.086 144.461 46.594 144.871 c
 46.43 144.953 46.309 145.078 46.223 145.242 c 45.73 145.812 45.402 146.551
 45.238 147.457 c 45.238 147.617 45.238 147.742 45.238 147.824 c 45.238 
148.566 45.523 149.062 46.098 149.309 c 46.262 149.391 46.508 149.434 46.84
 149.434 c 47.332 149.434 47.785 149.27 48.195 148.938 c 48.605 148.613 
48.891 148.203 49.055 147.707 c 49.055 147.625 49.094 147.582 49.18 147.582
 c 49.18 147.582 49.18 147.625 49.18 147.707 c 49.18 147.793 49.137 147.957
 49.055 148.203 c 48.891 148.535 48.645 148.82 48.312 149.062 c 47.816 149.473
 47.285 149.68 46.711 149.68 c 45.973 149.68 45.395 149.473 44.984 149.062
 c 44.656 148.652 44.488 148.16 44.488 147.582 c 44.488 146.762 44.777 146.023
 45.348 145.367 c 45.922 144.711 46.535 144.301 47.191 144.137 c 47.523 
144.055 47.809 144.012 48.051 144.012 c 48.625 144.012 49.035 144.258 49.281
 144.75 c 49.898 144.137 l 49.98 144.055 50.023 144.012 50.023 144.012 c
 50.105 144.012 50.148 144.055 50.148 144.137 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
51.758 148.504 m 51.496 150.312 l 51.438 150.543 51.352 150.805 51.238 
151.09 c 51.238 151.203 51.207 151.289 51.148 151.348 c 51.035 151.637 50.863
 151.809 50.633 151.867 c 50.633 151.867 50.602 151.867 50.543 151.867 c
 50.371 151.867 50.227 151.812 50.113 151.695 c 50.055 151.637 50.023 151.582
 50.023 151.527 c 50.023 151.352 50.109 151.238 50.285 151.184 c 50.285 
151.184 50.312 151.184 50.371 151.184 c 50.484 151.184 50.543 151.215 50.543
 151.273 c 50.543 151.332 50.543 151.359 50.543 151.359 c 50.543 151.473
 50.484 151.562 50.371 151.621 c 50.371 151.621 50.344 151.648 50.285 151.707
 c 50.344 151.766 50.43 151.797 50.543 151.797 c 50.715 151.797 50.832 151.598
 50.891 151.195 c 50.949 151.137 50.98 151.051 50.98 150.938 c 50.98 150.766
 l 51.41 148.523 l 51.066 148.523 l 50.953 148.523 50.895 148.523 50.895
 148.523 c 50.895 148.465 50.926 148.41 50.984 148.352 c 51.504 148.352 
l 51.562 147.895 51.617 147.605 51.672 147.492 c 51.789 147.148 51.961 146.945
 52.191 146.891 c 52.25 146.891 52.309 146.891 52.363 146.891 c 52.535 146.891
 52.68 146.949 52.793 147.062 c 52.793 147.121 52.793 147.18 52.793 147.234
 c 52.793 147.406 52.738 147.523 52.621 147.582 c 52.621 147.582 52.594 
147.582 52.535 147.582 c 52.422 147.582 52.363 147.551 52.363 147.492 c 
52.305 147.434 52.273 147.402 52.273 147.402 c 52.273 147.289 52.332 147.203
 52.445 147.145 c 52.504 147.145 52.562 147.117 52.617 147.055 c 52.559 
146.996 52.473 146.969 52.359 146.969 c 52.242 146.969 52.156 147.023 52.098
 147.141 c 52.039 147.199 51.984 147.398 51.926 147.742 c 51.84 148.344 
l 52.27 148.344 l 52.383 148.344 52.441 148.371 52.441 148.43 c 52.441 148.488
 52.41 148.52 52.352 148.52 c 51.746 148.52 l f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
92.93 123.707 m 88.617 123.707 l 88.457 123.707 88.375 123.664 88.375 123.578
 c 88.375 123.496 88.457 123.453 88.617 123.453 c 92.93 123.453 l 93.094
 123.453 93.176 123.496 93.176 123.578 c 93.176 123.664 93.094 123.707 92.93
 123.707 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
100.355 114.797 m 99.859 117.266 l 100.105 116.934 100.391 116.77 100.719
 116.77 c 101.129 116.77 101.414 116.934 101.578 117.266 c 101.738 117.512
 101.82 117.758 101.82 118.008 c 101.82 118.578 101.617 119.113 101.207 
119.605 c 100.797 120.016 100.387 120.262 99.977 120.348 c 99.977 120.348
 99.934 120.348 99.852 120.348 c 99.52 120.348 99.234 120.141 98.992 119.734
 c 98.906 119.57 98.867 119.363 98.867 119.117 c 98.867 118.871 98.906 118.586
 98.992 118.258 c 99.605 115.672 l 99.691 115.426 99.734 115.262 99.734 
115.176 c 99.734 115.176 99.691 115.133 99.605 115.051 c 99.605 115.051 
99.523 115.051 99.363 115.051 c 99.277 115.051 99.195 115.051 99.117 115.051
 c 99.117 114.887 99.199 114.805 99.363 114.805 c 100.223 114.805 l 100.305
 114.805 100.348 114.805 100.348 114.805 c 99.605 117.762 m 99.48 118.504
 l 99.395 118.832 99.355 119.121 99.355 119.363 c 99.355 119.773 99.477 
120.02 99.727 120.102 c 99.809 120.102 99.852 120.102 99.852 120.102 c 100.184
 120.102 100.43 119.938 100.594 119.605 c 100.676 119.523 100.758 119.441
 100.836 119.363 c 100.922 119.031 101.043 118.621 101.207 118.133 c 101.207
 117.969 101.207 117.805 101.207 117.637 c 101.207 117.227 101.082 116.98
 100.836 116.895 c 100.754 116.895 100.711 116.895 100.711 116.895 c 100.379
 116.895 100.051 117.102 99.727 117.508 c 99.727 117.594 99.684 117.676 
99.598 117.754 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
96.152 123.426 8.102 0.312 re f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
99.723 129.602 m 99.477 130.957 l 96.523 130.957 l 96.523 130.793 96.562
 130.715 96.648 130.715 c 98.129 128.988 l 98.703 128.328 98.988 127.754
 98.988 127.262 c 98.988 126.766 98.824 126.395 98.492 126.148 c 98.328 
125.984 98.125 125.906 97.879 125.906 c 97.547 125.906 97.262 126.07 97.02
 126.402 c 96.934 126.484 96.891 126.609 96.891 126.773 c 96.891 126.773
 96.934 126.773 97.02 126.773 c 97.18 126.773 97.305 126.852 97.391 127.016
 c 97.391 127.102 97.391 127.141 97.391 127.141 c 97.391 127.391 97.266 
127.512 97.02 127.512 c 97.02 127.598 97.02 127.641 97.02 127.641 c 96.77
 127.641 96.605 127.559 96.523 127.395 c 96.523 127.309 96.523 127.23 96.523
 127.148 c 96.523 126.738 96.688 126.41 97.02 126.164 c 97.266 125.832 97.594
 125.668 98.004 125.668 c 98.578 125.668 99.027 125.875 99.359 126.281 c
 99.523 126.531 99.645 126.816 99.73 127.141 c 99.73 127.141 99.73 127.184
 99.73 127.27 c 99.73 127.598 99.566 127.969 99.234 128.379 c 99.07 128.543
 98.824 128.746 98.492 128.996 c 98.121 129.492 l 97.996 129.492 l 97.137
 130.352 l 98.617 130.352 l 99.027 130.352 99.277 130.352 99.359 130.352
 c 99.359 130.266 99.402 130.02 99.484 129.609 c 99.73 129.609 l f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
103.047 128 m 103.047 127.84 103.129 127.715 103.293 127.633 c 103.293 
127.633 103.336 127.633 103.418 127.633 c 103.504 127.633 103.547 127.711
 103.547 127.875 c 103.547 127.875 103.547 127.957 103.547 128.121 c 103.301
 129.23 l 103.215 129.562 103.137 129.809 103.055 129.973 c 102.973 130.219
 102.93 130.383 102.93 130.469 c 102.93 130.715 103.012 130.84 103.176 130.84
 c 103.422 130.84 103.586 130.633 103.672 130.223 c 103.754 130.141 103.797
 130.016 103.797 129.855 c 103.883 129.77 103.922 129.727 103.922 129.727
 c 104.008 129.727 104.051 129.77 104.051 129.855 c 104.051 129.938 104.008
 130.102 103.922 130.344 c 103.84 130.426 103.797 130.508 103.797 130.586
 c 103.633 130.918 103.43 131.082 103.184 131.082 c 102.938 131.082 102.73
 130.961 102.566 130.715 c 102.566 130.629 102.527 130.547 102.441 130.469
 c 102.117 130.879 101.789 131.082 101.457 131.082 c 101.047 131.082 100.762
 130.879 100.598 130.469 c 100.512 130.305 100.473 130.059 100.473 129.727
 c 100.473 129.234 100.637 128.738 100.969 128.246 c 101.379 127.75 101.789
 127.504 102.199 127.504 c 102.281 127.504 102.324 127.504 102.324 127.504
 c 102.656 127.504 102.902 127.672 103.062 128 c 102.566 129.973 m 102.938
 128.488 l 102.938 128.406 102.938 128.363 102.938 128.363 c 102.938 128.199
 102.895 128.035 102.812 127.867 c 102.727 127.703 102.562 127.621 102.316
 127.621 c 102.07 127.621 101.82 127.789 101.574 128.121 c 101.492 128.203
 101.449 128.285 101.449 128.363 c 101.285 128.695 101.121 129.148 100.953
 129.719 c 100.953 129.883 100.953 130.008 100.953 130.09 c 100.953 130.5
 101.074 130.746 101.324 130.832 c 101.324 130.832 101.363 130.832 101.449
 130.832 c 101.781 130.832 102.066 130.664 102.309 130.336 c 102.391 130.25
 102.473 130.168 102.551 130.09 c 102.551 130.008 102.551 129.965 102.551
 129.965 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
66.172 105.816 m 65.926 106.801 l 65.844 107.211 65.801 107.457 65.801 
107.539 c 65.801 107.789 65.883 107.953 66.047 108.039 c 66.129 108.039 
66.211 108.039 66.289 108.039 c 66.535 108.039 66.742 107.914 66.906 107.668
 c 67.066 107.504 67.191 107.301 67.273 107.051 c 67.273 106.969 67.316 
106.926 67.402 106.926 c 67.484 106.926 67.527 106.969 67.527 107.051 c 
67.527 107.137 67.445 107.301 67.281 107.539 c 66.953 108.035 66.625 108.281
 66.297 108.281 c 65.887 108.281 65.602 108.117 65.438 107.785 c 65.438 
107.699 65.438 107.66 65.438 107.66 c 65.277 107.906 65.07 108.07 64.824
 108.156 c 64.738 108.238 64.656 108.281 64.578 108.281 c 64.246 108.281
 64 108.16 63.84 107.91 c 63.84 107.91 63.84 107.828 63.84 107.668 c 63.84
 107.504 63.918 107.379 64.082 107.297 c 64.168 107.297 64.207 107.297 64.207
 107.297 c 64.371 107.297 64.496 107.34 64.578 107.422 c 64.578 107.508 
64.578 107.547 64.578 107.547 c 64.578 107.711 64.496 107.836 64.336 107.918
 c 64.25 107.918 64.207 107.918 64.207 107.918 c 64.293 108.004 64.418 108.047
 64.578 108.047 c 64.824 108.047 65.031 107.879 65.195 107.547 c 65.277 
107.465 65.32 107.383 65.32 107.305 c 65.566 106.238 65.691 105.582 65.691
 105.332 c 65.691 105.004 65.566 104.836 65.32 104.836 c 65.074 104.836 
64.824 105.004 64.578 105.332 c 64.496 105.418 64.414 105.543 64.336 105.703
 c 64.336 105.703 64.336 105.746 64.336 105.832 c 64.207 105.957 l 64.125
 105.957 64.082 105.957 64.082 105.957 c 64.082 105.793 64.164 105.59 64.328
 105.34 c 64.574 104.934 64.902 104.727 65.312 104.727 c 65.723 104.727 
66.008 104.934 66.172 105.34 c 66.336 105.012 66.539 104.805 66.785 104.727
 c 66.871 104.727 66.953 104.727 67.031 104.727 c 67.363 104.727 67.566 
104.809 67.645 104.973 c 67.73 105.055 67.773 105.137 67.773 105.215 c 67.773
 105.461 67.648 105.586 67.402 105.586 c 67.402 105.672 67.359 105.711 67.273
 105.711 c 67.113 105.711 67.031 105.629 67.031 105.469 c 67.031 105.469
 67.031 105.426 67.031 105.34 c 67.031 105.18 67.113 105.055 67.273 104.973
 c 67.273 104.973 67.316 104.973 67.402 104.973 c 67.316 104.887 67.195 
104.844 67.031 104.844 c 66.621 104.844 66.375 105.133 66.289 105.703 c 
66.207 105.703 66.164 105.746 66.164 105.832 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
69.727 105.801 m 69.727 108.902 l 69.727 109.016 69.758 109.074 69.816 
109.074 c 69.875 109.133 70.02 109.16 70.246 109.16 c 70.418 109.16 l 70.418
 109.332 l 70.305 109.332 69.988 109.332 69.469 109.332 c 69.008 109.332
 68.723 109.332 68.609 109.332 c 68.609 109.16 l 68.777 109.16 l 69.066 
109.16 69.238 109.133 69.297 109.074 c 69.297 109.016 69.297 108.957 69.297
 108.902 c 69.297 106.055 l 69.125 106.113 68.895 106.145 68.609 106.145
 c 68.609 105.973 l 69.008 105.973 69.324 105.855 69.559 105.625 c 69.672
 105.625 69.727 105.652 69.727 105.715 c 69.727 105.715 69.727 105.742 69.727
 105.801 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
132.91 105.289 m 132.664 106.273 l 132.582 106.684 132.539 106.93 132.539
 107.016 c 132.539 107.262 132.621 107.43 132.785 107.512 c 132.867 107.512
 132.949 107.512 133.027 107.512 c 133.277 107.512 133.48 107.387 133.645
 107.141 c 133.805 106.98 133.93 106.773 134.016 106.527 c 134.016 106.441
 134.055 106.402 134.141 106.402 c 134.223 106.402 134.266 106.441 134.266
 106.527 c 134.266 106.609 134.184 106.773 134.023 107.016 c 133.691 107.508
 133.363 107.758 133.035 107.758 c 132.625 107.758 132.34 107.59 132.176
 107.258 c 132.176 107.176 132.176 107.133 132.176 107.133 c 132.016 107.379
 131.809 107.547 131.562 107.629 c 131.477 107.715 131.398 107.758 131.316
 107.758 c 130.988 107.758 130.738 107.633 130.578 107.387 c 130.578 107.387
 130.578 107.305 130.578 107.141 c 130.578 106.98 130.66 106.855 130.82 
106.77 c 130.906 106.77 130.949 106.77 130.949 106.77 c 131.109 106.77 131.234
 106.812 131.316 106.898 c 131.316 106.98 131.316 107.023 131.316 107.023
 c 131.316 107.188 131.238 107.309 131.074 107.395 c 130.988 107.395 130.949
 107.395 130.949 107.395 c 131.031 107.477 131.156 107.52 131.316 107.52
 c 131.566 107.52 131.77 107.355 131.934 107.023 c 132.016 106.938 132.059
 106.859 132.059 106.777 c 132.305 105.711 132.43 105.055 132.43 104.809
 c 132.43 104.477 132.305 104.312 132.059 104.312 c 131.812 104.312 131.566
 104.477 131.316 104.809 c 131.234 104.891 131.152 105.016 131.074 105.18
 c 131.074 105.18 131.074 105.223 131.074 105.305 c 130.949 105.43 l 130.863
 105.43 130.82 105.43 130.82 105.43 c 130.82 105.27 130.902 105.062 131.066
 104.816 c 131.312 104.406 131.641 104.203 132.051 104.203 c 132.461 104.203
 132.746 104.406 132.91 104.816 c 133.074 104.484 133.277 104.281 133.523
 104.203 c 133.609 104.203 133.691 104.203 133.77 104.203 c 134.102 104.203
 134.305 104.281 134.383 104.445 c 134.469 104.531 134.512 104.609 134.512
 104.691 c 134.512 104.938 134.387 105.059 134.141 105.059 c 134.141 105.145
 134.098 105.188 134.016 105.188 c 133.852 105.188 133.77 105.105 133.77
 104.941 c 133.77 104.941 133.77 104.898 133.77 104.816 c 133.77 104.652
 133.852 104.531 134.016 104.445 c 134.016 104.445 134.055 104.445 134.141
 104.445 c 134.055 104.363 133.934 104.32 133.77 104.32 c 133.359 104.32
 133.113 104.605 133.027 105.18 c 132.945 105.18 132.902 105.223 132.902
 105.305 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
137.328 107.863 m 137.156 108.812 l 135.086 108.812 l 135.086 108.699 135.117
 108.641 135.176 108.641 c 136.215 107.434 l 136.613 106.973 136.816 106.57
 136.816 106.227 c 136.816 105.879 136.699 105.621 136.469 105.445 c 136.352
 105.332 136.211 105.277 136.035 105.277 c 135.805 105.277 135.605 105.391
 135.434 105.625 c 135.375 105.684 135.348 105.77 135.348 105.883 c 135.348
 105.883 135.375 105.883 135.434 105.883 c 135.551 105.883 135.637 105.941
 135.695 106.055 c 135.695 106.113 135.695 106.141 135.695 106.141 c 135.695
 106.316 135.609 106.402 135.434 106.402 c 135.434 106.461 135.434 106.488
 135.434 106.488 c 135.262 106.488 135.148 106.434 135.086 106.32 c 135.086
 106.258 135.086 106.203 135.086 106.148 c 135.086 105.859 135.203 105.629
 135.434 105.457 c 135.609 105.227 135.84 105.109 136.125 105.109 c 136.527
 105.109 136.844 105.254 137.074 105.539 c 137.188 105.715 137.273 105.914
 137.332 106.141 c 137.332 106.141 137.332 106.172 137.332 106.23 c 137.332
 106.461 137.219 106.723 136.984 107.008 c 136.871 107.121 136.699 107.266
 136.469 107.438 c 136.207 107.785 l 136.121 107.785 l 135.52 108.387 l 
136.555 108.387 l 136.844 108.387 137.016 108.387 137.074 108.387 c 137.074
 108.328 137.105 108.156 137.164 107.867 c 137.332 107.867 l f
  Q
Q
Q Q
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 3380 1559 V 378 1659 4 100 v 659 1659 V
1032 1629 a(2)j(r)o(acines)h(:)i Fj(x)1436 1641 y Fe(1)1489
1629 y Fp(et)f Fj(x)1614 1641 y Fe(2)p 2019 1659 V 2392
1629 a Fp(2)f(r)o(acines)g(:)h Fj(x)2796 1641 y Fe(1)2849
1629 y Fp(et)h Fj(x)2975 1641 y Fe(2)p 3380 1659 V 378
1662 3006 4 v 378 2799 4 1137 v 431 2769 a Fk(\242)15
b Fg(\306)f Fp(0)p 659 2799 V 103 w @beginspecial 0 @llx
0 @lly 177 @urx 158 @ury 1488 @rwi @setspecial
%%BeginDocument: C:/laragon/www/newmc/assets/imgsvg/parabole-2-1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.15.12 (http://cairographics.org)
%%CreationDate: Thu Aug 12 17:21:47 2021
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 177 158
%%EndComments
%%BeginProlog
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 177 158
%%EndPageSetup
q 0 0 177 158 rectclip
1 0 0 -1 0 158 cm q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 1.051 m 20.023 157.125 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.527 m 18.445 2.102 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.527 m 21.598 2.102 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
0 112.312 m 175.52 112.312 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 112.312 m 174.469 110.734 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 112.312 m 174.469 113.887 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
0.788255 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
44.141 -4.766 m 44.832 -1.895 l 45.523 0.945 l 46.211 3.746 l 46.902 6.512
 l 47.59 9.242 l 48.281 11.934 l 48.969 14.594 l 49.66 17.219 l 51.039 22.355
 l 52.418 27.352 l 53.801 32.207 l 55.18 36.918 l 56.555 41.484 l 57.938
 45.91 l 59.32 50.191 l 60.695 54.332 l 62.074 58.328 l 63.453 62.184 l 
64.836 65.895 l 66.215 69.465 l 67.59 72.891 l 68.973 76.172 l 70.355 79.316
 l 71.73 82.312 l 73.109 85.164 l 74.488 87.875 l 75.871 90.445 l 77.25 
92.875 l 78.625 95.16 l 80.008 97.305 l 81.391 99.301 l 82.766 101.156 l
 84.145 102.871 l 85.527 104.441 l 86.906 105.871 l 88.285 107.152 l 89.66
 108.297 l 91.043 109.297 l 92.426 110.152 l 93.801 110.867 l 95.18 111.441
 l 96.562 111.867 l 97.941 112.156 l 99.32 112.297 l 100.695 112.297 l 102.078
 112.156 l 103.461 111.871 l 104.84 111.441 l 106.215 110.871 l 107.598 
110.156 l 108.98 109.301 l 110.355 108.305 l 111.734 107.164 l 113.113 105.879
 l 114.496 104.449 l 115.875 102.887 l 117.25 101.172 l 118.633 99.316 l
 120.016 97.32 l 121.391 95.176 l 122.77 92.895 l 124.148 90.469 l 125.531
 87.898 l 126.91 85.191 l 128.285 82.332 l 129.668 79.336 l 131.051 76.199
 l 132.426 72.914 l 133.805 69.488 l 135.188 65.922 l 136.566 62.211 l 137.945
 58.359 l 139.32 54.367 l 140.703 50.227 l 142.086 45.945 l 143.461 41.52
 l 144.84 36.953 l 146.223 32.242 l 147.602 27.391 l 148.98 22.395 l 150.355
 17.258 l 151.051 14.637 l 151.738 11.977 l 152.426 9.285 l 153.121 6.555
 l 153.809 3.789 l 154.496 0.988 l 155.188 -1.848 l 155.875 -4.719 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.266667 g
100.539 112.312 m 100.539 112.605 100.309 112.836 100.016 112.836 c 99.727
 112.836 99.488 112.605 99.488 112.312 c 99.488 112.023 99.727 111.785 100.016
 111.785 c 100.309 111.785 100.539 112.023 100.539 112.312 c f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
100.539 112.312 m 100.539 112.605 100.309 112.836 100.016 112.836 c 99.727
 112.836 99.488 112.605 99.488 112.312 c 99.488 112.023 99.727 111.785 100.016
 111.785 c 100.309 111.785 100.539 112.023 100.539 112.312 c h
100.539 112.312 m S Q
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
39.672 4.691 m 39.172 6.664 l 39.09 6.746 39.047 6.789 39.047 6.789 c 38.922
 6.789 l 38.836 6.789 38.797 6.746 38.797 6.664 c 38.922 6.293 l 38.922 
5.637 38.715 5.184 38.305 4.938 c 38.059 4.852 37.812 4.812 37.566 4.812
 c 37.07 4.812 36.578 5.016 36.082 5.426 c 35.922 5.512 35.797 5.633 35.715
 5.797 c 35.219 6.367 34.891 7.109 34.727 8.012 c 34.727 8.176 34.727 8.297
 34.727 8.383 c 34.727 9.121 35.016 9.617 35.586 9.863 c 35.75 9.949 35.996
 9.988 36.328 9.988 c 36.82 9.988 37.273 9.824 37.684 9.492 c 38.094 9.168
 38.379 8.758 38.543 8.262 c 38.543 8.18 38.586 8.137 38.668 8.137 c 38.668
 8.137 38.668 8.18 38.668 8.262 c 38.668 8.348 38.629 8.512 38.543 8.762
 c 38.379 9.09 38.133 9.379 37.801 9.621 c 37.309 10.027 36.773 10.234 36.203
 10.234 c 35.461 10.234 34.887 10.027 34.477 9.621 c 34.145 9.211 33.98 
8.715 33.98 8.137 c 33.98 7.316 34.266 6.578 34.84 5.922 c 35.41 5.266 36.027
 4.855 36.684 4.691 c 37.016 4.609 37.301 4.566 37.543 4.566 c 38.113 4.566
 38.523 4.812 38.773 5.309 c 39.387 4.691 l 39.469 4.609 39.512 4.566 39.512
 4.566 c 39.598 4.566 39.641 4.609 39.641 4.691 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
41.246 9.059 m 40.988 10.867 l 40.93 11.102 40.844 11.359 40.727 11.645
 c 40.727 11.762 40.699 11.848 40.641 11.906 c 40.527 12.191 40.352 12.363
 40.121 12.426 c 40.121 12.426 40.09 12.426 40.031 12.426 c 39.859 12.426
 39.715 12.367 39.602 12.254 c 39.543 12.195 39.516 12.137 39.516 12.082
 c 39.516 11.91 39.602 11.797 39.773 11.738 c 39.773 11.738 39.801 11.738
 39.863 11.738 c 39.977 11.738 40.031 11.77 40.031 11.828 c 40.031 11.887
 40.031 11.918 40.031 11.918 c 40.031 12.031 39.977 12.117 39.863 12.176
 c 39.863 12.176 39.832 12.207 39.773 12.266 c 39.832 12.324 39.918 12.352
 40.031 12.352 c 40.207 12.352 40.32 12.152 40.379 11.75 c 40.438 11.691
 40.469 11.605 40.469 11.492 c 40.469 11.32 l 40.898 9.082 l 40.559 9.082
 l 40.441 9.082 40.387 9.082 40.387 9.082 c 40.387 9.02 40.414 8.965 40.473
 8.91 c 40.992 8.91 l 41.051 8.449 41.109 8.164 41.164 8.047 c 41.277 7.703
 41.449 7.504 41.684 7.445 c 41.742 7.445 41.797 7.445 41.852 7.445 c 42.027
 7.445 42.168 7.504 42.285 7.617 c 42.285 7.676 42.285 7.734 42.285 7.789
 c 42.285 7.961 42.227 8.078 42.113 8.137 c 42.113 8.137 42.082 8.137 42.023
 8.137 c 41.91 8.137 41.852 8.105 41.852 8.047 c 41.793 7.988 41.766 7.961
 41.766 7.961 c 41.766 7.848 41.82 7.758 41.938 7.699 c 41.996 7.699 42.051
 7.672 42.105 7.613 c 42.047 7.555 41.961 7.523 41.848 7.523 c 41.734 7.523
 41.648 7.582 41.59 7.695 c 41.531 7.754 41.473 7.953 41.418 8.297 c 41.328
 8.898 l 41.758 8.898 l 41.875 8.898 41.93 8.926 41.93 8.988 c 41.93 9.047
 41.902 9.074 41.844 9.074 c 41.234 9.074 l f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
85.613 123.547 m 85.371 124.535 l 85.285 124.945 85.246 125.191 85.246 
125.273 c 85.246 125.523 85.324 125.688 85.488 125.77 c 85.574 125.77 85.656
 125.77 85.734 125.77 c 85.98 125.77 86.184 125.648 86.348 125.402 c 86.512
 125.238 86.633 125.031 86.719 124.785 c 86.719 124.703 86.762 124.66 86.844
 124.66 c 86.93 124.66 86.973 124.703 86.973 124.785 c 86.973 124.871 86.891
 125.031 86.727 125.273 c 86.395 125.77 86.066 126.016 85.742 126.016 c 
85.332 126.016 85.043 125.852 84.883 125.52 c 84.883 125.434 84.883 125.395
 84.883 125.395 c 84.719 125.641 84.516 125.805 84.266 125.891 c 84.184 
125.973 84.102 126.016 84.023 126.016 c 83.691 126.016 83.445 125.891 83.281
 125.645 c 83.281 125.645 83.281 125.562 83.281 125.402 c 83.281 125.238
 83.363 125.113 83.527 125.031 c 83.609 125.031 83.652 125.031 83.652 125.031
 c 83.816 125.031 83.938 125.074 84.023 125.156 c 84.023 125.242 84.023 
125.281 84.023 125.281 c 84.023 125.445 83.941 125.57 83.777 125.652 c 83.695
 125.652 83.652 125.652 83.652 125.652 c 83.738 125.738 83.859 125.777 84.023
 125.777 c 84.27 125.777 84.477 125.613 84.637 125.281 c 84.723 125.199 
84.766 125.117 84.766 125.039 c 85.012 123.973 85.133 123.316 85.133 123.066
 c 85.133 122.738 85.012 122.57 84.766 122.57 c 84.516 122.57 84.27 122.738
 84.023 123.066 c 83.938 123.152 83.855 123.273 83.777 123.438 c 83.777 
123.438 83.777 123.48 83.777 123.562 c 83.652 123.691 l 83.566 123.691 83.527
 123.691 83.527 123.691 c 83.527 123.527 83.609 123.324 83.77 123.074 c 
84.016 122.664 84.348 122.461 84.754 122.461 c 85.164 122.461 85.453 122.664
 85.613 123.074 c 85.777 122.746 85.984 122.539 86.23 122.461 c 86.312 122.461
 86.395 122.461 86.473 122.461 c 86.805 122.461 87.012 122.543 87.09 122.703
 c 87.172 122.789 87.215 122.871 87.215 122.949 c 87.215 123.195 87.09 123.32
 86.844 123.32 c 86.844 123.402 86.801 123.445 86.719 123.445 c 86.555 123.445
 86.473 123.363 86.473 123.203 c 86.473 123.203 86.473 123.16 86.473 123.074
 c 86.473 122.914 86.555 122.789 86.719 122.703 c 86.719 122.703 86.762 
122.703 86.844 122.703 c 86.762 122.621 86.637 122.578 86.473 122.578 c 
86.062 122.578 85.816 122.867 85.734 123.438 c 85.648 123.438 85.605 123.48
 85.605 123.562 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
90.031 125.344 m 90.031 125.863 89.977 126.266 89.863 126.555 c 89.629 
126.953 89.312 127.156 88.914 127.156 c 88.566 127.156 88.309 127.039 88.133
 126.809 c 88.074 126.75 88.02 126.691 87.965 126.637 c 87.789 126.348 87.703
 125.918 87.703 125.344 c 87.703 124.77 87.789 124.34 87.965 124.055 c 88.137
 123.652 88.422 123.422 88.824 123.363 c 88.914 123.363 l 89.258 123.363
 89.52 123.508 89.691 123.793 c 89.75 123.852 89.805 123.941 89.863 124.055
 c 89.977 124.34 90.031 124.77 90.031 125.344 c 88.914 127.07 m 89.145 127.07
 89.316 126.957 89.43 126.723 c 89.488 126.609 89.52 126.496 89.52 126.375
 c 89.578 126.145 89.609 125.773 89.609 125.258 c 89.609 124.738 89.578 
124.363 89.52 124.137 c 89.461 123.789 89.316 123.59 89.09 123.535 c 89.031
 123.535 88.973 123.535 88.918 123.535 c 88.633 123.535 88.43 123.652 88.316
 123.883 c 88.316 123.996 88.289 124.113 88.227 124.23 c 88.227 124.402 
88.227 124.746 88.227 125.262 c 88.227 125.781 88.258 126.152 88.316 126.383
 c 88.375 126.727 88.52 126.957 88.746 127.07 c 88.805 127.07 88.863 127.07
 88.918 127.07 c f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
97.906 123.305 m 93.223 123.305 l 93.062 123.305 92.98 123.262 92.98 123.18
 c 92.98 123.094 93.062 123.051 93.223 123.051 c 97.906 123.051 l 98.07 
123.051 98.152 123.094 98.152 123.18 c 98.152 123.262 98.07 123.305 97.906
 123.305 c 97.906 124.785 m 93.223 124.785 l 93.062 124.785 92.98 124.742
 92.98 124.66 c 92.98 124.574 93.062 124.535 93.223 124.535 c 97.906 124.535
 l 98.07 124.535 98.152 124.574 98.152 124.66 c 98.152 124.742 98.07 124.785
 97.906 124.785 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
105.973 124.047 m 101.66 124.047 l 101.5 124.047 101.418 124.004 101.418
 123.918 c 101.418 123.836 101.5 123.793 101.66 123.793 c 105.973 123.793
 l 106.137 123.793 106.219 123.836 106.219 123.918 c 106.219 124.004 106.137
 124.047 105.973 124.047 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
113.402 115.137 m 112.906 117.605 l 113.152 117.273 113.441 117.109 113.766
 117.109 c 114.176 117.109 114.461 117.273 114.625 117.605 c 114.789 117.852
 114.871 118.098 114.871 118.348 c 114.871 118.918 114.664 119.453 114.254
 119.945 c 113.844 120.355 113.434 120.602 113.023 120.688 c 113.023 120.688
 112.984 120.688 112.898 120.688 c 112.566 120.688 112.281 120.48 112.039
 120.07 c 111.957 119.91 111.914 119.703 111.914 119.457 c 111.914 119.211
 111.957 118.926 112.039 118.598 c 112.656 116.012 l 112.738 115.766 112.781
 115.602 112.781 115.516 c 112.781 115.516 112.738 115.473 112.656 115.391
 c 112.656 115.391 112.574 115.391 112.41 115.391 c 112.328 115.391 112.246
 115.391 112.168 115.391 c 112.168 115.227 112.246 115.145 112.41 115.145
 c 113.27 115.145 l 113.355 115.145 113.395 115.145 113.395 115.145 c 112.656
 118.102 m 112.527 118.844 l 112.445 119.172 112.402 119.461 112.402 119.703
 c 112.402 120.113 112.527 120.359 112.773 120.441 c 112.855 120.441 112.898
 120.441 112.898 120.441 c 113.23 120.441 113.477 120.277 113.641 119.945
 c 113.723 119.863 113.805 119.781 113.883 119.703 c 113.969 119.371 114.094
 118.961 114.254 118.473 c 114.254 118.309 114.254 118.145 114.254 117.977
 c 114.254 117.566 114.133 117.32 113.883 117.234 c 113.801 117.234 113.758
 117.234 113.758 117.234 c 113.426 117.234 113.098 117.441 112.773 117.848
 c 112.773 117.934 112.73 118.016 112.648 118.094 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
109.195 123.766 8.105 0.312 re f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
112.766 129.941 m 112.52 131.297 l 109.566 131.297 l 109.566 131.133 109.605
 131.051 109.691 131.051 c 111.172 129.328 l 111.746 128.668 112.031 128.094
 112.031 127.602 c 112.031 127.105 111.867 126.734 111.535 126.488 c 111.371
 126.324 111.168 126.246 110.922 126.246 c 110.59 126.246 110.305 126.41
 110.062 126.742 c 109.977 126.824 109.934 126.949 109.934 127.113 c 109.934
 127.113 109.977 127.113 110.062 127.113 c 110.223 127.113 110.348 127.191
 110.434 127.355 c 110.434 127.441 110.434 127.48 110.434 127.48 c 110.434
 127.73 110.309 127.852 110.062 127.852 c 110.062 127.938 110.062 127.977
 110.062 127.977 c 109.812 127.977 109.648 127.898 109.566 127.734 c 109.566
 127.648 109.566 127.57 109.566 127.488 c 109.566 127.078 109.73 126.75 
110.062 126.504 c 110.309 126.172 110.637 126.008 111.047 126.008 c 111.621
 126.008 112.07 126.211 112.402 126.621 c 112.566 126.871 112.688 127.156
 112.773 127.48 c 112.773 127.48 112.773 127.523 112.773 127.609 c 112.773
 127.938 112.609 128.309 112.277 128.719 c 112.113 128.883 111.867 129.086
 111.535 129.336 c 111.164 129.832 l 111.039 129.832 l 110.18 130.691 l 
111.66 130.691 l 112.07 130.691 112.32 130.691 112.402 130.691 c 112.402
 130.605 112.445 130.359 112.527 129.949 c 112.773 129.949 l f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
116.09 128.34 m 116.09 128.18 116.172 128.055 116.336 127.969 c 116.336
 127.969 116.379 127.969 116.461 127.969 c 116.547 127.969 116.59 128.051
 116.59 128.215 c 116.59 128.215 116.59 128.297 116.59 128.461 c 116.344
 129.57 l 116.258 129.902 116.18 130.148 116.098 130.312 c 116.016 130.559
 115.973 130.723 115.973 130.809 c 115.973 131.055 116.055 131.18 116.219
 131.18 c 116.465 131.18 116.629 130.973 116.715 130.562 c 116.797 130.48
 116.84 130.355 116.84 130.195 c 116.926 130.109 116.965 130.066 116.965
 130.066 c 117.051 130.066 117.094 130.109 117.094 130.195 c 117.094 130.277
 117.051 130.441 116.965 130.684 c 116.883 130.766 116.84 130.848 116.84
 130.926 c 116.676 131.258 116.473 131.422 116.227 131.422 c 115.98 131.422
 115.773 131.301 115.609 131.051 c 115.609 130.969 115.57 130.887 115.484
 130.809 c 115.16 131.219 114.832 131.422 114.5 131.422 c 114.09 131.422
 113.805 131.219 113.641 130.809 c 113.555 130.645 113.516 130.398 113.516
 130.066 c 113.516 129.574 113.68 129.078 114.012 128.586 c 114.422 128.09
 114.832 127.844 115.242 127.844 c 115.324 127.844 115.367 127.844 115.367
 127.844 c 115.699 127.844 115.945 128.012 116.105 128.34 c 115.609 130.312
 m 115.98 128.828 l 115.98 128.746 115.98 128.703 115.98 128.703 c 115.98
 128.539 115.938 128.375 115.855 128.207 c 115.77 128.043 115.605 127.961
 115.359 127.961 c 115.113 127.961 114.863 128.129 114.617 128.461 c 114.535
 128.543 114.492 128.625 114.492 128.703 c 114.328 129.035 114.164 129.488
 113.996 130.059 c 113.996 130.223 113.996 130.348 113.996 130.43 c 113.996
 130.84 114.117 131.086 114.367 131.172 c 114.367 131.172 114.406 131.172
 114.492 131.172 c 114.824 131.172 115.109 131.004 115.352 130.676 c 115.434
 130.59 115.516 130.508 115.594 130.43 c 115.594 130.348 115.594 130.305
 115.594 130.305 c f
  Q
Q
Q Q
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 2019 2799 V 1360 w @beginspecial 0 @llx
0 @lly 177 @urx 157 @ury 1488 @rwi @setspecial
%%BeginDocument: C:/laragon/www/newmc/assets/imgsvg/parabole-2-2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.15.12 (http://cairographics.org)
%%CreationDate: Thu Aug 12 17:24:01 2021
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 177 157
%%EndComments
%%BeginProlog
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 177 157
%%EndPageSetup
q 0 0 177 157 rectclip
1 0 0 -1 0 157 cm q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.711 m 20.023 156.785 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.188 m 18.445 1.762 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
20.023 0.188 m 21.598 1.762 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
0 111.973 m 175.52 111.973 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 111.973 m 174.469 110.395 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 111.973 m 174.469 113.547 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
0.788255 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
63.453 162.105 m 64.836 158.395 l 66.215 154.824 l 67.59 151.398 l 68.973
 148.113 l 70.355 144.973 l 71.73 141.977 l 73.109 139.117 l 74.488 136.406
 l 75.871 133.836 l 77.25 131.41 l 78.625 129.129 l 80.008 126.984 l 81.391
 124.988 l 82.766 123.133 l 84.145 121.418 l 85.527 119.848 l 86.906 118.418
 l 88.285 117.137 l 89.66 115.992 l 91.043 114.992 l 92.426 114.137 l 93.801
 113.422 l 95.18 112.848 l 96.562 112.422 l 97.941 112.133 l 99.32 111.992
 l 100.695 111.992 l 102.078 112.133 l 103.461 112.418 l 104.84 112.844 
l 106.215 113.414 l 107.598 114.129 l 108.98 114.98 l 110.355 115.98 l 111.734
 117.125 l 113.113 118.41 l 114.496 119.836 l 115.875 121.402 l 117.25 123.117
 l 118.633 124.973 l 120.016 126.969 l 121.391 129.109 l 122.77 131.395 
l 124.148 133.82 l 125.531 136.387 l 126.91 139.098 l 128.285 141.949 l 
129.668 144.953 l 131.051 148.09 l 132.426 151.375 l 133.805 154.793 l 135.188
 158.363 l 136.566 162.074 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0.266667 g
100.539 111.973 m 100.539 112.266 100.309 112.496 100.016 112.496 c 99.727
 112.496 99.488 112.266 99.488 111.973 c 99.488 111.684 99.727 111.445 100.016
 111.445 c 100.309 111.445 100.539 111.684 100.539 111.973 c f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
100.539 111.973 m 100.539 112.266 100.309 112.496 100.016 112.496 c 99.727
 112.496 99.488 112.266 99.488 111.973 c 99.488 111.684 99.727 111.445 100.016
 111.445 c 100.309 111.445 100.539 111.684 100.539 111.973 c h
100.539 111.973 m S Q
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
59.113 145.715 m 58.617 147.684 l 58.531 147.77 58.492 147.809 58.492 147.809
 c 58.363 147.809 l 58.281 147.809 58.238 147.77 58.238 147.684 c 58.363
 147.312 l 58.363 146.656 58.16 146.203 57.75 145.957 c 57.504 145.875 57.258
 145.832 57.008 145.832 c 56.516 145.832 56.02 146.035 55.527 146.445 c 
55.363 146.531 55.242 146.652 55.156 146.816 c 54.664 147.391 54.336 148.129
 54.172 149.031 c 54.172 149.195 54.172 149.32 54.172 149.402 c 54.172 150.145
 54.457 150.637 55.031 150.883 c 55.195 150.969 55.441 151.012 55.773 151.012
 c 56.266 151.012 56.719 150.844 57.129 150.516 c 57.539 150.188 57.824 
149.777 57.988 149.285 c 57.988 149.199 58.027 149.156 58.113 149.156 c 
58.113 149.156 58.113 149.199 58.113 149.285 c 58.113 149.367 58.07 149.535
 57.988 149.781 c 57.824 150.113 57.578 150.398 57.246 150.641 c 56.75 151.051
 56.219 151.254 55.645 151.254 c 54.906 151.254 54.328 151.051 53.918 150.641
 c 53.59 150.23 53.422 149.734 53.422 149.156 c 53.422 148.34 53.711 147.602
 54.281 146.941 c 54.855 146.285 55.469 145.875 56.125 145.715 c 56.457 
145.629 56.742 145.586 56.984 145.586 c 57.559 145.586 57.969 145.836 58.215
 146.328 c 58.832 145.715 l 58.914 145.629 58.957 145.586 58.957 145.586
 c 59.039 145.586 59.082 145.629 59.082 145.715 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
60.691 150.078 m 60.43 151.887 l 60.371 152.121 60.285 152.379 60.172 152.668
 c 60.172 152.781 60.141 152.867 60.082 152.926 c 59.969 153.215 59.797 
153.387 59.566 153.445 c 59.566 153.445 59.535 153.445 59.477 153.445 c 
59.305 153.445 59.16 153.387 59.047 153.273 c 58.988 153.215 58.957 153.156
 58.957 153.102 c 58.957 152.93 59.043 152.816 59.219 152.762 c 59.219 152.762
 59.246 152.762 59.305 152.762 c 59.418 152.762 59.477 152.789 59.477 152.848
 c 59.477 152.906 59.477 152.938 59.477 152.938 c 59.477 153.051 59.418 
153.137 59.305 153.195 c 59.305 153.195 59.277 153.227 59.219 153.285 c 
59.277 153.344 59.363 153.371 59.477 153.371 c 59.648 153.371 59.766 153.172
 59.824 152.77 c 59.883 152.711 59.914 152.625 59.914 152.512 c 59.914 152.34
 l 60.344 150.102 l 60 150.102 l 59.887 150.102 59.828 150.102 59.828 150.102
 c 59.828 150.043 59.859 149.984 59.918 149.93 c 60.438 149.93 l 60.496 
149.469 60.551 149.184 60.605 149.07 c 60.723 148.723 60.895 148.523 61.125
 148.469 c 61.184 148.469 61.242 148.469 61.297 148.469 c 61.469 148.469
 61.613 148.523 61.727 148.637 c 61.727 148.699 61.727 148.754 61.727 148.809
 c 61.727 148.984 61.672 149.098 61.555 149.156 c 61.555 149.156 61.527 
149.156 61.469 149.156 c 61.355 149.156 61.297 149.129 61.297 149.07 c 61.238
 149.012 61.207 148.98 61.207 148.98 c 61.207 148.867 61.266 148.781 61.379
 148.723 c 61.438 148.723 61.496 148.691 61.551 148.633 c 61.492 148.574
 61.406 148.543 61.293 148.543 c 61.176 148.543 61.09 148.602 61.031 148.715
 c 60.973 148.773 60.918 148.977 60.859 149.316 c 60.773 149.918 l 61.203
 149.918 l 61.316 149.918 61.375 149.949 61.375 150.008 c 61.375 150.066
 61.344 150.094 61.285 150.094 c 60.68 150.094 l f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
86.664 101.664 m 86.422 102.648 l 86.336 103.059 86.297 103.305 86.297 
103.391 c 86.297 103.637 86.379 103.801 86.539 103.887 c 86.625 103.887 
86.707 103.887 86.785 103.887 c 87.031 103.887 87.234 103.762 87.398 103.516
 c 87.562 103.352 87.684 103.148 87.77 102.902 c 87.77 102.816 87.812 102.773
 87.895 102.773 c 87.98 102.773 88.023 102.816 88.023 102.902 c 88.023 102.984
 87.941 103.148 87.777 103.391 c 87.445 103.883 87.117 104.129 86.793 104.129
 c 86.383 104.129 86.098 103.965 85.934 103.633 c 85.934 103.551 85.934 
103.508 85.934 103.508 c 85.77 103.754 85.566 103.922 85.316 104.004 c 85.234
 104.09 85.152 104.129 85.074 104.129 c 84.742 104.129 84.496 104.008 84.332
 103.762 c 84.332 103.762 84.332 103.68 84.332 103.516 c 84.332 103.352 
84.414 103.23 84.578 103.145 c 84.66 103.145 84.703 103.145 84.703 103.145
 c 84.867 103.145 84.988 103.188 85.074 103.27 c 85.074 103.355 85.074 103.398
 85.074 103.398 c 85.074 103.559 84.992 103.684 84.828 103.77 c 84.746 103.77
 84.703 103.77 84.703 103.77 c 84.789 103.852 84.91 103.895 85.074 103.895
 c 85.32 103.895 85.527 103.727 85.688 103.398 c 85.773 103.312 85.816 103.23
 85.816 103.152 c 86.062 102.086 86.184 101.43 86.184 101.184 c 86.184 100.852
 86.062 100.688 85.816 100.688 c 85.566 100.688 85.32 100.852 85.074 101.184
 c 84.988 101.266 84.91 101.391 84.828 101.555 c 84.828 101.555 84.828 101.594
 84.828 101.68 c 84.703 101.805 l 84.621 101.805 84.578 101.805 84.578 101.805
 c 84.578 101.641 84.66 101.438 84.82 101.191 c 85.07 100.781 85.398 100.574
 85.809 100.574 c 86.215 100.574 86.504 100.781 86.664 101.191 c 86.828 
100.859 87.035 100.652 87.281 100.574 c 87.363 100.574 87.445 100.574 87.523
 100.574 c 87.855 100.574 88.062 100.656 88.141 100.82 c 88.223 100.902 
88.266 100.984 88.266 101.062 c 88.266 101.312 88.145 101.434 87.895 101.434
 c 87.895 101.52 87.855 101.562 87.77 101.562 c 87.605 101.562 87.523 101.48
 87.523 101.316 c 87.523 101.316 87.523 101.273 87.523 101.191 c 87.523 
101.027 87.605 100.902 87.77 100.82 c 87.77 100.82 87.812 100.82 87.895 
100.82 c 87.812 100.734 87.688 100.695 87.523 100.695 c 87.117 100.695 86.867
 100.98 86.785 101.555 c 86.699 101.555 86.656 101.594 86.656 101.68 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
91.082 103.461 m 91.082 103.977 91.027 104.383 90.914 104.668 c 90.68 105.07
 90.363 105.27 89.965 105.27 c 89.617 105.27 89.359 105.152 89.184 104.922
 c 89.125 104.863 89.07 104.805 89.016 104.75 c 88.84 104.465 88.754 104.035
 88.754 103.461 c 88.754 102.887 88.84 102.457 89.016 102.168 c 89.188 101.766
 89.473 101.539 89.875 101.48 c 89.965 101.48 l 90.309 101.48 90.57 101.621
 90.742 101.91 c 90.801 101.969 90.859 102.055 90.914 102.168 c 91.027 102.457
 91.082 102.887 91.082 103.461 c 89.965 105.188 m 90.195 105.188 90.367 
105.07 90.48 104.84 c 90.543 104.727 90.57 104.609 90.57 104.492 c 90.629
 104.258 90.66 103.887 90.66 103.371 c 90.66 102.852 90.629 102.48 90.57
 102.25 c 90.512 101.906 90.367 101.703 90.141 101.648 c 90.082 101.648 
90.023 101.648 89.969 101.648 c 89.684 101.648 89.48 101.766 89.367 101.996
 c 89.367 102.113 89.34 102.227 89.281 102.344 c 89.281 102.52 89.281 102.863
 89.281 103.375 c 89.281 103.895 89.309 104.27 89.367 104.496 c 89.426 104.844
 89.57 105.074 89.797 105.188 c 89.855 105.188 89.914 105.188 89.969 105.188
 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
98.957 101.418 m 94.273 101.418 l 94.113 101.418 94.031 101.375 94.031 
101.293 c 94.031 101.207 94.113 101.168 94.273 101.168 c 98.957 101.168 
l 99.121 101.168 99.203 101.207 99.203 101.293 c 99.203 101.375 99.121 101.418
 98.957 101.418 c 98.957 102.902 m 94.273 102.902 l 94.113 102.902 94.031
 102.859 94.031 102.773 c 94.031 102.691 94.113 102.648 94.273 102.648 c
 98.957 102.648 l 99.121 102.648 99.203 102.691 99.203 102.773 c 99.203 
102.859 99.121 102.902 98.957 102.902 c f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
107.023 102.16 m 102.711 102.16 l 102.551 102.16 102.469 102.117 102.469
 102.035 c 102.469 101.949 102.551 101.906 102.711 101.906 c 107.023 101.906
 l 107.188 101.906 107.27 101.949 107.27 102.035 c 107.27 102.117 107.188
 102.16 107.023 102.16 c f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
114.453 93.254 m 113.957 95.719 l 114.203 95.387 114.492 95.223 114.816
 95.223 c 115.227 95.223 115.512 95.387 115.676 95.719 c 115.84 95.965 115.922
 96.215 115.922 96.461 c 115.922 97.035 115.715 97.566 115.305 98.062 c 
114.895 98.469 114.484 98.719 114.078 98.801 c 114.078 98.801 114.035 98.801
 113.949 98.801 c 113.617 98.801 113.332 98.598 113.09 98.188 c 113.008 
98.023 112.965 97.82 112.965 97.57 c 112.965 97.324 113.008 97.039 113.09
 96.711 c 113.707 94.129 l 113.789 93.879 113.832 93.715 113.832 93.629 
c 113.832 93.629 113.789 93.59 113.707 93.504 c 113.707 93.504 113.625 93.504
 113.461 93.504 c 113.379 93.504 113.297 93.504 113.219 93.504 c 113.219
 93.34 113.297 93.262 113.461 93.262 c 114.32 93.262 l 114.406 93.262 114.445
 93.262 114.445 93.262 c 113.707 96.215 m 113.578 96.957 l 113.496 97.289
 113.453 97.574 113.453 97.816 c 113.453 98.227 113.578 98.473 113.824 98.559
 c 113.906 98.559 113.949 98.559 113.949 98.559 c 114.281 98.559 114.527
 98.391 114.691 98.062 c 114.773 97.977 114.855 97.895 114.934 97.816 c 
115.02 97.484 115.145 97.074 115.305 96.586 c 115.305 96.426 115.305 96.258
 115.305 96.09 c 115.305 95.68 115.184 95.434 114.934 95.348 c 114.852 95.348
 114.809 95.348 114.809 95.348 c 114.477 95.348 114.148 95.555 113.824 95.965
 c 113.824 96.047 113.781 96.129 113.699 96.207 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
110.246 101.883 8.109 0.312 re f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
113.816 108.055 m 113.57 109.41 l 110.617 109.41 l 110.617 109.25 110.656
 109.168 110.742 109.168 c 112.223 107.441 l 112.797 106.785 113.082 106.207
 113.082 105.715 c 113.082 105.223 112.918 104.852 112.586 104.602 c 112.422
 104.441 112.219 104.359 111.973 104.359 c 111.641 104.359 111.355 104.523
 111.113 104.855 c 111.027 104.941 110.984 105.062 110.984 105.227 c 110.984
 105.227 111.027 105.227 111.113 105.227 c 111.273 105.227 111.398 105.309
 111.484 105.469 c 111.484 105.555 111.484 105.598 111.484 105.598 c 111.484
 105.844 111.359 105.969 111.113 105.969 c 111.113 106.051 111.113 106.094
 111.113 106.094 c 110.867 106.094 110.699 106.012 110.617 105.848 c 110.617
 105.766 110.617 105.684 110.617 105.605 c 110.617 105.195 110.781 104.867
 111.113 104.617 c 111.359 104.289 111.688 104.121 112.098 104.121 c 112.672
 104.121 113.121 104.328 113.453 104.738 c 113.617 104.984 113.738 105.27
 113.824 105.598 c 113.824 105.598 113.824 105.637 113.824 105.723 c 113.824
 106.055 113.66 106.426 113.328 106.836 c 113.164 106.996 112.918 107.203
 112.586 107.449 c 112.215 107.945 l 112.09 107.945 l 111.23 108.805 l 112.711
 108.805 l 113.121 108.805 113.371 108.805 113.453 108.805 c 113.453 108.719
 113.496 108.473 113.578 108.062 c 113.824 108.062 l f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
117.145 106.457 m 117.145 106.293 117.223 106.168 117.387 106.086 c 117.387
 106.086 117.43 106.086 117.512 106.086 c 117.598 106.086 117.641 106.168
 117.641 106.328 c 117.641 106.328 117.641 106.41 117.641 106.574 c 117.395
 107.684 l 117.312 108.016 117.23 108.262 117.152 108.426 c 117.066 108.672
 117.023 108.84 117.023 108.922 c 117.023 109.172 117.105 109.293 117.27
 109.293 c 117.516 109.293 117.68 109.09 117.766 108.68 c 117.848 108.594
 117.891 108.473 117.891 108.309 c 117.977 108.223 118.016 108.184 118.016
 108.184 c 118.102 108.184 118.145 108.223 118.145 108.309 c 118.145 108.391
 118.102 108.555 118.016 108.797 c 117.934 108.883 117.891 108.961 117.891
 109.043 c 117.73 109.371 117.523 109.539 117.277 109.539 c 117.031 109.539
 116.824 109.414 116.66 109.168 c 116.66 109.082 116.621 109 116.535 108.922
 c 116.211 109.332 115.883 109.539 115.551 109.539 c 115.141 109.539 114.855
 109.332 114.691 108.922 c 114.605 108.762 114.566 108.512 114.566 108.184
 c 114.566 107.688 114.73 107.195 115.062 106.699 c 115.473 106.207 115.883
 105.961 116.293 105.961 c 116.375 105.961 116.418 105.961 116.418 105.961
 c 116.75 105.961 116.996 106.125 117.16 106.457 c 116.66 108.426 m 117.031
 106.945 l 117.031 106.859 117.031 106.816 117.031 106.816 c 117.031 106.656
 116.988 106.488 116.906 106.32 c 116.82 106.16 116.656 106.078 116.41 106.078
 c 116.164 106.078 115.914 106.242 115.668 106.574 c 115.586 106.656 115.543
 106.738 115.543 106.816 c 115.379 107.148 115.215 107.602 115.047 108.176
 c 115.047 108.336 115.047 108.461 115.047 108.543 c 115.047 108.953 115.168
 109.203 115.418 109.285 c 115.418 109.285 115.457 109.285 115.543 109.285
 c 115.875 109.285 116.16 109.121 116.402 108.789 c 116.484 108.703 116.566
 108.625 116.645 108.543 c 116.645 108.461 116.645 108.418 116.645 108.418
 c f
  Q
Q
Q Q
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 3380 2799 V 378 2899 4 100 v 659 2899 V
1138 2869 a(1)j(r)o(acine)h(:)h Fj(x)1508 2881 y Fe(0)p
2019 2899 V 2498 2869 a Fp(1)f(r)o(acine)f(:)j Fj(x)2869
2881 y Fe(0)p 3380 2899 V 378 2902 3006 4 v 378 4039
4 1137 v 431 4009 a Fk(\242)15 b Fg(\307)f Fp(0)p 659
4039 V 103 w @beginspecial 0 @llx 0 @lly 177 @urx 158
@ury 1488 @rwi @setspecial
%%BeginDocument: C:/laragon/www/newmc/assets/imgsvg/parabole-3-1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.15.12 (http://cairographics.org)
%%CreationDate: Thu Aug 12 17:24:01 2021
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 177 158
%%EndComments
%%BeginProlog
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 177 158
%%EndPageSetup
q 0 0 177 158 rectclip
1 0 0 -1 0 158 cm q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
18.445 1.051 m 18.445 157.125 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
18.445 0.527 m 16.867 2.102 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
18.445 0.527 m 20.023 2.102 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
0 96.02 m 175.52 96.02 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 96.02 m 174.469 94.445 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 96.02 m 174.469 97.598 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
0.788255 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
53.801 -5.379 m 55.18 -0.832 l 56.555 3.574 l 57.938 7.836 l 59.32 11.957
 l 60.695 15.934 l 62.074 19.766 l 63.453 23.453 l 64.836 27.004 l 66.215
 30.41 l 67.59 33.672 l 68.973 36.793 l 70.355 39.77 l 71.73 42.605 l 73.109
 45.297 l 74.488 47.848 l 75.871 50.254 l 77.25 52.516 l 78.625 54.641 l
 80.008 56.617 l 81.391 58.449 l 82.766 60.148 l 84.145 61.695 l 85.527 
63.102 l 86.906 64.367 l 88.285 65.492 l 89.66 66.469 l 91.043 67.305 l 
92.426 67.996 l 93.801 68.551 l 95.18 68.961 l 96.562 69.223 l 97.941 69.348
 l 99.32 69.328 l 100.695 69.164 l 102.078 68.859 l 103.461 68.414 l 104.84
 67.82 l 106.215 67.09 l 107.598 66.211 l 108.98 65.191 l 110.355 64.031
 l 111.734 62.727 l 113.113 61.277 l 114.496 59.691 l 115.875 57.957 l 117.25
 56.078 l 118.633 54.062 l 120.016 51.902 l 121.391 49.598 l 122.77 47.152
 l 124.148 44.562 l 125.531 41.832 l 126.91 38.957 l 128.285 35.941 l 129.668
 32.781 l 131.051 29.48 l 132.426 26.035 l 133.805 22.445 l 135.188 18.715
 l 136.566 14.84 l 137.945 10.824 l 139.32 6.664 l 140.703 2.363 l 142.086
 -2.082 l 143.461 -6.668 l S Q
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
1 j
[ 0.525503 1.57651] 0 d
10 M q 1 0 0 1 0 0 cm
98.438 69.355 m 98.438 96.02 l S Q
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
48.078 2.59 m 47.582 4.562 l 47.496 4.645 47.457 4.688 47.457 4.688 c 47.328
 4.688 l 47.246 4.688 47.203 4.645 47.203 4.562 c 47.328 4.191 l 47.328 
3.535 47.125 3.082 46.715 2.836 c 46.469 2.75 46.219 2.707 45.973 2.707 
c 45.48 2.707 44.984 2.914 44.492 3.324 c 44.328 3.406 44.207 3.531 44.121
 3.695 c 43.629 4.266 43.301 5.004 43.137 5.91 c 43.137 6.07 43.137 6.195
 43.137 6.281 c 43.137 7.02 43.422 7.516 43.996 7.762 c 44.156 7.848 44.406
 7.887 44.734 7.887 c 45.23 7.887 45.684 7.723 46.094 7.391 c 46.5 7.066
 46.789 6.656 46.949 6.16 c 46.949 6.078 46.992 6.035 47.078 6.035 c 47.078
 6.035 47.078 6.078 47.078 6.16 c 47.078 6.246 47.035 6.41 46.949 6.656 
c 46.789 6.988 46.543 7.277 46.211 7.516 c 45.715 7.926 45.184 8.133 44.609
 8.133 c 43.867 8.133 43.293 7.926 42.883 7.516 c 42.551 7.109 42.387 6.613
 42.387 6.035 c 42.387 5.215 42.672 4.477 43.246 3.82 c 43.82 3.164 44.434
 2.754 45.09 2.59 c 45.422 2.508 45.707 2.465 45.949 2.465 c 46.523 2.465
 46.934 2.711 47.18 3.207 c 47.793 2.59 l 47.879 2.508 47.922 2.465 47.922
 2.465 c 48.004 2.465 48.047 2.508 48.047 2.59 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
49.656 6.957 m 49.395 8.766 l 49.336 8.996 49.25 9.258 49.137 9.543 c 49.137
 9.656 49.105 9.746 49.047 9.805 c 48.934 10.09 48.762 10.262 48.527 10.32
 c 48.527 10.32 48.5 10.32 48.441 10.32 c 48.27 10.32 48.125 10.266 48.012
 10.152 c 47.953 10.094 47.922 10.035 47.922 9.98 c 47.922 9.809 48.008 
9.691 48.18 9.637 c 48.18 9.637 48.211 9.637 48.27 9.637 c 48.383 9.637 
48.441 9.668 48.441 9.727 c 48.441 9.785 48.441 9.812 48.441 9.812 c 48.441
 9.93 48.383 10.016 48.27 10.074 c 48.27 10.074 48.238 10.102 48.18 10.16
 c 48.238 10.223 48.328 10.25 48.441 10.25 c 48.613 10.25 48.73 10.051 48.789
 9.648 c 48.848 9.59 48.875 9.504 48.875 9.391 c 48.875 9.219 l 49.309 6.977
 l 48.965 6.977 l 48.852 6.977 48.793 6.977 48.793 6.977 c 48.793 6.918 
48.824 6.863 48.883 6.809 c 49.402 6.809 l 49.461 6.348 49.516 6.059 49.57
 5.945 c 49.688 5.602 49.859 5.398 50.09 5.344 c 50.148 5.344 50.207 5.344
 50.262 5.344 c 50.434 5.344 50.578 5.402 50.691 5.516 c 50.691 5.574 50.691
 5.633 50.691 5.688 c 50.691 5.859 50.637 5.977 50.52 6.035 c 50.52 6.035
 50.492 6.035 50.434 6.035 c 50.32 6.035 50.262 6.004 50.262 5.945 c 50.203
 5.887 50.172 5.859 50.172 5.859 c 50.172 5.742 50.23 5.656 50.344 5.598
 c 50.402 5.598 50.461 5.57 50.516 5.512 c 50.457 5.453 50.371 5.422 50.258
 5.422 c 50.141 5.422 50.055 5.48 49.996 5.594 c 49.938 5.652 49.879 5.852
 49.824 6.195 c 49.738 6.797 l 50.168 6.797 l 50.281 6.797 50.34 6.824 50.34
 6.883 c 50.34 6.941 50.309 6.973 50.25 6.973 c 49.645 6.973 l f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
90.828 109.855 m 86.516 109.855 l 86.352 109.855 86.273 109.812 86.273 
109.73 c 86.273 109.645 86.352 109.605 86.516 109.605 c 90.828 109.605 l
 90.992 109.605 91.074 109.645 91.074 109.73 c 91.074 109.812 90.992 109.855
 90.828 109.855 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
98.254 100.949 m 97.758 103.418 l 98.004 103.086 98.289 102.918 98.617 
102.918 c 99.027 102.918 99.312 103.086 99.477 103.418 c 99.637 103.664 
99.719 103.91 99.719 104.156 c 99.719 104.73 99.516 105.262 99.105 105.758
 c 98.695 106.168 98.285 106.414 97.875 106.5 c 97.875 106.5 97.832 106.5
 97.75 106.5 c 97.418 106.5 97.133 106.293 96.891 105.883 c 96.805 105.723
 96.762 105.516 96.762 105.27 c 96.762 105.023 96.805 104.734 96.891 104.41
 c 97.504 101.824 l 97.59 101.578 97.629 101.41 97.629 101.328 c 97.629 
101.328 97.59 101.285 97.504 101.203 c 97.504 101.203 97.422 101.203 97.262
 101.203 c 97.176 101.203 97.094 101.203 97.016 101.203 c 97.016 101.039
 97.098 100.957 97.262 100.957 c 98.121 100.957 l 98.203 100.957 98.246 
100.957 98.246 100.957 c 97.504 103.914 m 97.379 104.652 l 97.293 104.984
 97.254 105.27 97.254 105.512 c 97.254 105.922 97.375 106.172 97.621 106.254
 c 97.707 106.254 97.75 106.254 97.75 106.254 c 98.078 106.254 98.328 106.09
 98.488 105.758 c 98.574 105.672 98.656 105.594 98.734 105.512 c 98.816 
105.184 98.941 104.773 99.105 104.285 c 99.105 104.121 99.105 103.953 99.105
 103.785 c 99.105 103.379 98.98 103.129 98.734 103.047 c 98.648 103.047 
98.609 103.047 98.609 103.047 c 98.277 103.047 97.949 103.25 97.621 103.66
 c 97.621 103.746 97.582 103.828 97.496 103.906 c f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
94.047 109.574 8.109 0.316 re f
  Q
Q
Q q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
97.621 115.754 m 97.375 117.109 l 94.418 117.109 l 94.418 116.945 94.461
 116.863 94.547 116.863 c 96.027 115.137 l 96.602 114.48 96.887 113.906 
96.887 113.41 c 96.887 112.918 96.723 112.547 96.391 112.301 c 96.227 112.137
 96.023 112.055 95.777 112.055 c 95.445 112.055 95.156 112.223 94.918 112.551
 c 94.832 112.637 94.789 112.762 94.789 112.922 c 94.789 112.922 94.832 
112.922 94.918 112.922 c 95.078 112.922 95.203 113.004 95.285 113.168 c 
95.285 113.25 95.285 113.293 95.285 113.293 c 95.285 113.539 95.164 113.664
 94.918 113.664 c 94.918 113.746 94.918 113.789 94.918 113.789 c 94.668 
113.789 94.504 113.707 94.418 113.547 c 94.418 113.461 94.418 113.379 94.418
 113.301 c 94.418 112.891 94.586 112.562 94.918 112.316 c 95.164 111.984
 95.492 111.82 95.902 111.82 c 96.473 111.82 96.926 112.023 97.258 112.434
 c 97.422 112.68 97.543 112.969 97.629 113.293 c 97.629 113.293 97.629 113.336
 97.629 113.418 c 97.629 113.75 97.461 114.121 97.133 114.531 c 96.969 114.695
 96.723 114.898 96.391 115.145 c 96.02 115.641 l 95.895 115.641 l 95.035
 116.5 l 96.516 116.5 l 96.926 116.5 97.172 116.5 97.258 116.5 c 97.258 
116.418 97.301 116.172 97.383 115.762 c 97.629 115.762 l f
  Q
Q
q
0 0 177 158 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
100.945 114.152 m 100.945 113.988 101.027 113.867 101.191 113.781 c 101.191
 113.781 101.234 113.781 101.316 113.781 c 101.402 113.781 101.441 113.863
 101.441 114.027 c 101.441 114.027 101.441 114.109 101.441 114.27 c 101.199
 115.383 l 101.113 115.715 101.035 115.961 100.953 116.125 c 100.871 116.371
 100.828 116.535 100.828 116.621 c 100.828 116.867 100.91 116.988 101.074
 116.988 c 101.32 116.988 101.484 116.785 101.57 116.375 c 101.652 116.293
 101.695 116.168 101.695 116.004 c 101.781 115.922 101.82 115.879 101.82
 115.879 c 101.906 115.879 101.949 115.922 101.949 116.004 c 101.949 116.09
 101.906 116.25 101.82 116.492 c 101.738 116.578 101.695 116.66 101.695 
116.738 c 101.531 117.07 101.328 117.234 101.082 117.234 c 100.832 117.234
 100.629 117.109 100.465 116.863 c 100.465 116.781 100.422 116.699 100.34
 116.621 c 100.016 117.031 99.684 117.234 99.355 117.234 c 98.945 117.234
 98.656 117.031 98.496 116.621 c 98.41 116.457 98.367 116.211 98.367 115.879
 c 98.367 115.387 98.535 114.891 98.867 114.398 c 99.277 113.902 99.684 
113.656 100.094 113.656 c 100.18 113.656 100.223 113.656 100.223 113.656
 c 100.551 113.656 100.801 113.82 100.961 114.152 c 100.465 116.125 m 100.836
 114.641 l 100.836 114.559 100.836 114.516 100.836 114.516 c 100.836 114.352
 100.793 114.188 100.711 114.02 c 100.625 113.855 100.461 113.773 100.215
 113.773 c 99.965 113.773 99.719 113.941 99.473 114.27 c 99.387 114.355 
99.348 114.438 99.348 114.516 c 99.184 114.848 99.02 115.297 98.852 115.871
 c 98.852 116.035 98.852 116.156 98.852 116.242 c 98.852 116.652 98.973 
116.898 99.219 116.98 c 99.219 116.98 99.262 116.98 99.348 116.98 c 99.676
 116.98 99.965 116.816 100.207 116.484 c 100.289 116.402 100.371 116.32 
100.449 116.242 c 100.449 116.156 100.449 116.113 100.449 116.113 c f
  Q
Q
Q Q
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 2019 4039 V 1360 w @beginspecial 0 @llx
0 @lly 177 @urx 157 @ury 1488 @rwi @setspecial
%%BeginDocument: C:/laragon/www/newmc/assets/imgsvg/parabole-3-2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.15.12 (http://cairographics.org)
%%CreationDate: Thu Aug 12 17:23:13 2021
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 177 157
%%EndComments
%%BeginProlog
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 177 157
%%EndPageSetup
q 0 0 177 157 rectclip
1 0 0 -1 0 157 cm q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
18.445 0.711 m 18.445 156.785 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
18.445 0.188 m 16.867 1.762 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
18.445 0.188 m 20.023 1.762 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
0 95.68 m 175.52 95.68 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 95.68 m 174.469 94.105 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
0 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
176.043 95.68 m 174.469 97.258 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
0.788255 w
1 J
1 j
[] 0.0 d
10 M q 1 0 0 1 0 0 cm
66.215 161.293 m 67.59 158.031 l 68.973 154.91 l 70.355 151.93 l 71.73 
149.098 l 73.109 146.406 l 74.488 143.859 l 75.871 141.453 l 77.25 139.188
 l 78.625 137.062 l 80.008 135.086 l 81.391 133.25 l 82.766 131.555 l 84.145
 130.008 l 85.527 128.598 l 86.906 127.336 l 88.285 126.211 l 89.66 125.234
 l 91.043 124.398 l 92.426 123.707 l 93.801 123.152 l 95.18 122.742 l 96.562
 122.477 l 97.941 122.355 l 99.32 122.375 l 100.695 122.539 l 102.078 122.844
 l 103.461 123.289 l 104.84 123.883 l 106.215 124.613 l 107.598 125.492 
l 108.98 126.512 l 110.355 127.672 l 111.734 128.977 l 113.113 130.422 l
 114.496 132.012 l 115.875 133.746 l 117.25 135.625 l 118.633 137.641 l 
120.016 139.801 l 121.391 142.102 l 122.77 144.551 l 124.148 147.137 l 125.531
 149.871 l 126.91 152.746 l 128.285 155.762 l 129.668 158.926 l 131.051 
162.227 l S Q
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
0.525503 w
0 J
1 j
[ 0.525503 1.57651] 0 d
10 M q 1 0 0 1 0 0 cm
98.438 122.344 m 98.438 95.68 l S Q
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
63.844 145.188 m 63.348 147.16 l 63.262 147.242 63.219 147.285 63.219 147.285
 c 63.094 147.285 l 63.012 147.285 62.969 147.242 62.969 147.16 c 63.094
 146.789 l 63.094 146.133 62.891 145.68 62.48 145.434 c 62.234 145.348 61.984
 145.305 61.738 145.305 c 61.246 145.305 60.75 145.512 60.258 145.922 c 
60.094 146.004 59.969 146.129 59.887 146.293 c 59.391 146.863 59.062 147.602
 58.902 148.508 c 58.902 148.668 58.902 148.793 58.902 148.879 c 58.902 
149.617 59.188 150.113 59.762 150.359 c 59.922 150.441 60.172 150.484 60.5
 150.484 c 60.996 150.484 61.445 150.32 61.855 149.988 c 62.266 149.664 
62.555 149.254 62.715 148.758 c 62.715 148.676 62.758 148.633 62.844 148.633
 c 62.844 148.633 62.844 148.676 62.844 148.758 c 62.844 148.844 62.801 
149.008 62.715 149.254 c 62.555 149.586 62.305 149.871 61.977 150.113 c 
61.48 150.523 60.949 150.73 60.375 150.73 c 59.633 150.73 59.059 150.523
 58.648 150.113 c 58.316 149.703 58.152 149.211 58.152 148.633 c 58.152 
147.812 58.438 147.074 59.012 146.418 c 59.586 145.762 60.199 145.352 60.855
 145.188 c 61.188 145.105 61.473 145.062 61.715 145.062 c 62.289 145.062
 62.699 145.309 62.945 145.805 c 63.559 145.188 l 63.645 145.105 63.688 
145.062 63.688 145.062 c 63.77 145.062 63.812 145.105 63.812 145.188 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 0.2 0.8 rg
65.418 149.555 m 65.16 151.363 l 65.102 151.594 65.016 151.855 64.902 152.141
 c 64.902 152.254 64.871 152.34 64.812 152.402 c 64.699 152.688 64.527 152.859
 64.293 152.918 c 64.293 152.918 64.266 152.918 64.207 152.918 c 64.031 
152.918 63.891 152.863 63.773 152.75 c 63.715 152.688 63.688 152.633 63.688
 152.578 c 63.688 152.402 63.773 152.289 63.945 152.234 c 63.945 152.234
 63.977 152.234 64.035 152.234 c 64.148 152.234 64.207 152.266 64.207 152.324
 c 64.207 152.383 64.207 152.41 64.207 152.41 c 64.207 152.527 64.148 152.613
 64.035 152.672 c 64.035 152.672 64.004 152.699 63.945 152.758 c 64.004 
152.816 64.09 152.848 64.207 152.848 c 64.379 152.848 64.496 152.648 64.555
 152.246 c 64.613 152.188 64.641 152.102 64.641 151.988 c 64.641 151.816
 l 65.07 149.574 l 64.73 149.574 l 64.617 149.574 64.559 149.574 64.559 
149.574 c 64.559 149.516 64.59 149.461 64.648 149.406 c 65.164 149.406 l
 65.227 148.945 65.281 148.656 65.336 148.543 c 65.449 148.199 65.625 147.996
 65.855 147.941 c 65.914 147.941 65.973 147.941 66.027 147.941 c 66.199 
147.941 66.344 148 66.457 148.113 c 66.457 148.172 66.457 148.23 66.457 
148.285 c 66.457 148.457 66.398 148.574 66.285 148.633 c 66.285 148.633 
66.258 148.633 66.199 148.633 c 66.082 148.633 66.027 148.602 66.027 148.543
 c 65.969 148.484 65.938 148.457 65.938 148.457 c 65.938 148.34 65.996 148.254
 66.109 148.195 c 66.168 148.195 66.227 148.168 66.281 148.109 c 66.223 
148.047 66.137 148.02 66.02 148.02 c 65.906 148.02 65.82 148.078 65.762 
148.191 c 65.703 148.25 65.645 148.449 65.59 148.793 c 65.504 149.395 l 
65.934 149.395 l 66.047 149.395 66.105 149.422 66.105 149.48 c 66.105 149.539
 66.074 149.57 66.016 149.57 c 65.41 149.57 l f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
90.828 85.344 m 86.516 85.344 l 86.352 85.344 86.273 85.301 86.273 85.219
 c 86.273 85.133 86.352 85.09 86.516 85.09 c 90.828 85.09 l 90.992 85.09
 91.074 85.133 91.074 85.219 c 91.074 85.301 90.992 85.344 90.828 85.344
 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
98.254 76.438 m 97.758 78.902 l 98.004 78.574 98.289 78.406 98.617 78.406
 c 99.027 78.406 99.312 78.574 99.477 78.902 c 99.637 79.152 99.719 79.398
 99.719 79.645 c 99.719 80.219 99.516 80.75 99.105 81.246 c 98.695 81.656
 98.285 81.902 97.875 81.984 c 97.875 81.984 97.832 81.984 97.75 81.984 
c 97.418 81.984 97.133 81.781 96.891 81.371 c 96.805 81.207 96.762 81.004
 96.762 80.758 c 96.762 80.508 96.805 80.223 96.891 79.898 c 97.504 77.312
 l 97.59 77.062 97.629 76.898 97.629 76.816 c 97.629 76.816 97.59 76.773
 97.504 76.688 c 97.504 76.688 97.422 76.688 97.262 76.688 c 97.176 76.688
 97.094 76.688 97.016 76.688 c 97.016 76.527 97.098 76.445 97.262 76.445
 c 98.121 76.445 l 98.203 76.445 98.246 76.445 98.246 76.445 c 97.504 79.398
 m 97.379 80.141 l 97.293 80.473 97.254 80.758 97.254 81 c 97.254 81.41 
97.375 81.656 97.621 81.742 c 97.707 81.742 97.75 81.742 97.75 81.742 c 
98.078 81.742 98.328 81.574 98.488 81.246 c 98.574 81.16 98.656 81.078 98.734
 81 c 98.816 80.668 98.941 80.258 99.105 79.77 c 99.105 79.609 99.105 79.441
 99.105 79.273 c 99.105 78.863 98.98 78.617 98.734 78.531 c 98.648 78.531
 98.609 78.531 98.609 78.531 c 98.277 78.531 97.949 78.738 97.621 79.148
 c 97.621 79.23 97.582 79.312 97.496 79.391 c f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
94.047 85.059 8.109 0.316 re f
  Q
Q
Q q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
97.621 91.238 m 97.375 92.594 l 94.418 92.594 l 94.418 92.434 94.461 92.352
 94.547 92.352 c 96.027 90.625 l 96.602 89.969 96.887 89.395 96.887 88.898
 c 96.887 88.406 96.723 88.035 96.391 87.789 c 96.227 87.625 96.023 87.543
 95.777 87.543 c 95.445 87.543 95.156 87.707 94.918 88.039 c 94.832 88.125
 94.789 88.246 94.789 88.41 c 94.789 88.41 94.832 88.41 94.918 88.41 c 95.078
 88.41 95.203 88.492 95.285 88.652 c 95.285 88.738 95.285 88.781 95.285 
88.781 c 95.285 89.027 95.164 89.152 94.918 89.152 c 94.918 89.234 94.918
 89.277 94.918 89.277 c 94.668 89.277 94.504 89.195 94.418 89.031 c 94.418
 88.949 94.418 88.867 94.418 88.789 c 94.418 88.379 94.586 88.051 94.918
 87.805 c 95.164 87.473 95.492 87.305 95.902 87.305 c 96.473 87.305 96.926
 87.512 97.258 87.922 c 97.422 88.168 97.543 88.453 97.629 88.781 c 97.629
 88.781 97.629 88.824 97.629 88.906 c 97.629 89.238 97.461 89.609 97.133
 90.02 c 96.969 90.18 96.723 90.387 96.391 90.633 c 96.02 91.129 l 95.895
 91.129 l 95.035 91.988 l 96.516 91.988 l 96.926 91.988 97.172 91.988 97.258
 91.988 c 97.258 91.906 97.301 91.656 97.383 91.246 c 97.629 91.246 l f
  Q
Q
q
0 0 177 157 re W n
[ 1 0 0 1 0 0 ] concat
  q
0 g
100.945 89.641 m 100.945 89.477 101.027 89.352 101.191 89.27 c 101.191 
89.27 101.234 89.27 101.316 89.27 c 101.402 89.27 101.441 89.352 101.441
 89.512 c 101.441 89.512 101.441 89.594 101.441 89.758 c 101.199 90.871 
l 101.113 91.199 101.035 91.449 100.953 91.609 c 100.871 91.855 100.828 
92.023 100.828 92.105 c 100.828 92.355 100.91 92.477 101.074 92.477 c 101.32
 92.477 101.484 92.273 101.57 91.863 c 101.652 91.777 101.695 91.656 101.695
 91.492 c 101.781 91.406 101.82 91.367 101.82 91.367 c 101.906 91.367 101.949
 91.406 101.949 91.492 c 101.949 91.574 101.906 91.738 101.82 91.98 c 101.738
 92.066 101.695 92.145 101.695 92.227 c 101.531 92.555 101.328 92.723 101.082
 92.723 c 100.832 92.723 100.629 92.598 100.465 92.352 c 100.465 92.266 
100.422 92.188 100.34 92.105 c 100.016 92.516 99.684 92.723 99.355 92.723
 c 98.945 92.723 98.656 92.516 98.496 92.105 c 98.41 91.945 98.367 91.695
 98.367 91.367 c 98.367 90.871 98.535 90.379 98.867 89.883 c 99.277 89.391
 99.684 89.145 100.094 89.145 c 100.18 89.145 100.223 89.145 100.223 89.145
 c 100.551 89.145 100.801 89.309 100.961 89.641 c 100.465 91.609 m 100.836
 90.129 l 100.836 90.043 100.836 90.004 100.836 90.004 c 100.836 89.84 100.793
 89.672 100.711 89.504 c 100.625 89.344 100.461 89.262 100.215 89.262 c 
99.965 89.262 99.719 89.426 99.473 89.758 c 99.387 89.844 99.348 89.922 
99.348 90.004 c 99.184 90.332 99.02 90.785 98.852 91.359 c 98.852 91.52 
98.852 91.645 98.852 91.727 c 98.852 92.137 98.973 92.387 99.219 92.469 
c 99.219 92.469 99.262 92.469 99.348 92.469 c 99.676 92.469 99.965 92.305
 100.207 91.973 c 100.289 91.891 100.371 91.809 100.449 91.727 c 100.449
 91.645 100.449 91.602 100.449 91.602 c f
  Q
Q
Q Q
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 3380 4039 V 378 4139 4 100 v 659 4139 V
1115 4109 a(P)m(as)k(de)f(r)o(acine)p 2019 4139 V 910
w(P)m(as)g(de)g(r)o(acine)p 3380 4139 V 378 4142 3006
4 v 0 TeXcolorgray 109 5980 3544 2 v OliveGreen 109 6095
a
SDict begin H.S end
 109 6095 a OliveGreen 0 TeXcolorgray -15 x Fb(https://www)-5
b(.maths-cours)o(.fr/cours/trinomes-du-second-degr)o(e/)p
OliveGreen OliveGreen 1869 6034 a
SDict begin H.R end
 1869 6034 a 1869 6080
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/trinomes-du-second-degre/)>>/Subtype
/Link H.B /ANN pdfmark end
 1869 6080 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
