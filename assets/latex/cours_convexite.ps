%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: cours_convexite.dvi
%%CreationDate: Thu Aug 12 17:18:48 2021
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Utopia-Regular NimbusSanL-Regu
%%+ Fourier-Math-Letters-Italic Utopia-Italic rsfs10
%%+ Fourier-Math-Symbols Utopia-Bold Fourier-Math-BlackBoard MSAM10
%%+ Fourier-Math-Extension
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o cours_convexite.ps
%+ cours_convexite.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.12:1918
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 838 2018-11-14 19:00:45Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.29, 2018/11/14
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Thu Nov 11 14:57:39 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /parenleftbig put
dup 162 /parenrightbig put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 774} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCE17DCF5D3B7363F4BADDDE608D74
12F1DE5225D1BC9EF64A528CBEAEBAB7C5CA75B68EE58CD3BCF098C552B2A1FB
75BF21F58BCCBC9B908C31E373408147528CAD183940FA19AF923D72ADC1836E
428B74A5B3EBB55F5B6E33E8FFA3025EABB8E4A824D430EC40A31F0D72A210DD
75759CE62844F0F7D49BA3D4BD6BCF66449B9AFB9BE875F751E394E0A4FCA52C
D8C522586A8B3F3C5C7804B68E3155F94CC622FBDDBFAD41C583E43FDFD10651
DD5434E0FFB349BDD07170A0FFCF4250E226F07D9C2CB416DDB63CF486B33CC2
389BF90C05271234DD30D97680F6B41F2F0B28FE0C84893AC64BF925683F8DC5
3DF4B96610E5CED82A6C57C1FB68FDBC3B4B88424038E1CFDC34157B77F9B99C
F81577EDF8A82CE0C6DC7397945E5E5C192725215EEEF3F0D0C2221C24A174AE
4D6E8C782CA8C003D204EF2DDEA75F563DD5FB33095F872BC457CA43C979BB8B
2E1C6DB52A659C726EF3BE8A44E2B2B189665BAD3029377EF989951855031A46
35A0F75CBE72536243DDC09E4D3B70D9EC465BA6941D05D1D74BFF1C090C9996
15ED42A15A4C030CD533FCF76E5546E83980D04F8DD9962B460B3C60A99CD0FE
7B537712FE685EE1FE724EEA199D4838F94802526E95371E4CF3286C1E798B32
A642F4291525C954A6B2BDAEFE1DAD4CE1FB64C375A74D82F10CD0CF9F83475B
A369D5E80CAC68B65C1FBA3BBF19FD3F7506F865DED7E3C2BFCDCA8223A756E7
A64DBAE9A000A5B1A7BFDAD6C3B8499D996F3AFAFA8B8FD730689EB5A2F9863A
C37F150635D4704407F0211A155FCB44F71B3987A2536531AE0C9664D6B142C0
06BB67D226D4263EECC79DD1C5CD4851F5752F651EECAF9454709210949AED5B
D427C6498ABF42B20E46F937A0D0044901657C70C528F59DB4946F9F6F054F98
419225F9EF40664CFAF55C538677F458823C8D8AF1E9D27E6327FD830A1AB2C7
2FEEF0E20A80DDC07355734BC4CAC62CED2AFEA022E17171FE97DB0CB5610AE5
A9E44B86E81AA2A2315ADADA97F30777662734B75A97F5F4386D5D05700F0FE0
5246EBF6599F63FB4051520384AC1BD7D860E5E28D85A7FB32D1FAF41A77E3A9
9FAF7F20CF85ED206AD21ACE67FF1978AA828F88D75819273165F58852193749
E184C9C87AF9D40326CEE33E2A1B3406150D308C8065CDFCB8D79BDC2C230541
905CF36B25F4CA913BBE9E12012349BF96DED4751D6AAF255B6EDDE9353EACC7
297FB2CE249107B236B486AC202AAEB66CBDE5808081109F1E95F04AD5214131
54ADFA01DBCBC9E38E0D33149723AD62FCB037880D290DD8A46D1DB9FCFA3E38
7CB838A46BD7FDF38B3139F5B6D01AEA350C923CAD248C4E14
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 54 /lessorequalslant put
dup 62 /greaterorequalslant put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEBE3247D8C84A67F
B0FA852538DC05B30BC3423FD37E586D4149D96E33BE469F3A7E8240826BF920
C8FEAE3B22740DA19BD70782CA4698465EA758AAC7B107212B363F9AC8947BE5
1D621C2E0B050F5EDC2BF39C72B62704A385C873648146E8E615D349ED779B78
7232605BEB38346E306018BE598AA09E444D0F77F63C7B91B8989130CC44074C
3B78058725777666DE7703EAC3383DC1036243002C75ABD706FF6272EC8B127F
512CD94B4EB72169496F57C21467F2E268E3F2AB0C62F99D6FBC035327144B15
3EA7313133DF49A031282BFAE803713C525D6B12C8BC41BF641A35D16CD267DE
5453EC212BB664805A6ABBD010D85C3565B2ED2E163B021D319558F8B12EC74A
D23D8D3D60FB98D39D08136666DDA4031A8E608B103688D2E860B9BDBCD50DEE
D3BE745BCA2104F0A28816B184277891B9231F28346A46BC83E8E043427C28A2
401F5ED30A4C2578F06DEF1FF3C98550BCDC5427F0D3CCD9AA1189F6A2A8844F
5EC219D9C8CA25E69488DF641E3A087A0EBC9657354AE68381B4DD8789E1D35D
4AE06A051107EA4D9375EE74AD0BC6BFFBE163DE6DD491740660FFF722FC1F30
238DBF05300C35CAA9F686616449FE094A5F972669F8749826284B5DB8E20690
CAB98FCB242CB73DF0BD147086881CD9C9335856F5F195FCAFBC3813528BCF58
6586654038EC562FB8C340A7A231DE2D065BDD828B097E7E7844246A646D34D0
D7356F6E3655663F9EACCC45B962A67731C76AC98678B54E6E3A103EBC0F25C4
4B4AE7D581455520DA75F0AA2AD71C12CA19CC7D1D0E4A13B262BEA658AA67B8
FC1B1350787F40DB00FE7A2187D2562E08382F94973EE4F7F6CB90329F80DF0D
FDFCD73F99971EE31684D721083208D4C964A75B5060C9B13CA0FE1281472A94
526D946AACF92F55944DA04E57D5DE2CDD0313C03A48023936FDD7893AB0AFDE
4ACECB1D0F6AC4F152E8EFDE5A98FD8D8DB7DA1A8F632686E80B86BAF16006E2
685F68747E2FC24D58A6084E6869B736BDEEF2FCFB7C80718007107308481D0F
FEC8CA83ACC5F02BD00176F91682B12D3E1109AB823A3263BCB5FEEBABCD6C45
DAA1A7116E7BC158A6EBC4D510AD852B107BFC1CA19C35E36F930204D43AF4CA
08A15623B5A6B63FE2560AE636775DD7D5283340FBB96E321E0CBF322EFEC407
625D3C39D23DC349FD0F95260238A0EC9DE7BAA6AE6A2F42EB3D2F0C13B53132
F2B339E29A79822315B46B97C0761EEE46D61357D06AD74FF7574207022846BB
81D09DCDBB88995781110510B81B1D598AAD73A382937A304B47CAAE294C3CA2
6A78162C7049855B022CCADD9068EF88DBB0093C8EC87DC5456AAF6B0A8CCD78
8424235D7A11C5D3988D9404FCFDED03DDF58A623C6C0AC12C36C0569BC4FB90
46E61BFEC639824AA6F4965080A2D2A4FA1DDD7D127F68145AEACC532DA8216A
9BC69AC77FCFDA9017540D372C7CE86AD2B7D6578E21E9B1F5EC568B525B6494
E59944AF046F8B792FFCD6D79538BA6DA236092995B76924772EC37EEB5C344D
77999D1DF620249F4408E156C9F05395D3DAFB8FE0D7FEA5B3D51FBE10FE6D6D
37146C27E65B3DE3B6269BBC706F77D2F671
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Fourier-Math-BlackBoard
%!PS-AdobeFont-1.0: Fourier-Math-BlackBoard 001.004
%%CreationDate: Sun Sep 14 11:40:06 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-BlackBoard) readonly def
/FamilyName (Fourier-Math-BlackBoard) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /Fourier-Math-BlackBoard def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {34 -199 886 747} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18A96F6D1C771F81C4B3B8CF0CBC2E8
4B44D923DDCE84E17DAE82547EA9EA5E732D78F03AA245377BF0780A3752527B
6E63F6A41202E7A6C4E4F9330A0AABBD04387E12F2ABF531216BF498DC6B6BE6
06DD50B385DDB864515170905E2BF225AB9AEF29A2181200040460795735C124
59C90AE9BF9F01F42A2ACC5A5D97D4F6548FBC903ECEFE9FBC8492EFEE55ED6F
F29A7BB50432A42FF30DB3CEBFE1C2BF83D613F2C846B7F2173F00B4EE5FAA8E
12EDC39BDDF670F50F6AF072673281554416E77FF134014D5C465127C28647BE
3E810BBD9EC9F9580C21D2E9479B8F0435749734B76F4C06995E769710828768
3141ACD67803BC92D5B405AEBD4B25D5DF255B110F1EF1C35D45D24AD0B1E0C6
8816579DF17721764D5D2CE396276ECE1E6142DC2EEDF83FD7B65717064CF671
051D92A9993F82D241AA1C3254DBD3DC53886264BDA18DE9FB8F584DEC9A32F9
82A6131D7140BC7926C074E26639A7141B87ACCD64E61A25DD7E26F463FD7834
964655DDF83538CF1DEA3D6363DE79EBBCDB429279F84F5DA8035CE823A76FDA
C2FE77036F5B9D71C0CBB063689C0C9770514E550CDBB1BE97D763729B78CFE3
DD162726B3F3190F0003F4812E9877545507664B32A1BC0E6C933BA64EEB3563
39606495CEDCB8EA6E63ABEC9F3558DAA0BAA350F45A6E9B145480D9513B87EC
14F7551489E0F96B698A104DCDAEF9160549D551093AB3F5F7EBDDEBCAA3ABA5
F0CD388ED13E9611675BA045A8E99C002616ED89D1F3EF0537C6E787DEF9B5D3
F20879DF1555A646A79400D3EB80A209937A45A6345C4E51748D3A5C523F9F93
FCA3628D463FABD8537A948B3A3715BAAEE70345F5186A550FAC78ACD262E671
AF8FDCC133800B82183CD17B4EA18EB6AD976F91FE3C1447EAB9EACE7CAA00F8
69C9D899C80FDAA551B57BDFD7BFDFE5BE081D0AE6FC30D89B49C43AB5C8F923
13C1E770F0905663C6B7FF3B02723580D7B1E8C0DAA19968884E622821BC174E
58859FA90DF4D140C225017AE82F1C01CF0FE1952AC0CBFDB2B2AE148026C116
8E9D2D51BEECF04E3D194C3B62EBBA84552E741659DB3BEA3EB1887DDF2FF5EC
E616B5DDDF84603216ABD3CC62CCF91FCF4BBA041DB075C2A7DEFCE18F39B173
F296A12AE1CDD8B0C1DAD85E3F73F5D378EF9B3E44241869EF76C09CDA729288
046DC05F6A8281F31175DF235627E657CD3BACEF2AD0B700ACD6976C54D0B1E1
803BAB50CC45C5102647D7D2B835491465DD1A2507761E496334D370804A5E4A
5F1481C6A20C9AAECEBA628202ECD441DDECAAE92151F47AB7999A2290E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
dup 48 /prime put
dup 49 /infinity put
dup 55 /mapstochar put
dup 161 /minus put
dup 178 /bullet put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735F731DA07EF3D6E818628
AF05166460DA5B83052A083336C23DE3F4916E3E60E10509910166E063832CE3
29E5DF2FDFD0AA1DC9F1C99A95FC477BF7F113B2CF4626600B1B5DFF712EB302
AFCB86EEF4DD29EA456833CF29BC0C5CC42C0BB09735A0A83143A0560B03DF25
B27B0B383BD641B85E8F6790F6ACFA6A03C77D60425F8B515C48893EE05FFD60
CB40D1B9185FCF7D27FAE0616B15007FBA17D23DBE9347515CC3A932A96246E1
85C477A9D6665D4F5D8F374CF4C0F4CDE76C57C8F7BD4A66071AF94604FBA047
80C65D0357949E03600E099BFE0ECAEBC6E6A636BCFEFC0A9035532476354B49
DFC61218068C10E8103BFF464394C6A73A86807D46452EFE438C9A865EBF1E5C
C83B548CC0303ACE982356DF23ED096EEB49E27A21EBC581B34B90B0CA72DFEF
039A74C91BF5228B1544ABA9FC5CB9A6491CD4D2FB7159E9F6C2250F8C610DBF
8A35DB7E7919FAE1D161FDC53759452BC5D2D5C56046539B8A1611F3E5F7BE1C
6CC5F4B8EB9892C3BFAE60EB2258F4D04DA57DFA34EDA7C8C956C35C5E177D64
BC9AA2AA50BA91E8F5FAE4D0FCA1F1A878790080A40787B3A7C7940EEF24E522
32C2350726500B27BBC1016D7023F1F281D0C18C04E067C23024349C7F1EFECA
9D460AE8F4AA9A2C25CB5D39034ADD5FA02F5C2FE9275AB4584D6DFE95C829BA
28F507A9C368F11C8195E4CB8D7E91B1C3DF000B28CED02FE467815D3019EF25
36627AC6E88A070693F82818D5FA0D49764FF6094E91B8D259F8AF421632FA9B
B6F5DDC63222B76969B275C2B325EE987177FEDA677280870A3825B132FCC915
820428541099CEEF6264F07AFF376E867CAD643308D3CFF9837FDDF540268452
6916531974A970BBB906AC1294D72D1975AC33846E7C53A50DD064791E3B7C35
A301AAEF35F4E0B3ECBAB10A4E05BA9C9D000AC251E961FC3C76218966BC5804
1BD4C8255F3ACB2AEA8CBCBC7AB9C7FAC3EFD09DAE49D5A4C12DC060CE856A47
9C58DDA22B43031FAD835D31AC9DC04BFCA148B85EC081E8B5BE309287F5988C
75A1F40FF3EC8B127EA07374DC7CD27DA2A8BCC0AFA0B88AC8B8B78DAF50DA60
8CC29CE56106BBE8C4D541C4830630E2B900911299E81AB7A50B80AFC1503CD9
D3FD0892D58F174EB98FB7AFEB2235E94459E75E5D1CBE6626C61A1485421D8F
AFB911912CCA6211AB326C0E90D4EB7563FDF0A2AF6293D6F7E6A9ECCD24FB3E
0A790315EAB969323BD4E9A9B810851E1BFA44EE617095E29E65BA3923054D37
68369438113F7F0D31D458D55D72817E2B6C88D69A79646DDA772366C1D9CF5B
D4D8351DEF8EA36426A8294F7EB6254D5FABDAF80679812380943F28F272EED4
D609DDD3C9D132B99C16578BC15E87546551F93A1D560BFDD80FD5799295CA9F
33817D2282AD254C65AEA9C90B7258AD9514DABBC0DC8F655C3AD33A4FA19CDE
94B19C8DDA21EC3EFD0C9F68F1627888B3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF68912124FBDB68229466AA66BD11FBDC06
45DBF8390D3531E113A885886035E32F32E890A6FD2ECE05A06B7E80A5E04B77
BC897F509579650E646A05A42A950F4A826B5866E245E49607034CC5D3CEC8F6
95DE734B4FE61F50F82E00DC55E825472320B5711B16DB1195DC88403007E30B
638CD56158597139A2136551DE2AA7134E110BAE6D723CB9251946E63AACF791
AC01EB9D24FAECEB71A83D9CBB7EF1D613E6488BF74DEAF14979CAABB224C184
339770873FCA732F2E2F03F5649A6554EA20159331211ED7870E7542FA0963BA
6A1CBB2D4F3A686D4B71ABFCF75F014ECD7156CC449C12360A0ECAA2D7DE6883
9C27776D8236857EFCE58D94CF7ACB4B264226BF599141CDEE718D4A499D90DF
442EE12E199954180966CDE5C5AAE04253AC243D4B23575DA9A1A157939CAAAA
9793632B70E583CFA5155756F55571A78ED45FA8C6131758314AF80AE4C0B747
68F8DDCF78A1C2804A475BE4CA211C47229DA04FCA762C13FF42D9E05C48352F
74FF59CA887C0EB9F3332CF25370DB7A5FE51A392D0B8D6FE65C93925D9878A0
559475AEE82E027F27BE72B05139ED692C2A4A2CCABEF2A69FD97536BF35B558
6307689A73A2132AA5FC7F4DB240B61AC408061C00E10D8903F0908B6DC2F7D2
A4D6CC3BB2684EF827C53E9615ACA553C529DA1F868CC60C3D15AE5D01B445FE
A162B579A3FE4712B1D073A90E3A10C2AE0BE990FA8A1C55D0447518D11B4CDD
A6FE3EAEDC5B9BFC594D6FCC70193CA13D0735AABB7D3A3EDBE6BDD29ABC81B4
A45E353D5F4E334A276ED33A96BB8CEF4DBBFCF53A22A7881910194CCC7FE4A0
40205934096C57CF52AB6062F7348C036F6058E2116B84CF1DFDBBD7C5844146
E97755984F5A0F61395F282420180769E388DA0E99B5689C875417CBA52D3F12
C9964D1FFF7A18A4DF336E2521A052D5698229179F79BC4F16A0689ACEF50FAE
0EB69D1A04E06BC8211764C9BA8B47372FFE67ADDA409BDBBF3CA3C6956FBC2E
709568E564EFA4D189AF4305D819B7553DDACBF03C1124223D52C4F5982261B3
53BD6145150065FDEA0A4F199E0BD68D1E5FA103309293EAA1350808B2BEC236
1FDA75E791EF3D8B40B1BEB54B4E0EC547CD0C796B113E7B1D6467EEB4CE465D
8B51D8142B0C866367FDA0F401034AA3C99F13FAA1848B62AA3B778C47E865F4
4580845F0999B96FF00E58C3190AC388C4D01CC8DAE6E410E215423FEEFB9B13
2EB8461984D310932EDEC2896B4AC40F9C5911FB837AFE9E5EA660CA6CD43A26
2C21CCA57555EB23811A94600874033ACFE7CCBD44D115F3AAA252E6027D1CC0
B252CD76122E3D1E11EC67E397567533ED8CE8EC3AD9B5BC3E26BF856C2389B7
6E92DFD79DE62BCBF08FBAB4888095E7221EFEFC1C3505D4C8AC4C76553C6222
4E9E43CFAE792E765F285733A24555973303EA294F2D41197C17D6A83F07930F
54E49F318D6976ECF53C02C0711E67B57EAFFCB29AB956A35769E5F9969A64D7
72EB73F3EB47DB5BC1CE7F1DDAD500A5D117716887CF160F0873B7D6F0F82E7C
2DD22D88A00E6BC52BE992DF2B76944336147C5AC8D4E12CA00A481F2499C0F2
9851FDF18A1E1AC3C449D6F2C58450B42B18729529B30DE791AC6253867C06D4
E770C924EFA45C0BAB1A64ECFC14A7135D63DB186F24DAC8E7865E639A41BEDA
3447B9CC0ADDFA097FF331A2D9ABCCC25FB9212A9DA22145B10A838D4B24E8DC
842255E856F903C698B8A55DEBB9CD4753C97D1555AF38ED9482E46268196199
F4BDB1177B3DC7DE2E756CD934C3CA302F3646F29F96AA07B1300975C63AF48D
D953AF40E05BCB4AFF445C75CCD26C3A1274A18F7A7C35B28C8CC46B75763473
B421D0355AB229791B52A03F80A66AB279378E7524DCC5FD5F549450C6803B60
091A0A16391088EAD24101B679A1A63D7A4813C085CF48FBF19FD696C7D8072B
120A6F8E820ECB5FD6B88307660272000CC718A5A4833B60A92AD587CF5CADD6
18BA02A02BCE61C376B68F6328A5CED1514BBD9AA7D1F124BC38A02D1E8AE3D6
A5E7B19230A3F3DBEB066F94CD0D8FE7F7F06DE528B2ED3F471F15B5623281E7
A2DA9C9CF7CEB2BF8873C5E0F46BBB2F735419DA68700994192D249EDE2577B1
CC9BB993EE058EDEFFC198052D2CCDE04F175157765359B6ABC3ABC4D5E3A911
8F37C4741907C19F9CB5EC916B7B704912B813E4D466059C88DD7F59941D4774
8F43CA629AE10DE7A2A4339CECB9198FC84563A05C3C5F4AD0FDBA1F17E17824
D14937D5523E05A21FE068EC3C6C3AE7EA0AAB1BA15736561BBE629C20063357
DD4ED9B5586293BE07A9E4D716942EB50DE59F7711962B97ED67821A125231C5
68D11C4D4CF58E6138D3E2D96D334A73F35279466B52510F3AB8B92CED1B3B07
30EF67A71C3E7BF16105224476A1BA60C3C1E0C14A2F87A30A31E9D232BF94F7
ABBA375D766F212BC5EA32AFC466276D7BD90D141D6C1FDF53752834D9E8F18A
61CCD010D89FC0E9729D344F6BD55EDB96C8795A9908AEF5E06AE184F87B4EE4
4DCAFF3CE0591F64092A43F280B827ECEABA66421CE51FDDC4B7AF3C47E03E95
2D47C6C269FE18C7A218B14E49CAA4E9F113AE3F0D60D5B5B204A3B4648A2501
98F3111D1B869BFE7273920F9185027FD2715F41B00B39ED965035319C5D0221
B7B42A05FB7803D0892F6950C2021DAA1EDB84D8BD556E5FC2A8BE2139862E74
4155C47015D35FCD24F790EB99F57B183E66DF857E72398653AA81A07DB02F5E
350BA327EDB324C6DFF2274B6A3D61D494FDE460906281D588B306950873D20F
A3CBC13278D0B29B213B17D513E132472DDC708E9669B9BE9102F21C5F50FCDA
33AF3B29F82B6EABD2203CD421C4F2099128D1C3566EC9A7373C3A46454E4078
A0989733E8E354F8922430B8121C9AED3491A1195E6E44BB51615E25EC792BCE
CD3FBD3C82D279C22EE50DD9B5270015A2C4DC01F9E29D6F1DE7D8DF51BCA664
33DA6707CDE0E1B29B196CB859EA249A44119770EC7118F972462CEBEBD4C60B
60AB594475F14F09F7B7CDD23C0DBCF7C332C173B8631DEFB980FAED0158290F
183BF88AFA8E328CC5C1BAF659D065562957FF049C4D7ACE99FBA6A695023DAA
179D9F9E239B6D382672A4FB72156B8106015CE32762530F0F6603027AF1B1C7
05C13E3BA07448F343FEE7EC78731AA243BC87D0764FB53BBBCBF0950249B2A3
FAD367F825B30ABAAF2F133D0ABFFFC22FE492F625827C8447FB6042ABA4321A
D806435703BD788DC99F75C3A51AE0B81D6AF0523B9BC63324D9EEF7377ACBCF
D6F39AED664E710AFBC1AAE14543E542A918CE6DACCC9DAC8DDF427DD88EACAA
5B048E4BD5ABBFC44F627B81BB511B7EE898294C95B27305BDDCD8037FA2C3CF
0A8BB95BF53E8B9121561425B674611582F8E859643E33AFFCF2B17C1063AF30
F93DB47615C14AD4AAC6A141E0955872F6082E7DB9AB152629200399D717F518
B3174AC4E4B03904D3E851A065A9A9394755445714D3370AACE4D4192E141233
CD8D76343B42A86FCBCBA30E020B958DCC141075B747F32A10AE8B3E82DFBC10
B8386B25AB7EF31EC79ECF1FFB0482ED03DF256CC83623D20DE4626FBBB8EC38
360CBC8416A38887ACC5E95ABCF4E53D8D4690A28A1E1942C3FA4C6AB9A48D0E
EA39A25607970652DE1252DCEE9C31FCBFF0FAF1D2CAA3E46738862E3A629225
0F34F3CA55C1F9F9087E6FC6651359AD9DDB16CAE1BECED529C5CD0B04FC2137
385BE0E76F63EB9F926E14882F4BF6E4498B7C2A2C0B9BB8A5BFB7A119CF97D2
6F27746CE2536EBC2DF18520C86966C36A1DE4782DFD8DE62DD1DF45C7C96F9B
701005F70710DF9C9098840D0FF680785374E0CD5FA29BBC9606528BCB2CC2C9
AE6C99A7BB062809E10D36AF6885FB8223624B505F5EAFA57B8CB3957E1B8A79
5D4003093961B823CD35DE6E9CF1E5C72FE8375C91FBEBDD92D941DD60B58825
18C1521B0E50E3FCE93C5F562826CEA8A855596D01A1407A7540C21D7643EC07
16928756FC9BE0CA3499F43257CE664A8B29A07AF0FA313458E50D071CFF1BCA
660EE294DF2AC0F9AE7A3F37328C947B01347112A31EA3E495998DEF2EA825D1
6D3B9BCE6711E031429CC89B09AAD89CC7F08DBFF3DD2C978561DCE16B256FCB
A3AEB4F9C3CF1D39120C5A841CC9BBDEFAFA641EAA820DB3BB2DF00419F5AC7D
67178C5742182725C7D905689E566F224C1EA78E22ACF21781FF8FE885820F5D
93D2DE584E5AA557EA91CE30F65D0919898C6E8852D5B7C81DC72B42DDABCE3F
BE7299250CFFEFE6E2CEBA5F3AFE76608695FDDA737BE911DECBC45D86A22191
BBEE9C86E10FCFA0525A411653B6766511B43DFA072C0EAEADC517E413D028AE
B7212F37DC3B5B7F5C0316D058121778E9041A7B8642144377110443491E8854
62124E6FEB38FDF8C10556655D427D59882DDF32FCBB1340C523C7D09E1D0D4D
02C63530FDC9F0D3176FC2F82601FD6218DB1F1FEFB7481761AB1896FBA2A7E8
683F0D72BBA1A4304B1B63AF7F9E361E57FFA78ACC096D5001E107BF0645F4CE
72BBD93B5879529C029497905BD4FE0658EE9CA27A8A39309DB5024C5EAC97F5
F8F4361D98B8C176ABD52441B02559F1B546DE0A148F2D7971682B328703A8A3
B5F92FEF08E50154E87405F8A34429C43AD6E3025CB93241B8CEDD6F29BEDFA5
2397A06127665BF4CF6EA334C2022D3052DB0C8D23AFA307FAF56D0235ED4955
F08F9E160CC3E6843699E4C3397D1ECACD8027F39E3E70499DD63429AC436AF3
CD45774B5DB26DD5B010194568BE473AE510A24171D3E53A3D6AEF2574AE158D
A3E2D3CD5C5CEDEFB9E2B4D158D8C7DCD2F7A88C20EAF34D2E71C3EF19932A20
298C76871F1F34DA087F81228CFDCE299B90251644C0E4764477F6328DC11DA8
495C5C443584203EFBBF994D02C1BD67947973526B23493D8023A13C2B1B69EE
85B291ACBCF9B196F57A25665375E465DD11AA26F5ACCFAC6D5546FA38F968DD
A3C59A5165223FB04C30E4846980EC5C1663B87CE2AE8825A28864D735B28414
31FD101E6845E686C2149ACA1C43F8EF01D255DC6E93ED9D24223AC73A5D3837
447B89C5E44E28178046A618D8F66D65BB573D140A446FA23FA98FAE8044251C
0A67012886BDB007DDED7E3CCE37D3D708FB4C2BB959F9270F7F55F2A22D0105
BAC9C7F3EAAB68390B3A9908AA71E4AF2CFBE781B10D1A0F3247039946F54621
3FEC611A648583FF18714EDE7CB1ADC78A862CDFBA97A8CCE0318500DE021DAA
98877221F80A245CE99910FFE6B3F4BA9FB840856CBCDECF5DFC2CD7E2585969
99BAD4186540DC2BAF81C9876181C5BF3B9F5F57AA77C972E776270C99F92BF0
629F86E2A6B770F3BD4745624762DAAE9A5B491C1E91FE3BAEBA62ADA4CD40C3
B8DCA064809DF76AEF8A64FFD0D34B27284A5C2AAA6CCF35E46625CD80721B0A
D7C2DC120774EC23DA8CAE3A4C3F60E8E8E2245CAD5D6C71289618479F0419EF
52F59B5E6C7ED3DD0DF18C110B9940E97CB8F2B0FF2424AD7DAAB6705EFC878C
3635F8843219461C01EB640B7AF5D96EA33C8B0811B8F3BF2B88C96F84D2D1AA
7F49FC38A85E667609EC3AC708FF5AF6E5E4D192A7681BC2A8C8755EFF278D29
6FB8097FFE58FA2BC9385ACDE80D5F8A49D6E3C1C44B3C7B0555964D0D808C95
AA32F03D6C4C53D62AA055681222617B120CB7F4158E13E980CD726A98F74CB8
52D663D45B50B26325878C5CEB1E7762B6288B531DD76F698186DF6558A7D8ED
0A78E0FAC02DB659ADD1E9990C2E78D9E7ABA94825027473F37CA80518480DA0
6D8F8C595E07707A11B19C08BB3928BE6066B5DA1105AFEA1B294EA5D1F242D6
5414A95872193EA274CB2751DC6F3E2CC8DE8072F38FD2EDA3B90DC6A06EA9EC
747B6CAD29EC5A21312687F822C98427CA61F1FD70B3F30E64CB7CDA4017B0C1
AFEBF6F78097CE5680EC173561C0C632FC2BE42812BF55827887152BA0CD5C2A
F8F5A1C1D17623B3460E3323DACCD156111331E9E820C676AD5972EEDAEA57F8
6AEF7C9459D61FC2129BAC144B55EBB8E5461C635C268663C49E665E9E9B1087
73848FB913B4CF432D4A076B30AACB6D18A25A4AF59181645576DA3B378B852D
B592EACFFC826FC3AF7E29501C77C9CA665B9711B0587A91F8615190DCDBA423
D64D169013FD7D6B89B5AAA8A32F408CD920B8449BCC4612D91612CCD9781047
D40D20D573D3E4A155765856F9C6800DB2B5E0CBECC782B78A35CE8D8C0331BB
6CA78117D62C0912B455E060318DA4875A9631479C7175C77209D1FF2131781F
3906C0803FDC650432EF0053010F63C0F2633C69F016B7B2742F086528834BEE
3A0F8369A44AA2D0E0E96F7E1FC673FA4CAB889AB0DE93B096B7E0E79433195E
00D83250BC81FAB57808479FB4F16FC3887349FCE09BE830EFAA2A96F7E1B466
54F97103217C92DEC5734066CD02DA5078A3A8EDE16C382CA37ADF57A1A81709
CA6A834E137C9E2E6B51A99C442B333621A0B5E98A3632223CC251CF72194C02
1AA997E4AE1563AFBDB3D916F73E467A9195327AEB512E8802BC4721C6D0B6DC
5EF9AEDB98BA883ACD193A665414527AA0EF24AEABFDD994D7347DA871E40072
D99103F5B99378942CF49F3CD2ABB9473E40B080B36691286237F74E8474C463
C8903C4DBA3DC317A78056A3C3EDF2AC2B228BF8D81A7FABE2E049F5E1671B06
6C1874390660C14B947A24A30C3729950FD65E90E3CE0827A24B996F9E520448
CE7EA16B5EC546A8CD9E1D6F2A5F3DC8E90A21B97904E12EE50ADF5A5BDF13E8
A73C1D9B26CC4D93053F5FF37559B5CD5633E21A0720375342B8752BBB269E01
9E2DF211E578DFB27DB838CC94BFABA286E37222AE07AF6FF374BF75592A9E98
CA905FFC50B31978F9CC1579F47FCE027157C11D882A9F6B05A7B35833FD0294
D298644DBC0D1D2E4E8CF0853044ACEB7914B4B81B8CF24E4B9BC5DE6FB9B7A3
D1EF104603FFC6F11592E02EF08B780E5150A53F3C20F8D68399953BDD5C6BB4
844690AE4BE411C4E5BD3F11442FFE44279110F3F86D4A8C12BA377F8013C5AF
CF78EF1B5FD119299B57DDB2710B091AA86CEC90A5A7090648AC9744BBF863FB
6D5C8C66C3D1B67B2952D41641C2403ED09DE799BEE0095949F22EAB1591DE9D
F8FF1D45DFC4B1604ACBCA219D2B58416123228A79F78ACC3875616D6EB9F4BD
8A6D8A68EF68423F9A4FF38E38DE5D6DC05A59E3036097F666051708792A5089
18B5396587640F5CC8203C7331FB8CB9AE143572154E8CD674E3426BE6F204E8
95B8F66CC20680E1FC189373267A1B746F0C68302CD2262A23E63CC1FFE7CC1D
3176BB6512D4FFBAF2D2F68DA3A67E064832A59F29BC7B8748D1CEC437E17687
158E6CB517AB25ECFFB972AD71CE5194F5687F32A13A4C159A62BADA02F7BE28
53E7AF51A0897B22D72F0F80DFA42F65D4B761A85276F43DBF37A12123E63321
BEE521AE6E222909211E814EEEE9D555DD0445995DCB46096F686C3301956B7E
05DE559DA264A53F94E0EC66A6A99D4561F436D5543D4FF2EFC9E1F64F1EEE98
DF8FB1769B92E1AEF1BEEFDA5040AA1623ADF29EB746C08D7E48C8B7EAB6BB88
A9B6505781FA6EA48E07A67E0AEA543AE55C98B340BCB7ED59F567723624DF30
AAE8685E748708D8317DAC615328035DC732C45B1D891EAD1D711B9307864314
B9EF98E558969AF16DB801465EABF7021EE137F22366F95CFE09A2DE80A30A31
E9D23869CC5B05D132230D67D4D3CD375C4B133BAD6D6F89EBCE757916081C2D
568B6316F558B6B0B53A13D129BC105DD50630E1FBAEC50F70CB368F4A8F020D
9BBA24963A252BA1DB8EBE55ABDB3A39532D192FDB342D3AAD49BD2A0BC72062
B3FFC8CEB033A8F7274C6745132524C31BE634F1F770E2089CCC72BF4EFBB4A0
DFC647C605B1D7746F8DC8C435C8ADD97C79735B4711F82DE9C6B61491B868A0
2241F7AB4A7C846170EA69F968215FCEBB94A128BDE4988C85E461210548B346
0BFD9425AE6E57B5C958A57920097495048B07029912F67E46C2E790D0E6C923
0F9A29AB3346E2B1422B3E8D92B37E73E73B52CF08CF0E00BE533D17C61D2A17
CFF062C4BEC0D0B42DAA22A24AB59426EF1B06B9A9A3986AD4F3DA1A90CC9893
1BB986507183EFDB73239E683376BDB676EF5516A87993613FC11E78EFAFD82B
0A0122815BA515565A27CBA95D01014D882E3B71BAB26602235F026F9D7E00F5
A884569B10C0FACB77032FDDA94199B106E23914C298500CDF030DC7FA4AEE72
B231B88E71B9D3CC8D8924BAEFB7DD06DA3BD8E8DD4E7B0112744D8E48832BC0
BFE6DD218619F95A2DC80C0F5C7D6336E0D3887330D1BBD45B867C0C0674C160
B2EA328017DFEFDC786E9CEEF48461506AFEBA1E915CBA1E85C82A6C3B13F756
9FACAD395BFE601C4E96D4E7161D1EC3DE5D578B4F2DC8C9F74AE1B93C6BA9E5
00DF52F4BE8675CA06CD43F2B8EA0157C7A82E60F8B3EF65649A42CF5856AB11
2633DC84C9DF997D62692FF96F58CA9412993A4823E64537896B3DCBFDA85739
AAAFAA1897DFF618FFF62B10812C5C9BC654EBE216BE0F6AAF6A68E64BC149C8
BE6BDE3C37EA5A7409ED92E73B1FAD492DF3C98741E1FBD4E7B60DC1EC18DBC8
653DB17BE769B3BDFEDA4AA2C3E26184D68D5C57FC8F68D9846B799D169D77A7
03D10035657D70A72F78D221A48DFCCD59CB0D800838D843C5C336931CDDE649
EB572D7AA6D42628083F409731FFDC364B86646ADE47FB26A6046D8DEC126678
6659050D6CBCFEDE4980F86FC91C453613AA3F4443FFF918C251D96EA753B32F
8836D2E49B0CE194D5FA6F139F63B91571AF39B3709248DFF78C1B7AC463F5AD
19C9231BE63623D45B6C226D3CFCFB37E95047E29BF60E3750460AB946CF5604
C4D1AA9ACBD47159142DF7FDA288BA816AC3DEDD8646A2A49D11A353DE9434C1
AFDD0DFD80FBF5AEC20D02790EFA087B6B38CB7FDA7E4C816B30756FC8E29CCC
C4F15ED5AD2EB7231AF3D3C2EC11E9E8AF363A3AB5094D53D034D930828FC6A3
2D2D28CCA80BE0D75CFE65E1016301011BBF5E0C9B099A38501F23261A0372C6
F83F184334D7375AEC4EF14CED70C3D0E532B67D85AB3C9F3552B64024927ED3
928DA47FED4BF4743C8112043FE9869EB497024BCC97D4D3F0C0E791641836D4
2AE44E1350C49F3CBA01202D069DB841E98FDF0A157151F7626C77D191F62DD7
3F8477F0679B4C7F93433D7B98BEEF5CCADCFAA1C4AA0278657076A2415CAA96
5F9F93924BE58E0D1105B6B9BBEC4D30065D91C3DF476626649AD467873373AD
64CC6956EDD6A5D35DDCA329734468065E6218DDCDF0E2192521ADF5F7D940CE
90254B78D27035F3D01F2DA636E035FB5CC2BA391E316D66D2366D93F2BD8146
3ECEFF71015C675257F65B680EDE50AF9CFBC191411CE74A1A569E7C5DB42A01
4CDBDFB9309B62AF4C45044EDB952D585CBE638D9A6B5A3FF937C6CB18816705
4DB16513276827BF1DA1E516E5189362D4CBF8AEB923B67A0236AF69BEEBC276
534A805F985987F9886AAE004D80643C2D6530D543862DEDE38C5949F9D03D84
143127BB5BC46DE10F58CAFE5D5DD1C32DFCB26B3F8299146A365A40A13ABD6C
B32B69CB55983B96C0E247CC0DDB1556DFC3B319E0AA3CCE6DC7419987EE882F
8B8E7D0016BC1371C0E04EACA3B6BB0E0B5DBB569C2DB5B8F17D2BC4C11067AE
5787A32BE2078546665EFED6CB8B6106B3FDA2D58F141E6462F03CB2481AB9B4
8C18D6079708261C94F797BEBBE289F21B58BC63B12A40A078BD25BB5C6EFA2C
D003B3FC8C3756D7339C7651C88EA665173206C9A2EA4F990890CEFC410641C3
33FF05A2EB89D7F32F8F13909459423F8CF74727074150AD1178A8DDBF0147E4
835A8BB911F6D9800F97FDF7F610BC3DEE12A1D02DB421FC379C96C4AFA8961B
46316AEFBD761966BCFDCDBDFA8AD52B1A6997BA54D7B5CD56F06800D64B46E1
2C9B18AE15E6885A6296146B990FD81536DBBED070DE0B05B1164EA21F9FCC5C
7F2E3A7B05FDC8023704D721A6C545DCE7007BEC24F6622967C86ED8154E900A
9DEAC70CE87D949C41E68E65BBC3A1EE19173713D33D91A46503136D01ECF610
6A6D41628B1B22E62BA22E214CC2861CD7842CDBD07D6C6D97A1402BBD8A420A
B2971088F9F2137F7A7540C21D7643EC0716928756FC9BE2A60821D917872F30
204EF8B9F3C6370889E5BE6CFC4FBC99076675BC70ACE5501D8F3363CC36BDB8
206EDBCA9752E671B7C66BBDC446C3A60D6F9A2FD0F1F13D5D5429EABA0F0D01
62EA23B23ACB6C0E81F953CD6E060074021E63F39BCC4FA1D13203952703F57C
C0F852E4A562E91B4858E6E31910A8EFEA0A20AB8FADFE78C5CDF85CACE642ED
DCA33239B35FE4ED50832876B527CF8EE1CBFCFAE3172026279D77FD5589D5B5
9FAA7E861BC655A8CE7B00252BDC2A6DA8FF7D515861188B4049D0B7A839BCAB
BCB1611E27F8EEA2435646E05417D6A54FC675E8EE1F8ACD91E785FB82B643B6
0D1BACC13A211F0A2E3B09239C9ED44EAE8375F5879DCC919B2A6EFF6442DD52
B698F01588D18F96BFAC9216FB646F9E429AD49BD4660231AB25F6F4D01F9FE0
DBB0E657EEF95571FE60AFB6A3DB5C6B1F3C9347722E7CEAF587130A2BF07E7A
689160AB1CFA961EE73F5504D726CC98D31F9F3A446D4DE5B8C1024D6F0F00ED
59AD59B3A566B441DF71AAE2A07793E070030340916562BA378575CCBD4AF1BF
BEA6DB0486BD8BC7B3E0F2ADA7D2EF9D8075050C15A0A1EBFCC75CA7EACABDF2
4C09FEBC95E755B0C0453E61C3DE82902CF91854D0CF82A44CA3DA52D54D2C46
84F9699E670BC58BC526CBED10EDE77EEDCF5493AA9381B994E844FAFD63F854
7F07914526CF84D44FD88E412860109FB6A4EB6B2A404F1C75C95AD4481D919C
C9128542F96DB697F57F2B00C10DCE4B8D69CDAC70FB7D888C01C053FA1545BE
AF5EF494770338A896F9B4F27A1E128D6A4DAB6A908B5BCC4FC55705278F9C85
920B40040AC107EC246894204EFD1DF5ECB87B0295B93C5DC70A9B60EB26CA2B
4DBFBA92C77B5A5E2C6EDD2B21141911758B8AA6206E80EDC58B45E25849DA8B
7F26F80DFF39B1198BD75AE658C0A01CCF15D79EE76D616C62D15513F38F9E16
0CC3E6843699E4C3397D1ECACD8027F13955577437555607653B1B4E8DA1499B
C8DF77FB47DC013BBEE2E4A0D38091A3CEDBE929AA5387CCE090C73931437DB7
3F8982F2C051BFBCA0987DEC8B3BF8680E9601993DA49DCA6DC3F125BB3EB4D9
BFAF5272EF837073D7F8A320578FE386BBD02546E2E9932A5E1BB553B79FF544
A0C6CBCFDB8FC93B6C685A9158DFAB201B4373297ABF15F6F09BCEE902685840
FACDEFD1A3E1217775E677F1ECC2165367227F5F783714F9A4D70CEEC0876CC9
94B165B55DC9CDE985E2315CBE8D9635283A187D181C109297A7F06565F00A45
6E19DACC83FAD1E6733C4C28631A481FE3DB344A6D403FD46061956B961003EF
7BAB719A4B18AC8FD84F5D3F9D0E1D1086BAB8ACEE798EA550437ABDB26919AD
5AB07FCFBC7243882880BB18DA53745A07D5DDD9206A382610275D0131A497E3
7A890490DC58F20DFBF01487E8804D9F4F7B4B416BA44C06165301A7B5BA482F
30429F1992B2F54054B02E8DD1D5763847BF16EEC342D0F4DA3DFC9B656EC232
577D2C17CAC383425B4EBFE2804F3DF8B90D7F389FA050E83F5685D42A883F58
1B65EC6C8C4FDD3C1CD1D3F442C94530491E0B0956824E1502E5957543CDE344
2911A7A457A7B55535DF1E6C43F4754FBF01CDFC8606EAFFE9B4C4C326021A0A
593D2C5FFF9845BE58AC2C8AF96D8D22A179B185AD3430BA2C1635E8202B7688
893407327E04F659C4B3717D5D1486FF43233919DD57C23D90A9427D0C667822
F37568887A50A86A8F82A36EAB6BA7AB827360EDFE62E1F0F68F9EB4456FD82C
90F5D0F40F6131A69FA542CB9868737617F994D0139D37EEA1CBBB23D2CE49A0
F38BFDA1907B8DC7088171FD000997201E827D797BBEB6A6820566EAE5874E7E
5957E042E1D83977495F98E090AABC475F427CA28CC472E8E98BCFE12BAEDB24
D242E49D3046A83DEBED74E60BEC9F0D07A47A43FE9C2919E4ABF8FA42AD68A4
38D77A97A8BF392634629F0D64BA74DC83ED76327F50A5C7935303AD6D3FD56A
5142B2E75B73A369BF8FC1F3CD447FEAA0E555B14D291F821D4D841A9CA45F61
E074C6BF0DBD8CA22E8CB9BAD868DD11217286347811F74FDB2065C91A17DC31
75F322B4F51A4B7AC4BFB1E424D63948309C5C180762C45E76D9AA5ECB280E0A
B6102CBB5778637D3C050A18A4565DE1A8239170701B188E93B53FCBAB36C5BC
509A5C4069C9B72B13852EED39189F224EC803F5EC6DEADD08E1CB6B7599589C
43EB61A3AAD36A84EB501E8E8B4052CAA2DEF6E133B7E5D59B63047CB192019F
605B3A045CBA5B8658D4B6FB478C54F58F91477B382A5ECE37B171A747FCF01D
F13D59B8FA0B07C305E3DBB708F970397C3CCF8120E211DDB78A87DB2447C5C6
6A3D525BA0CA7640C6DE158D335D030BC8B2A6231BCAE8D890451A29FFBDC29C
FC9BCBEAD5C173C9A04DB881CF9FC50CD85894C3E248A65DEAAAF551FAA6FF12
A13868761A872BD044ABBB4A33C09C16B5F6E3DC2CAA208519B926058A9040CE
117380D1A9AD805DCD44353917B4BBF0D00B972DCE73A365E80F4925EAA0C00A
25429E5CDE5580B4FF5C488E0C33E1BB3D2522AB5CA5C83C0A1025DDC144B993
1228C7C4C3401863A258B932725A5458A57C990E0D91015615E43DB629ADB9AD
4A29D4B4AC4B8AE73381BFCFFE738031ACEEA8E60E0675623E7AB357D3924957
163C8762BA6ED73F803A5004970097AFF3A10F205FBD570BACE3AF956628CD59
8982DDB0C14E4C78D4899E8881375CC8A49014C654236F730F24F1C124EB5B80
5FF6E991F5CA9610FA9CAD2FA5F1E7DD08C6BA32928970AFA09C99BF46BEC173
B6949A306B05DB4F9DA1526A6057D7802ECFAE73C1C54A9502514DA66C23B99F
35B379D59374C2B547C7A39ED9052883039BCF9C3A845AFE1DF3A20F483756F6
2D196C4A60FB178B2B438C090FC71DB4A4E15A7C760348746E8C462595B982AA
88A12F45244D1D09553932606FB2496B46BEF181DCBFA9A069C5BB3AD0CF3FAF
7A92C825D061C571716EACD338736F13147D4EE94F1772C74C9B3A98663367E3
094BFB1C89C4D9F57045ACF8004E0F77DBCF10D87CDC2E7E020DA9AD3712D4BB
D739C952A4B07FF08AD492C98D36426DFA2599D9003BE109059941739A40C608
1E6B0E232A81700D2BA5942547BA15A5DF3E3B6F051B127ED5E522C9C9C1A94C
C9B18514554CA31A091395DC68839F58BDDE7F3E02BE6A6D33768676386D22A9
B777A83215FAE09BC4580549EF72BE0094326441F039FDAF9137ADDADF9B9593
BEFE6CBB62AA7A42903ABB374293970236E3591C096B6249EBE37FCCA8AD250B
5CF811EF3B85AE0DD3EDF0EF9C26211E5E2BE801352396757C944D6FB1C8AF0D
5F5DE17172F15E0ADDC098B4A3E1DFAA249366EB6DA78032A7F2008538FAB40D
2E238BE37142470B65BA979F1D072896F0563B6D12592E95D08C23DA200A61A7
2DC097F1AF4ACB9B32EF6B78F1CC962BC50EEE30F698C4E754AA828FA38019F0
EE313B4CD063595C10C26A13843E633517FD43800B1B77DC4C9F189B86553D6C
57D12A5C1A251B63A25E82E19099EF44E14171113AE5D650E23098337728DE9D
A5CA7686ADF199977BE949D618776A12F11CA010C089199C2C65179557800069
639C41A1B68FC7026524FF4D8BE7AD86CF46488B1F8D7C17472AA94D9A0D0028
D3091697EDB727A6604ABCCD7BBBA8AA32977A15B5A7B3345976C356221ABC23
A9CF03A3EE6E05474DB96CBAD63BC34CFA8A307B28414C278D02C3E7FD76CD02
4927BE1572C195330BACBD6664C843B874161595D5CBB9CC443E22A675AA88F9
2AEAB6185EF9F78665F16FC1E02B6B656425FCA0F30DBEFC1A167572ADFADD2C
F7ECDFD55D20A0A26EECFE43089FFC7691546251AE4804899E6D6F889B41DBED
C57184DAB42FACAEB4AD3AD06A628311DD606F4B0F1CAD62C29D6D7048D9FD1D
095FAFDE728C5859BD6B431DD92BC4A5B9E1B890C44B7A032A230F22F544ECDB
126958C1735F79E77F54A55CD7B349619176013601B57AC77C9F3F1E7A2E450C
605D72A585D7628469D6F9BB87E23D909F91D0ABDEADE42E3B0D978D8A0B6454
2425E63A4C29F5A8A57E47C1D80533652F882FCC2B69121E1A264E87FEB5069A
A7F3BC797ADD7FA4ADA2EA568B03C17050B4DE6F75F1ECA1D9FAFAE53216317F
B7EF19C1241BD1FD7E26AFB986C60AF7A82A515669C8BF8DCAA2DD47DD0CD791
2C88EF68BD8A97E50D0A5F5658E56C6C93312C49E18AEF5175A05063F36A5034
6C2C1260AD9806D776474CF882E5D07FB9E29E7509C408EA351A9F1F37EA9558
ACCB37499D342AF93BD215DB1E43DB17459FCCF7BFAAD3084B98A746EE3FFFD7
2835983C9BCA4BF19163D994A1D0FBAB625BA0C927315D7B194A6840FD10DAA5
1A17FE13F4E57DE95ADF5C92D556A482FFDAB97350F66340A8E2C108FEEEE51C
94C843815B50DABB77DBD374C47859A96F5E7CBC9112A003FA08813DC32B7A3D
D786E09063C673AFF6A91BF6DEBC2049CA4648559D6817DF36093A138F2A8524
18F986A3E77D3B109B8CEC9D62BB8117069F93C7A62C2F627B83EF5B55BEBD5F
7ED7DF227816112A111EE1067CC5BCC7D7FC283B2D7B8BDFFC8E7DAC742E5A06
18C761BF2D2480CB4BB23D78EF21062465E58448413B1A84F7F19C8FB57F95AF
A3AAB1E33D3D5703AD1B21C0583E61785CC39FB83B1590768C128081A053519C
1552694D69F3F9523BA34FE2FA5AC8C16C9A686083B1F5F34218D0A046534C24
9A2C5719AC14FE18EBDABB5D218525A98C325506EDA0952700420C7BAB0782B7
B8139B57403CEF55B3C9B4A6C83E93C6E52BF73B0F1F2AE67873B612F3C3EA59
AA8CE3536D7510366CBEA870596FF3A64913121492A1D37A5EB5D8E5403FAFF4
02D0227AAF9751EB52BE334AFE2350E8C1909B970586B8385D756449378BB654
4A987E495D532C39BEBCFA1D37A4FE4E9B7DE7EC0138C5200D6D5393958D2073
5210774D51512B88DE75A7BD105E3BE6381E7431EFE39B1613AC25A5ED7602E9
43B90E8590EDF3AAE956C26911D9CB88A39EAE61844B756315BEF3C9F035A746
75913D133267332370042B68605B9754E4C253D4C5C2ED89AA3362A4AD342255
0A6BF0278E8B69213E9149F97A219286E4C286A77EF1DC3F36401FB630F11333
7A1326CB152483185AF398CCE9E4FB43EE06C99DFD09E9FB2B178DAB7E37FDC7
7156A95E029B7DA7C37199E60966A2786C91304BAFA1D7F57CDC66A6D883F9FE
807012FBAFCB83AB186DC1C2E5C4AADD029ABB84FBF893A768417A6F110B3A3B
CF0A834784C46F18E836873C6E45FBFF89EF8E3E74C29F2D10C1EB55CED4501E
47F96B2ECCAD1E8C3975583D94CEB95C98105FCEAB82DCD14BFB14AD9FEED1AF
58A7572821B7A136F4540FEDB4E54FCAE9688F7C7BB8A8D41C338F79DA95E3D0
99539FEE56C2CFFCB549B80E2D8A353EA84944C3997F1AC4F3EA21E0F829FF70
92F02F1A2F736B08A98453BFB6CA4A4B8612820BA47EE51C4D8806BBEB4BC4CD
CA4FE8B998941422B904C596E9DD5B8A144C397DCA76976B0918934029D01CEB
CB46552141E6D4D56A422A625C96C78BBB7D8CDA26EA5EA2124ABB0EEFE4A61C
D464E0528DB8BE62B7BCAA55D6CE19FEEB66CE25268A3400A5F6B68479FE0F6D
9AF4CAF014103C567EDCAB5DD93541608F891A3A7C8C1A17C985C8FEE4A27069
81A55989F01BE3E2E8DEF2DAA5F97AF8CF63C5DD123C21DC3DE72468A8279A44
11CFEF3CBADFAB8C2100122FCBED8B5056902CBA4F1C45F1524E9DB701EB6659
ECA226DB4196CC0AB0EAE4C90AD0677C7A7D213AC5598D9AD6D6B887BD013871
BFFE6BD4903C0A60932F78C3A13BFCCF02B11AB4024C5EAC7D483C17095E9AE4
A33811109674FE0E22A48B1C981EB56DC8E7AAEA51ABB8CD3E426FD1E0105EDE
3AA45B8E81BEE7245060D63419C99C2646F639E3CA136651B9A27BDF5B2249BC
5A921BE87460B502ADDCD7F57752FA5BE34917CDF4996EA3045A5EF4217226FF
8AECC7059117B7A6DAF3FF33CAB0C97F9BE0AD9C2261A8A6EB80E474ED4D5A93
46FAA7A8E1C23568A6EF6BBFE3FC5ABE6D474160638AE0966971C6C4A61BBE21
A07F0D316B24889327F75FF8A70607D13B4ECFDBE4FA513EFF529D4D17EB89AA
7CDC1B774799F2B706BF0E6F39672547066163D418A5D9401CCA80086440673A
B3E0016B3285473E5C49485AB57803820F9BAB9C41F137F96ED8178622812D47
ED023D3A05BA7DCBF621318A96CD16A541061570A67B770C858FB49F46D428E4
6628BB4E4D5C98AE04CC4A4B26FC718017206EC2B53A369C79DD0FAEC5D2347E
992DA5D9310EAC6CD2ACF0F2F65D01AA5E91A16F21183364CBC139C3A1FCC863
6EA581E172BC59674A6C60A3EC3341C79E13CC7FAE3DA49FF67DE85338EDFE22
64A807CFDA0B5B5C716147FEB8839CB9377644DB5DCD7111477A56F41E5AEC7A
993DFC150608ACF50A1D8393F0E62664AECEA8B63DD8D13E10EDC6D69BCE79C0
3A189BA8D7AC4C65F3FC491E98BE0DE15C304B8939F9D470DA7988D9CB7005B4
CB51AFB32AA5ED3203C372FBBCEB2916CEAF41B7DACFF5A926C5B6EF78C80892
11AA574C3CAD0BFF1B62BD3B29ED3F00D27D8ECFB60A4C9F3B17F8ABBB71F0C9
D01A57FEB650E77DFEBC07CB2BF04BE9DC9957BC3A799BCB1A588466160DC018
271A988E14DE43C68BA0F8CB21775FBCB8AA63D00CFB30955DB9E402220A7F2A
EB4BA61D45B537C6FC7397C84F25E66C7EF3DB22D8E8704465201D9D8DE4143B
F579F3712142CC6F4CE57E2078050F785A224FCC1088754816D9E9DDBE41D163
F90AA7E5D84D3B2030DEA92B2062DA08877558D621BC4F7B7937241D2B585937
6A1F5C67997CAF905E9B5CE444D3D9C00CB065F6A61BA2FF6177559D080F6973
098E6C0C6EC8CE7E4ABE10F8B59EDBDF80DAB03656524D2E94ED301C40FF9A94
2FE17A103ACCF45CBDAFBF48A0A59BB72012BDBB42B5A1DB66540BD372273A9A
036B9B9F4C42F2CD119E1781859FBD12B4BE7911AD564378A8C04106B8C15E9E
3E6F837351C40C7A90469D11BADE9420A908020A613714FA2B1B5040093E587D
67BC347397249278D97710D088F45F4608214EA4EA7E87842270C2341F3B10A4
BBD58B5B9626A2D98949AF4B1994032BD93A1D5890550A883ABF76B8A2A0895D
E6F1B9E34CB3191390BD075D81B1CEDAE278E0C5F89F98EA4655B39F9FB1685C
E01B824C19DCD671A212FFBAD75A3748396D1F166CEA83CB05A760047DDA9B6C
F7A9A41D16305ABFA9EC0473C1706B197C0D28909CE17F8654067A3C4B276AF1
2C62E5325A65434A3A325CB573DAB415D94CAED3DA6B04D2A3DD3D27956AC584
B5461140502F8207A7E493B3B6AC3EC938E701D290530F41D65FF6AC211BC3EC
B91215F1D885A95AE5BCA03ADAE76602C508FDC3DC6096CE2F6BF0D8BCE8D51C
AAE2B51DF55ED057FD50FE9F519BA8AE0FFFEE5372E0ACE8B90DB8A07372CD5E
58D12C974019CF045979BC4E50DEE00CA198EC5CF8CECA25A17AC7ED1775DC89
1559CFF03ABE6B541D5CAE704BC0E41341AF22E30C0DE60F9FBFA7DD64707DB9
B40B003FC90E4B48591C4C442B31543CA4FC75FF42C0A4E71D076880D9815EC8
201369D30D36B02D1D02113C083C571766CA89105E958463F82B18087A03A9AA
2B7B5F54B63E820F48FDB6C406B5E79E03D0E4192A0F172243DEA1F0564B21C0
1B4A98025D7FD78435973C814DE5CC2534CA2E4DA501E1AEEDE80060B305F2CD
F6A8462D0C6D256FD7BD14533EC58D9CAED3336B37E91E698B3F707BF459C951
5DB558D95614F0CB6D0A3A6AE16B00499A4812F7CC0B5D3DDF87EDAEC00720AE
3BD4AD656FE1D99143EBD170E3EA6B1B3CB2DE5D6300D6E457526509C47E8D18
8046E83AA60FBB2B6B11B392EA97CF18462F840448470374D4F13CCF3C6C9BB8
276319444B24855B7F6F0053423D7B691649416E3AA4FF3CA1A7B6FF3B834E9B
D69C4734930F8364DC6955212A667921266761268363FA5F1D24656426675755
1EE1FA96D9DAEB909EE8D2A3D7805178E4F7D9309C43BD5D68F6C1781152B2CB
4C6D6AFEF45D00CFBFB6A00BD0A1EB77E5F3B1AC99921DB7627F837B63CEB567
DB13A87191219471EAB1C56B29DB59E1D3C018F669025C9F11EC89685D5C9F5A
DC0B2CD22F36C2C4274308CE533AF0B0B6E9F197D6D3EA9DBF47E583AB9995F4
D80B7E5EA5D4207DEBCCF6521C4A67DBB6F6F653164C501C949DB9F51C42B0C5
AEE083A24A55C13CEBC22A2F389062CBE1F8009B0F147A36A0D3F32502B2C034
EFCC4903AF58E39EA285CEDE1E583C8B5D89E2A605E86E6431BBE261B5CF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
5296FB33A7C728385CE3A6CF8AE664B90042462B94A015D5E8704070AA59636F
6DC7EF0DA3F7829296DCB0F695A236FDFDF7F6259B93A89085A7E9C818578EB4
A5B62CE7194D5AD4ED8D7C0A1593641F0609FBBBE7EEBD2D0C6FCB75E7A5907A
D7EDDB8B14D3295A425583E66138AE558807F859688E51C1788E04F8FF6AF035
3ED1B6827637A8043A451DED8B6A6F25C04968AAB2910DF1314D1B4A010CD4ED
2FD8455FE6FB032968765E65BE3556338A12454E8BCF6DC82DF9529B9BA37245
C3A13FA42B9C8A9C98B34D79C82F9E61598ECE57E551BF193BF37ACA22B901DE
D22B528806F4D4A0BFA0253A5BF89BA1451F39C395A8026A725FA8746E36EA41
C57E7E0A23C7592786987A899E28EFCEF81C18AC249388867DA67DA44DF3E926
AE8AEBFDFDD85BFFA477D990FECD8CFAA40F133E5B492B50B5B0A56669AE03A0
F69BA3A59693416B6758A4EE5CA53A9E66FBA19A3AA6E6BAAF7F2B94F0A5C9C3
25DCC88F011D365BE2C51E756ACB75E7A5907AD26E8B77CFE195E6475585DDA5
05C026F1091443865262C00410899846364CD8E9583BDE06B2829DC3904AF83B
01CEDB20C2D8530FF802F8CFE88887542F94750DC5001B5C38F173A5EE42C15D
9A0F581874A117F879CD7E81F552B604740EBFBC6B7601DC7DF5B3174EFFE77B
FE2AF011BD03EC5B57FE106D16A51DC682FAD1DAEE7C768FCD1CEF1B75E76897
91A637409A6A7F44262EEDB22641AEDF7A9A1D2A485E14007DBC2067EC814CCF
42A35E4619F51C4F12145EAF481C3697EA12F2677A04E2EF028103B64F1AFC90
5D4FDA65D56DB0773B568776D604F36B0D94CB7766DAA19066B51C2E31EE110A
4BACD9355ECCF69B62AACECD4A1243D5F01C2D25C3F777A2DBEB151A0FAE7ABB
5E76B887951A1B8833BB78C8581DE74B89229C9FFF5747D69F8C3518303FA135
D7AE5E37DAECF82A1D7750F11A63015AFFA553126432B6B3DD25FD02965BB82A
69004D4313E3F66EEF501EB227496D824A6E1CED144F9AE5FD1121BAFBD8687C
4FB3BA34DD2E646E8AAC2DED495AF3A47B378A34134AEE38027BF502A2A956CB
C0B7AF7343A81EF370B7BB0A870C3BC2CC67BBCC954A4C76571C12AF0A554844
31F2E22F9461B359506FAD57642E6BCAFC8D8E90172263A50F04B5615CBB4B6E
8B4F056867C372720840A200562E7ED6D1E5BDAD28D36FCAADD3CA5E7FC82E25
F8E6C13012055CB747ED555F029C0A88361BC5301398269F0F11AE5E617C661E
CD64E0FD0679EBE495C550C112851622DA24ADF605B7C9ADAD9ED5550B3A3287
0ED089C9D55A43E9F566478C522E1A4B03E5A4656E90CCDA8AC7D0D4BED58C17
846DE78D2737C379A1B3697F30F86EB2889D23EC2BB5EC9FEDADE9AFEDC2AADF
0E960552E0F2966C76AB505623B1F46CB4229616709EDD40A4D153C58F0D6712
3D50C11306E39A48B2DA623DA30121ABE5442663C93CBD11A5630E6E1FB4DE20
0EC9572BDC4DC8BDA579947B7ECCF705322EFC4830D830D0DABE069822B662A1
6D920502D0BC7EFBE7140E02C5A8C8E92F05500B01C729DB9E22F46D55A3E56C
4B5AB58AA92283102821B2730D8E6F61008EA274290FCAA826D44C8C20923D4E
4EF92271A90ECF459A7BEBB3D1D4344A398BD702271DEE3C91A3A139F60B96DD
D6EA56DE5115610EDF097D94F1AB5A98884B64E29A062C8460299AC513AA8043
D1652E26766A2873D48341C379E04BF4B19235CF735AF492590663BFD7075DF5
3BFB6E637C516F54C844F3A47BFDC77C6DD41819ACC391902FDFEB517B2FC61C
9D09AF3DCD4A3D199C7426D5DB4E5D19E0DA3C06DC124148B5B130980FB7BA2D
A7F0D48F95169A778FEAD05B3152C42FE17DD983F913474D367AA58DB6A7614D
AE25EBCB2F386F60DCAD8BF755C97647DFDC7B1815DCDB8D5473B9E7DACBF258
C35DF634E48C5E9D9FC076ACE2627BB83486818056D280F09997BE5F5F5D93DE
256BAC0AEB0A22D602FACEC94B27EC3BAFB530A4F998934FF5A56D867AF11113
B166830A51DB0786C8AC00B0FA4C338316EEA0CAA529323266EB5CC5B080C962
D5D7BA5851CE69A03931560B412D35C73E176D75F41E42C4248F2391BDD2198D
E67FD96C8FA33E8F3C05B21F2D84406829CBC9375FABE34D60E7880D88ED73FC
D06D0FF51F92AC170941A61EE997A91FE3A2452DF11C9712471E85A059601CD6
937C4F61DF13DE0E4E787A6E655105235B063B730B9880BCCAAB8C3F360BC188
F311A107CC4B9D012D9FB77658F7EF3B3886CFCAF1E66E95CD633BC76FD991EC
ABF6E4CCFBE2BC41DA079DA4A7631891759DBC50962A7E6616AD93D31072A4AA
972BC1D9511B1C90DB536B0319674E856E3EFA347960928B7830712475BA4026
19D48016A8D0FE62563103514208D3DC5EF8F0B9D49B1C0B83184BCA6CEC10B2
34CD339034D7F13393AD06F34139B87D05249AE0BF10DE1F1D17CAF8F23D0FC8
9F750D3E8D24CF35E091D5A7EE1EFF4FF33A6AA7A08D2BC06C5F977E873F1780
08E1B4296A1545423C40DF4E03CF6AB788A7514E5EAC294E182359C7920974F6
F726B16568591BA66287B7902B28E5BFB065C3A5B0D920E3F79F3B2E3BE24F3D
E486F92FE8997EC131EC9418A4891A1A57F6419C4C12E7A2A6CCC73F7D8B3001
2A4A785D2E6C39DCB64337D793CDADF56B75C568A025D85BD349E17B440A459A
BB8F9D8C023B7D5EE34C0B132CB7C992800E8B87EC0F30B02F796C2D05E51119
EA64AA88C3CD78B9D8BADAF83E6B703BE9620A139925A54F3BA0777DB7A8045C
F0544EE7EE84D8CFA056A82723C0FC086514C52A776122F46A11790C0BCF9301
2334DB1E6DBB2C1F7A1D9EB1B1F88793A363AEE5545E17066C78C8E970033F40
ED720C32CE5D86550C05813DF3D05D9649E04CE14A3A7EC5A5759175DE3E7FCC
E90F02BE3626A367E46B3CFB5E94C4C90C9E1E356FB1A7C459D01A8502B03739
926AA75A8C68866DDF7C7106C66F0C5FD3CD2015AB1D9943BA44A227784051AB
9E62F997A4FF1AD2C107CBE9A5ECA140AE48775B4094AA85806BDBC52C0AB5E7
A54F8701600E4A11FDBA90BFBBE07EFFE71274701FE05D5E1658AA5C6195796D
8E511F22CD8989141D467E4D22C358B7392DC39B09D796EB4EAA804F4258522E
AB9018AAAF479887A80D6FCFE4C05C80CC2EF11013FB01D9A8B76FEA0C5E3DF9
22D045483EC5A9D3B714FC850954AAFE8A1289B8B055ED7F03415B96EC53E3EF
37A3032EBCC5A2121591FF5D3E5A083C3E83A7CBC95A3FA73749B84F64B1FD6B
4FC4A738C02D24BAF92147F76C8C32954C607472A590C87CB9B8C64A1DDFBF1C
8623DE6F70635C7960755D87C2F5FEDEDB95B4B22B4D316057AECE6C61B6CCCD
39F92BCB71EA04B3C75CC691C5900EE7B1E8CEBB4DED573B688E8BCF78AFF302
873228E12C1E1885C8B391FE883E5CA1B995E9579178EF5367946F3DF64E22E6
2E87D1514E3FCCD6BBB20B25028F5913D60231D837885F2EBA1B027C25646A68
55543FB599415C515BF45F01304AE1630FCB3CC9B0F80719C82B4167589C59F3
14217A23D7BF3E9BD46F96DF2CC27F95B10B51E13EF7681E8C1E181A5566110B
8C9EA925AFEDAE44CD675D0EFE8FF6B344C6EDFC405B3C78C22C89B9ACDFD830
95F62A6738D8183C155278A472D2414108A018DBFC1FCCC966DBB73572FD7AB5
5EE7A2B7448BD2B13810A80866B16B2BC1FB8F2C872D87E0D062B6330B972958
31DED802D40509528AB39B218ECC7B8B21BBB79237360E45ABD4FC3B26F6610B
531BE8B377E1629A7A3917096B3B8DB76C2EA245C3B3F7B7E72117390772C8D4
54F0537C809745B1BD483BC4CC0B0EFC8AB520D7DB699F76EDE323403DD4102B
E9F162B2E65C7F1BF8FE2E9F6CC81DADB56AA70654D590E6E8ACA2B1C6F6CA9D
590605854F50A10DFF109BB34E100415743D0DF6AD44881866E61C5AE48CB9A9
D9491DF418581BAC224F8E12FC584EFC211E202117CFBE3DE2F4A93B2BB05DC7
C68542A5F01D735B97820B88A18B5D8041B73BF71239E3B534400816B9E00603
DA2CDC09F9077349C96559798DCFDB211A68D7F0CDA4C12195AD5994E179D72D
CE2FD33A7ADCA67EA6C5EC3072EA3FEF39B8BA4CBC4CB69F42CB63A3E5397F55
DF847DECFCA7EB8C9671607A76B6C68908C0E17D4C5C38C83FF456B5C4318FBE
3B7ABB40594484D72FA37C26F6983600580BB15B259E705A01FFA2BDD0066865
75AA14BE7415679DA4B51F7A6FE6997008844048B62355D4FAD134E4D7DD4C81
EDF6A681B692A0A29241EE2127D85E213A4235A55AC660FF67C2502E459B18ED
2B28C6D74015EDB9CBFCD7E2123E3BF60EC48ED7A32D37D712DDA34979456E53
8A4F1D8959D93624FFE1AB0DA7D8D14B286FE9CACE16C4320FB0174DCAF68208
1C4C2E462E081EF11F8F2DD96ECB361F3E4DFC92CA902166FD5B9E9A2CA21BE2
7A569E5F0EF49715BDFF46F1AB2C3BDC4287FF223A44C465FD9DEFC68C0C19E9
03D3CCD64BCA566DAB4FFA88216F3FBF947552AC5D41C6D9B23042D705E6A650
C0C69BC5EC029BCB920A935E7F0B462939FB472653E082E77D1781093FA7C8FE
2375FF009756ADF512901AA0609D842ACA6A922E2757402F97D126A0CD433AE4
A9039DA02B117D19FE3A7CC3A473748EAB7943F0DF8EC979866E4CA2C1BB75AD
763F03FC8336ED71FBC2B12DE3FFEF4EB1F3706630395894C9683BD94BC9E96C
84E03F22C9C62FE8C724C13AA75BEEDA0876E373791D54B3F001C46D2D7526C5
F55C4324232F5F8F122A2D37579F0AF639239C688EB2F7DD9B1C21F73B34E3D7
7AEF339FB4672DDAC6A751FD46180C789F0DBA1C0B3CDBFB19FE1F03B5161952
5929508D3091B6FB686CF72E98856EBF659EC8BF5392FD32F20649386C3C2FA6
A4C86B4A286B557000AEE5E130E800EEABF4130921560822D8CABC65EC82F518
78F4644BB685AC44DF72FEECEFDC524FCEF493E676D0169ADD2095F3FFA77D88
82723654C4992EA47CC17E0919C139C83136AACF2269A8BC46F6E8408A0C0BDE
E45D9A01759DACDD46DD9F31BA53873F7E4A94CDC164BA54E166F80E54DABD29
4D53E11878EA08C7BBCCEB100ABB3FECDB2D94332D641E93E8B4E0C2804CBD24
77B037CFC21D9905A3E169A1923BF6DF3D26FADA429E8D9036D78D7B94244497
5CBBC07BA24772529288A8993606AC1CD74E9D50393A8E51CA55B73D71DCDA2F
0F3FD910B9B12D53E262E780E3B876EACEABFF0BDEFF8C9434BE02AEC0C2EB6B
2857EB8D5467C34E28F693CCECD2459395AEB1FD2A11B5F08458740F3C982844
8FC9836189672ADF5BFE88A51D0B7A3A3ACFEA318D56C1ADC993BF2A625BDF2F
97D52763EB01FA773A4024D5D20504D4F1E15A7858FB3508D01F399EF3F00A58
D4D485E5830B36D546BAAE0BC57BB2411928818D8B6953E9A25E02AA121B1987
7F54B6215D3A688751C7526A9930EF0C243EBBE571AEF113C74E1DED34835C03
C58309A3CB30353D8CDF09FFD5521447B29CBEBD4C826F1413D796C00890326D
9D0B73D844A742E81013EC7DB24D4967158F735FF14BFAABDF90E1F8F7EFFA19
3E2BE3E1793DECFF54E6697425A72086E9BF5CE0C08E843E299837FE2A1E41E3
5F1C09F6EFFC4BE5212418F0C93A1BCD7D53DB080497081727182682BEF364CD
4A00A4866D2FBBF74F876028A5A957C953F704575A35058E489C10B9714800B3
06B90837E8062AE04350DF95864E015986056C1C1A1DF5D53A43467A679BDDFA
0ADC2283C61100C985C1D706A74A4CE43CFCD3FC0AFC07473A06F4C958BE3A49
E00A902DA86BF42E3CBA42B126909DDDCB9EF105609A088EC30C257AEAC4FED7
A0B4B1E7FF6B27E5C562ADFE0F97A8A65D196D8F96EBD8D1EC2A0D8E8B67E27C
11E339D71124D773EAF3BE24749C459C2392CC420EDDD7D467392771B2329C5A
790B7E5146B69C49C3509867AD27AC01F37B7BDAC189A056B5D5F33DADC3DF25
CE0E45685ED1148B0D9987F1BFBDBB6B95C298D535011849944565FCFA0EC338
B03E485F9E76EFE6A153AA1D118ADB0A3272070103BD0C28AC5A885463B51563
9792472148DABFA09730FEC770CBADF11423B3B09A5FE6DB77CEFDF6FD995B22
C0E1D5E76534B21EEC9148427199713A19CAC1245616622528D5460A425B7839
6C1EFF61869CC9A2D5E699B07C8DDB7BB496036445F7732E7A4E9CD58A179A2B
8649B9E6E8CBCAC2DBDF8A3ADE56BE1DB8826B9C0AAECB6F86A9427478786309
D1E7DBBE2530FB83F8FD804AA63AFB215321646E6AEC49A6E2CFAD51447F0D54
DD134257815390DB634D387EDA7591284292FB1BC02784C1A15D62CD138514DE
3C85F6E45B59E95CAAA5533F3FD5742B8F197F324D0FF8EBBD69183DD76C0ADC
16A18A9DE72FD9962958BF100A9189488F9422B96396E29C4388FF241FE1A61D
8BE9E3D43B31BA434C22E06A761A62A3F7388F7BE02FFA331966743BB8350EBD
ABB792C95FD578A48345C30E12CD481F96251869EE367CC1FB2FB7BCC0994732
285F751DAFEDC3D1F50A7DE0827FA1B56725CCBC53B3E3E182E29B81ADD8B88F
023A1B13647CFF3D134B7E59F1642789A144B40D4D871D7AAB0F0650AE04B892
EDAEA808C1FCDC5659BCB61EAD7AC25208EF6255887F5514996D9290B436FC95
D853558BBFCCB908540A07D23B82AA4EDFE8DD9072E1E85D9CDAE8405D7C9C78
8B427ED303C54F4A4CC84D6B04BCB27F6E9EB7F23590730BEC61DFC5263756C5
0DDFEB3FFA084766893E12F61E935E326B513BF95DDB7325042C5B19EF717C9E
B78CD33679A609522A90C5854115C3733EDB2533B70D1E617E17CA7A7AB68700
D5BD5C2BD2CD5DB87DE7A6D921728E10405C9B5CDD7BDB3A616257BFA3935D91
E2F1EDC70FDA3EE2B1EEF98B77243386D357B88696B62F9AB3C3FA395199F934
0EAB101FF208F183A66BCD03F720780794868BCD1DE76EB04ADA464FA697803C
1F44A6C88C292CD50ED1680C68B37EFFC60A1D9E7E1FD6A1284F2D0E9F033901
9B69B6DE2F1F2F72AAE38C579752FEF3A6D478F828BC4DACD035F619B5B1C26C
511D0E4B9C2EDEB211F0321DE401E71451CB00F7771615D236E560C662FF9F1A
EA71A95596C9CB51264A9DC757044322C232BF4851CE9D0F372E81EE08E8D3D5
576025CCD2128AF24693650972F1C6693914B9A8F44D04C8F05A2A12D523E743
D67200A94A5329C6793272510CDAC287EBB03AB49F4362276353EBDDC027D3A0
5FE0F58FEE4A02114587DBDF889AC4F26D73AF260475B5E59A5E469DA6715847
63A69857356C4ECEDFF81CE677D750AD3D17A7574DCE7D749C0F3396B9CCDEE4
619834FEB1E0E2A605AEA8D8C66D7749994DD925E4ED97DB5700272D7C2F2D2E
7675408B24E8BC6A92AB36E893F9FFEE3F382509A12DBBB0630D7D25F42E2640
87E79B294E97386886EF0C45ABD3D6F0A9F69C38CC6212DA34009DBA58BF45F9
387BDD19541EDCF3CBD2103A08BCBA2F62D128810303521FB2EE31E5C9E2BE12
2E515FB207E6389CB7659847178F8082956957B07D11A72F0F5A2E789A642EBB
0E2C389CD709D6E4D7E801AC7DE50211E48DFD1874EBD88C9DCBDD2C4155898A
4ED2673F877A086E74BC5A43287AB3FBF02C5F517642215209164724D258F99E
4BEC91F428A4D984BD2FF5AA439D5A081E230FDFEF3691AE34B78D94DE81A647
BE2966F39BE1A1748C9F9BA10DED055A78D5D242B5BE8C6F4F03A80FFB6F9B9D
CE27624B7078E591D1B99E09AE995FD52D94A8210E99628545BD006310EF599E
7195F5FE55ACC47DC3FD63287BBB3C6FB5FBDD443D17639C38F90A3CE871DCCC
57DC8F850D99D229ACADA0ED912F0EF689EA03691D36A6B30547145D30C2E148
5AECEC84D26EE089F257A1F74288B88AF342A600630F1941412535612287B056
DCC6E2B3460B619079AE7343577144D7EA64DED6B4E3A94522133EBCA15E84CE
7FDEEFC4E5EEA8BAA6645D80026486C0B124632E6CFCED45131B25F80F2A5999
58255C572647D35A6B1E1B233CCCE0C2ABC7FECD0A0B0C93444065AC9CD0B0EE
7DE5C70012AA55884344050C7CEFA12B9E0EA365898A75CA3FBE50F9B236A592
281FB20020872EB4F5A24AFCECFD8523CAD438F3108FDE49602FB5A8DB710845
30BB6D83DE73D8578C342EE56C54A36A4957438363994EAF506CE5B718956269
23C0364A289222E6E6F224558BD0C63D4C2E96A024836160FD97B696962D716A
01B89951F818D1CAD701A700830E1AB978127CACEB816BAF60304106F5181A4B
9A321533E61FA02A4AF378B0DF62D448D6E5F3B6380A0C7E74EDB6F7E806E51B
294242CD4DF468C10D6F91248AB53FB91F953343D5DB7A1B370FB56009203917
D98B21E7D02F1725B693D58943C815801DB0DDEB7D070CD22780D227DBE4146E
D2D21C06C026F1091443865262C00410899846364CD8EA1BB09421227C64491E
DD336C6F662F0F8AE1482313610845898D5FE24273E96DDC68B17B0C98F3EACA
85A62497E95844F2A752C168E01E794C888A352C6C4D1482CBDFF1012028CD0C
EE55A8790F3B73B2AB738D17F5B3C5C0D5DB9D3F1C7E0EBCC469917A6494F32B
015F91C0E1BC5DE74E0B0D574A059805F36A29C8C3254D72C4928A31B81613E9
2EF277428F1B7028415CCED37F398CAF586AA239E81602AFD7FA2EF1E19AEC5B
253BD18F26B9B5E6BE2305E1B04C404ADB668749A3223D8AF3622BD2632B7121
AB7B2F8BB3D2728F1721718B85BBA953D4B372CF2244E83EB53DDAA792AC3119
8803F086B2CF1400CCE3927932C57A527FF3A242957FF247535BD46FAABBF974
C240D58C2803232928DA4E48274618D701CD78846E2930CFC34EF703096851E4
B1A46A6AAF73B486BDCA48C069C9F0A17CD14B0D2D309C2136142D77A1742CC8
710E6F42522E0EDDCB2BF7E26C51C3F01A4B6986F47917C66C787633CA552ACD
56645EA2B73CCF0BF24A91156AA426CF495C10572161F8C01D798DA3D63C15A3
CA82878E928D2A5102A53172B7D2FF2286F9610E9B17160941788D862197C89D
746DB7BA1CFF8F241C208B3994C0598974A828AE71C9987AF7F2442AB8F38039
8E8D927D8E99DE0F28E01509DDEA41D7AACB58218CFA0197937A6E3366325FAA
1176A6573DA4E1B0A96B243044E9CBEEFC516CA950C372EA95F7458A73599652
765EC15C811DA7735C1F44C5DB2552CBDBFE92A4DEE8BC223C4281EF140BAE0C
3223EBB67E6B7B76282669355C2F09BEE17EE8DA67D9BFF52BAB44192938019A
A3460355CA9077655DC7D7D4A572A1136B8003D2407FAF55C2397CF20460D409
116624EA222FB309A12536B4640FE62F26C313F48E1089861CF417BEB0E38E38
3B8A335CFB983121C2134E3A83147C04F491AB1F8C02D0DC35462D110EE04B8C
0F47B276754C98464FAF0D6CFEA11B269B71E48E02A21C6B9BB2D3CCC501E208
85FCB7E46854E96B7BC2FA458BE1805287077361DE9BF2D7D74CD0CED210B377
7F92FD219B8B0E6F446B69E62F544D695A3CAC48BCAED664772BC59283EDD172
AEB3B74487CC5B11FA55CA567A6F0843E09F5478189CAD63EECC350BD716714B
81A7661E59818EB90E85CCD183F01100EEF0FDB7BD824BF6852F7CDABCEEBFC3
98A0F01A765CAEFC928471D2FE297E28BA8CC82094267F4DBD32A060A0EAC37B
C42E9D0891B1D5B29D67E4C458B9A6DAE8A1716BCB6B7B562FD206121F0CCF24
C4B460668F8E2E8855A0A6E80F4B89FCF787A8AD6F06BD0F8243A46626AF2349
6D8882592DD6DF8A3ADE56BE1DB8826B9C0AAECB6F86A942779492F4C2DD68BD
AACFEC7C2D4CCFC174B5E419A5747B714CF46814E4D1FF5EDE9A5B6E0ADF2779
061012A145CAEDE50196346FD983B03C6F8D36AD8967475AD990345051D9CD49
71091B700D1F4A793E984D4B92BD17D84D8B6F22A800040977F0D8B65E0020AB
A5AAF2B3F5EA19355C1B2F48DE5221F1E9BB3092DDAAA2FB8ABA276E8E4CB1E2
6F8DABBFA04605EAF9BC0FB52692B023C716E007311D4AA8CC9AAD6393E99426
25F77021FBDB0491CBF5F9C5EF59A3C0DD2275876E6E371D04C1531E4FDC5E64
33D6C84D777CB71C9BCB4E657B3494B9472AAA1B28E32BDCF8CA997DF00A134B
661FD10F3E6B83A8EBA327675CAB7D09ADCAFD3C8E3B30BE7D24131F2032EC90
D1243B062CCDDB63CA25FD61F3396F9D3BA8BDE0813D560BE6DF82C2EFC5A46C
A59B8C2DB86E1967DCC4D84C6CAB7FC88EE68B424FE28002516B2280A1D00933
6C184D05C92FB25922075D8F7C4FE40FF3B385DAF2FB7D759398B90C96CEE65D
B78B564D95B6C07E54E2B1DD43A45B66ADB7488455D111EB0BF8D18845BBCAF5
B6E7C17F72831CF3F83B470C2FD7B664E1E04D3D05E76EC04CB6F0210F1AEB31
7A1DCD254D0BE531115BDB34130D7F97E7E591381152783F03422232755939E3
5381CFCC78F311117BBF9757FD500645ABD3D6F0A9F69C38CC6212DA34009DBA
58BF45F31238BEE31F9598B37108B0EEC23FCE4DDA344F508676CEB29792DFA7
407B2E55CF20EF60B999DA9060EE97DA5F90C81036455AF29279C96F3FBF5EDB
94C9D23A5CCC8ED13B5E6874C0F5312378493079AFE47282BD8DE0078BF9132D
EF16572F6642EA9543EF69F883A6E099DEBD42EB161D5350648A60367A6A7FA3
78F4DDAAB54C06FBB2059D18BE08EE3F855A5949EE39E783623AF2EC9D581567
FE3EE2AB32A29B2D031F96A76025C7D192E91A1483B4DA517FD853A19781F2F5
C92873341C07D5AA99752F77AA441017A9CBADCD2FB9C636F7881B9BD912296E
6FAFA845EFBF4C811385CDC9BD557EB878E48520615300172F965CE60DBDF759
D4FDE13B18F372A4B2C978BCF904F20F58E7A63A7AFBA72B464F17F80C795CFF
CBE12408C1E8B34645F2DE0C21352BC5CA3495C90D0A55A24C9B8B59B4CC15D1
4F42C050332ACE6E53FF054B892CEF0A2DDCE32CEF72DFAD9C52D39AA1BCFDDC
7EF35453E93774CFD9A9A943126FD007794A680465F51DDAF4C1B85C7C55C01A
D06602D09E25FF3350C2B5FD4F69FBA907C52B618A2A454433349F0D5ACB7853
C0CAE7C463F1E38A6ED86F521630A508614C4E1C7B1FA47F6B142226B4AD021D
CB3E284F186ACAEC1D462A02B6671899E532D75CA96A251F5D527806E6DE2CE1
B3A9359E08BF6E2B4553E9F20574A268ACA5323B5B6995E959F4D0FB1C9A04CB
09AA27AB4EBD4AB1F3BA1FAECA4B9C2E9A5AC5B18BE29DECD57A6F3FCCE03C42
52170CC7C59B756410EE5FB2D2892E5D7B3C3A216191B4511E39D8B72D9F0A4C
553C7A4FF4FB82DD999656B1C8AE414874626CA68995BE49571EE09A30767350
26A1EF820CE06F972B38B5CD8F4508E0F5AF4CB35829AB82B83B72CB902A5127
664D52295BC018766FD3D83EA46054995BA994C3A53D924C0884F3AA3CACE2AA
E118BD37CED604D4D6ECF6986882D2110B15269A9DBE9A125EA35A766CE31F8E
0FB68CB9794B1F862B102690CA9616F05375341B8685786716F3F7D905996480
96BEAD96748E3738FA4ED3CA8EAEC79AE1665C39B953B21EEFA597E162351B54
AE0BA15031EEA3E77A936BFB732699ECA94D508B28611E2F80A24A68201F5886
E3802713EB0FAA8C8B6B18B0E2B3311AAA9F08CA31E66ED6AB11CAAC418CF436
0A3CC7AF2F981CF396269A0EB4642E4977FBF2F0502E1C9DF53C12D79FF4683E
82F754CFE7A7466FB34E747B8DA83C405FD2D4AE90E610654635B5F554850BF9
218D4A27748FB53BB07DAA62C9646362FD5D54A84FD41723EFEAECEA0500A1E3
7DC44F707A1FF2BA886725321FF3F1D3D2B436129AB0B55297C25B2A61B91B8E
BCAF26C08914AF3F499130476B878CC54F1BD94D7E59E41F4C9A7143EAC4FC57
59E9D71ED8DCA6FB5CE3F8E8387482A8CA2FB850D016CD47C8D0869645AA1E93
9DFFE9D4F9B206E6FED6AC4FB340CB49B46C2EE9A510A31067E6F40C3C7C6372
C9FDDBA5A39FB5CAA2D7F224193D5AA93BC8576664AB96629164547535F043F3
539E0BF345B2A14E8AA4C09EB0B23BA7F5931DDA3169EDDEAD6B29C94491A97E
F11C588936C6892B7F9B5A896901BE179B4D8323F369FFDE89D6094BA433A8A8
14E536A3F5EB29A3D5FB281D68285BA128D28B52553EC9982E195FA8E7D70A2F
1FB69E5C5D1E967456AF84581D815C9F1C1024D781FAFD6999AFDE6381EB7E8B
C519F0BBC0B443289B50862C67703053CDF87360C28D19B950D4621F799C444E
FB632D4DB00DEA6B18A44507488381C7C8209CB438C87AE2F0683B558AFED820
0A06AE7022A33646A9712FB53290AB4D8167C57C6E0C5CFD1917BB1A187B2D49
E12FAF869C7E6FD4D9EBEDF290544211EBEA6A57FE153A4C6478F80C110BAD52
4AF0CA3D83F0A38CC7777A66B2A372C07A3FDB93EA6CD5C2D353AE9A145E4D51
AD9144F3A402F8CBDA94721F1027FBC24AEF08F6EFD4DF196C462DB1EC177F6F
CC853B6EC734F78140136FE7E1222B267186A1DE3496DAABB94B36FD3215E722
B980F2870F2E2DDF283B5456AD3A85892810D52DAF96207B0ADD80CABDD3E8EC
CE1499C17BC7F3F3684D05057E7330E10C1061CA3F2BE8EF91D44B433185E470
B206FD75D519C1C8CB55A68C8DCA674C02636B896B9DA6343FE9BC8FF51E01C0
4A5DFEC9931764E9CC6A47582D6B3467A6B43BAB84CF7068EB24C1D87CA71554
883363B710503BCC4192686020D0432F4279001DF3FB0A305DA899D93152A7B9
C3E60D8679B30CC691DD575384DC6C296F71854CA90142011EA180DEAC7F44B9
B3A6CDB15C3319A7DD438484EB96B312163570DD73B6C80848F862AA4F86F492
14FEBB798B9D8E8692697A3E2C9745F5A779EF6C4527DE14B973859DB9C3A672
79C1017875DCA542C8641D7D954C36850CA9188B0B9B6A5D13AE43483C36385A
69257517217D790EC5537F28CEC3813033A5D31FD2F46D3A8FE8475B58A720B4
29B14DF105F6F688584057596FFEEB1BDC40A2B6BAF47CB9D6FC346B4688EE16
BFF48443E7C9E5FB5BC5883E271CB0342893D74A0EE62E40D337C6CB18D184B1
FDAD0C616A02F0641E2551B0E1828EAB1F3988A2E4BEB552714832523BCF590B
C55B0F4CEE03A0D732390FBAF3D0664D0A43572B522C4AB9E732A64917BC8BFF
38D0881BB47DDEF266E03493C700D05B56B8F4154562775E897232A7A5014FC8
484E8F9A6BFB7BD220E56F978042022F4570E6CEEFF9D3827DBB67D0066C6085
D1EB9AD0A1724477B19D3B1EE5A6B560C8AEFF5C4AA5E07D739CFFBDE59A6A9D
5C05E02B9DC3E3532CF911EF626F9EE4F7EEB58B3D5692EEA89FC8AB40B9C981
947B5C51878939B532150A636CD4031E97755969BE5392DC2FA823F08A4EF292
C54BB058F999AEE29F9F1B0A07C1BA7619CD934CEF314FB03F92598515DA8F70
564DAE19016C52F752A154049778CED03F91EC3A524F120E0FDF3B3C19496B29
86BC4A8A56A68C91EC147FE88E8554D2C617820822FC617FDDF5B79017D742C0
504D6B200E34EA975680170A99CBDCA4D54A863174EBE97915AC2884E1111CD6
B466E08163A13848F93B7C63045060AD01CF6AB96372F1765BCEE93E781469AC
327C42C08C1303CA298A1274DB199886EF96B32BF1E6B74DD0CC193A3F9B8E53
5F65B2C902B1EE513D625144ADAF4772BC4391F30572524ACE561EE92D9F4BC8
4A3C4E1583060F5920521761EDE68A31299422A0CB240D4C9E87A17A12B9FD75
EA732AB19238250AA507C7E1A537022CD4331BD6D13916C1B66D5720E1F56D92
F2BDE69777FF44641800A32745AA17B21CAFC755A3D98AB710A8BA7ECC1C89B2
C1FB8FC4D23A6B3563FF8432C7703650FAA37A31986F5BFA8FD97DA2ED40ECD5
C3F365732087C2A44687E18E87AD5DA48AE8F82A9D3F743A20E9757ABAB2E875
42B96218A1DB0F194E65F2123853D9659CA5E0F36E0E9220820ABD4F2AAC259F
948446D971D3A27034673FCEE60937D7F5B1ECE73DA3D2C21B7B60CCBC29D062
33BD1AACB53173AD1306F2CC57300C7AE78788B8CFF6616726AE12F5DE913104
135911BCCBD2C4DBD59DF21A43281088AFFA0CF8750A8AF6AE11CA072DF3BA5F
F2187EC3985463E14C5D9F8BAAFB7EAD4DB14E592D340B6B3F0A29AB6904C19C
433B80670C869E80FE3D29C9CB599F3E725E762663F3B72883AE6D01C6A0CD17
535C49174DE467B09BA26A0F7E12206EEC4FA505B9FA790D6750111AA3140F61
BC4A7DF6EF9F071A608C816CF368786F41224D75150DB3CD258B0A461FB66EEE
F6E373E67ECBFF410F3454B0568B78B33001478846E831A66CD011F9AC13CD88
9729B9C23D63AB555A606354AD29187831C3FA8FB31805F51F77A004D1630816
5F765AF41821336659F138EB608CCE5587BED2190EB965D1D99EB9712B086595
07BF7C39A4459BF796F188190B95FDBA4B877ABF344769146588E53B4147352F
FDFD8B2B93F65A9C059F1979F67B417BF99D8FAB16FA4E299F02966C8A53E609
33AF3867DCE47BF1595A65C51D91AE74FC0074C27C680100FB9C4391768150AB
ACEBC8D46FA9740D9EEC66AD1EF6E8211427DA7732B7586FA950EE0E1E6CCF23
3238FCC857A41D838024B00784CC35E696C5ED728718B4F9F5589380B3BF6892
6CE38405B17CF582128FF6933FE20D3B93C2B0FF15F25C6234C2E5C8F0BFE6B6
D7A0012F59CF5AF97515DD2C68471E16975D613F091D8632E29A461CBA616DB7
A94EE77C7AC2161AE69F368EBA4FEF263F47939B5B69BA7A7345CBF3399779C1
27AF05E4E01AD29ABB63385AE7C1932B2F52D4350D607E85C3F7B06F1372362A
FEF84452C5A3418E57ED1586909B4F32138DAE92DC98992B1B8C2C2A2C5405CE
5E18F879021B8CC0201ECFD94A4FEBA54D3CB62CF67B6EBCDF781424C5658B6D
C11616BF353EEBF7FDF066CFA7360B7C96F1EBA6A0614979204E1E14A642E22B
8B347023B10EB76C9CEAC959A9D3C29CE1F1415B71690889E128FE067FF6CD09
EAEC63F8C18E68DA5289718C8951C2DF36F8F77666E7345D094E8B2E56F11DB3
90BDF017D68C55B5DA01611C83AEE926FECF04CBF07E38DB62D2CDAC0BC72168
3DA478C37B00A1C5155452398DE9158E3380EAF13852C2555DD4DE602085DD47
444E81F2B5F7E2282EE5D0A3B2B9E5632B242878A4611B96EA8750240905E14F
59B2EC6A97DA13E94F19EF9B3E287DF8A9CF0C1FB0C776FB18F575C4DE0EC5C3
0A403B68FE63DF449FF8CFCAE37F4D2DB5DE3A35694B6D9AB0C834F09E85AAB8
9C1999C9B1B5D4B740587897B50BBA6955DCDAFCE71F3281E6BB6602FA66D96D
7F8A5364644DFB0CEBBECC37D0D922B74D55673E56CAF06F3E5962E4DC58F5DE
B955EDCAD7C002EDDB0491B4860A7E7CE6137240EC9564CDD28FDC47DC904FD4
4B4951C7536A050C75BE5A52D608E3510F89747E0B854508EDCA2D0D9F971C08
35A914BEA1EA7D88624869157C251A24C422DAF8CD660683DE520FCF47505532
400016D53B2E0B734C94345FFB5D7523A70A381BDFD19DDD9E44F2A822BDF074
8F2978A2E766FCC527E2FC61F01FD59A5F2BF7B8FEBA89C29E194DCA1FB12392
181C5A04B62D53AC37EFB6D102A9BDA0DC6A4EFE6186477DEE1B67F82D0AB5FB
65B31191296B7804595BD38DC5337A6853D98DFE63CB1C7E94F49796086ADDA7
FF4A9B403EBC84A9427D1239497BE46C1C469470E3D1AEC18AD93E89AE26C92D
6F74498482F60A441370065D56DCF6169887AACD0A0C3E446BCCE86D13B89C19
4FBE4C510C1F33FD6F7AD14FCFC9DA2911F5B2632F575047458D0A0E982678D5
AD6C9084B10C0F1D0AFEF8A47076EBF589E2231C7FEB39D86F86653EF54F1A5F
4842917A1B75B90FDC3EB576DC5D6A5039D4C1ECB70D85BBA334D12DE42FFD9F
34AA0088565555F3E47FB05BA6E665E0C83054251883E4A186CEF5FAC3FAF93F
5FC19E7B2871620FD7CA664BB89E5A0DF2C23FB08CFBDC7980AD7D73F5C3728B
DEF3FBBD2355945599503912A620CED904F037560149FF6E326F0197D8D4B28F
2196BE725574A42C22D46CCE8436E787202E0DDF9E7997D35A6D66CE9647D820
581AE79CF863112DDA6BAB0956BB85E83596165E80ED9245B1CEFD627F912F90
4C2821F1304571EE205B0529B573D7D206E69F7E98298E8F30524761A54DD83D
1C0EACBA049DF87B805B8B18CC9C7748BB1F1DCB9DE753D1234FE39531E834D1
C79C0C43FF0291CEB40143C5A54435D7432B592ABA72239B1EB613F5257825B4
3431BF81E51C2983BD4497035C1ED2C07256FF17E7D9D723B9EE2DF64066957A
69798579B7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: rsfs10
%!PS-AdobeFont-1.0: rsfs10 001.000
%%CreationDate: Sat Mar 21 18:47:14 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Conversion from mf curves by Metafog (c) 1995 Richard Kinch) readonly def
/Notice (Copyright (c) Taco Hoekwater, 1998. All rights reserved.) readonly def
/FullName (rsfs10) readonly def
/FamilyName (rsfs10) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /rsfs10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-2 -300 1240 728} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
4AF1DC3456B9DA8108CE7F2380A151DBB59CBB616BB498185CD0D0DE28290A9C
1DB96124F5F796C7A2FC57B079E292DD1A2E5EBB88585421F81BBDC63FE33ABC
2DF705A2BE4F6BE21BED49C3E2FC3D528A348CBEF34339397282607E56471B4E
B78EA8C9F24AC14AB83068335F7974D7262C18BEC4AC5FB4CB5E0D7C410A3F08
57FAC1C117ED77399C1E264A853EDDA05A6117D3DFD28F96E44B1B8D3995E42A
E0B030F113EC027670E66FF845D9F93808284DC73F51F44B4C210997E261644C
59B3455D7C3D3AFBD65E28D1AA774273FB1B6E9AB4F56464B0D56911EE6CB802
F1C90982836A63EAACD2B2E9D07850C716F7D1291C59433A10F31CB9FB2F2512
1CE1F7F343CC06008D111D235C75DBEB8CE22E88E207F0ADDD18772276176BFC
F43EEE4F51613C545A2A49B34E4237BE57CEDEF63179B73879C2674AF40B79AE
024EF39D4D01AA6E8E83BC1D5F393AC1F78D133A004DE64C4AE52897C279CFA1
C87E605E5C1CFC2F4C72A0D0F9ED40A8B4F8E9EFEBDC1D60E353DE792A091B4C
39738379EBB7BDCE4D06844931D77A2BA45D857EC30ECCCB37F85274F283C27B
4C9BDB119847F4422B1FBB4059A5ADEAC44D234520322E2259CFDA894D6148CC
1E0EFAEF5666358F343AA0C6ACCEFCE6F3BFE30C43C85ED1FC565196555E51C1
0395BAF253393AAE179F635A2DC0AF3A9BD67D385A9A96A5009D09BE5AA164FE
8A48F5DFBC3C2C7244F57C91356ADF25AE852673C48C9C3D4A2D1F06BED56256
869E52850D83D2A78DA51010268631BCF5562B70ECF818A741398D63ECA44D23
567F5932BDFDA9520FEC5F94C434FC369F0BE91DFC66ADCCD21A6AD1434BDCDF
CAE93B9934C7E24FC7238B6D3A663ED5950C932E0D18A0604526630522F6FCA9
A6998225F6C71FD55A5490C891C2B4F6A8F9B9E454670D51D7F883D0E26253DD
07517660B58ED8E1FE64AC617DBF2FB8C7A3E4B0E9313749E436516518542AB9
2BC049832DCAA3F92F1F53388FFB0B20D278D82A20C029ADD4D9F0C023DA1D3F
876CECD064AAC79B20865677C0F6C6F123E97A46278E51F67A14B5B2C678FF58
35A253D3521F0D6769427993399D380FA3A3EB3BB7E6BABE9D8EE8F4CD2AABE5
3CF57BB6B2CD38516ACE47C604E6C51D6DDBC16F7F4F93CEB861517BD485E6CB
37CD4A245ADAD29370E6E4F79970C021D30B9739D646538ED6283BD390EEA9E1
9B9AF9ECBA8A9DD9DF83672C72D9D4813948668D07A824392AEA77B49B73EB7D
5518CE71D48E3C6057732D80B52C6282E6C964F1A79624A2606174B60BD7C683
CF9EC1A3BC4DB33CD5A34A130031327F3812684E5F262E9C3B7566FF2229E216
B8861601FBADA5010B7EDEE6A3FDCD624C4331DB1E16BFF655FB19CE5E1A2DDA
8B7ECD28388A8915A5D352C6EE5802EADBF694C79942BEE4CBC4DDD12449B7F9
1CF404C1A347BF09F7F859A6242E430D6AE665B45B6542967F3998888469DDDC
E0966B6468394DC125D7CEEB7B6AB57459BA6238E72D5622AB74F1BF440716EA
4D2BF7A175CECD4DADFF779CF22FDD3645A10F21359472A96709519E26B67E45
AC47236F9528DC21E7536CC33D8C61DA792DDE69FE2C929FEF7402E0BDD6807A
0B9EB6E89BF89B8795C694A081F3BD46D21B6D0B2ECD3EE5AD5C9DEBBE07877E
6E14ECFD284E2722F7DE17158A17E1FABF85E4FE7A88944795F9BFA7393CE77D
A9380C321BB9E395ABFA3A82410E23B2A0C5AE2F269CD89B83FC112D76BBA05C
520069DB1ED50309A2562F7EAF7EFC44206FAC9341D43AC601DF80A80EEC9007
AD0862186139B9F94BFEAD5B0A0457BB8D7B606DBC419225743817957AB44B56
91CD6EA83EBF879D237516
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B187
7C165414D5B2A021154D159DA667468782F548182274D5C4EB2355B3321CB680
CA475069486BB3601A3485F10C700038FDB209DC179AE59E2C186F2D32DDBB65
5895D321F9F0D2CBC036634F63887CDDAE2DBC989D53EB4A5AC268A8A3577618
2B8D046D3EF0FB94D6BE34C01E2325FE9B31BC892A2C4B71162E7D2AACF63BFC
4A5D3020EC756F18E6D70D7AD680C722CC936FA22C7FEC1816313959F3EF0906
0D4FFA4EA2D2D80BABE43DDF50DB540EE7A5F227D50EF50F00B147E81F5B58AF
99DF6CF3664C05318C5A6A2BF30ABD1E551AA07AEF7CB6D8981A4F6F9BECE264
DA4E9A6A6573E2CFD3F6B4CB6ECF3BFF440DDC599421048329FB1BAAF4879364
006E455B58752AAC58FA76B08A8157F92E6A39E5CDDD97BDBE5281CB0C6844A3
B103C2A3D66C3C979AF79D23C66087371F08DDF47A25C18263707E8ADFF5F85F
7F59357028A6D64142BAAF50B8F483C8FC31A1836984F99B326C19A0684D8944
74E96780AE6B0A4D30F123E2785C542D4719B1B3997620BB2C28AE56BA70AEF0
8B2ED6DAF074469E2EDB0BC2842D70E2C3128B52FBF456C188E0F62293A93703
8BAC4D95708349844EDDFBE24126E66C8E1A94F6DC0554E8AAB5634C4CD419C2
2A0507DC46D862F6C86741664522452F43D985874AB89114540A1F3ED3F758FA
CB96469383DDE95F51E47A0A64E3B93CE2B256EEE51DCD31136A5EDF9192A45E
083C382D1E4804AF31D4ABE68DA3E1ECEF8F0D99D0A7D13EC3A043C0DB3D539A
8134C4E8F496AE4F530A6DFB4AC0C9DD32F26FDC2063A50DEA9CBED9F8B4CE14
C18ED0E2E071C5235685341F0D9580D6E9EF0C868500D7277C72E0CBE9ACD774
0ECA78244D0B32FA23DA1CFB42B446DDEEFB9EEC99358B056DA716700BE11910
5812556DF2BA37169928D517F3760EDAFD443173D98D1D360319CD3B6C80B9F3
DAD5C26B046A5A01A791232B5A1C0E218AF57E196E99046205077D4BBE0D6CE8
F01505A23923893B258E61F1106C17402AC60D708C6BE071B51FEC56863E893B
F942F7B0D0EA5778BB6AC81DE8098D917A296C2BA4E14802109FE80025D84A37
F8826B821F243E8DCC7A40A5F24AA584FBB1F2A480256C049219FC028931787C
ABAF5F8B020352B16CED3C13682B37DB123D7ED241ABC065FA70E2F9AB3F36AD
C9BA60732CE80E3DA7855B79060E3650CDB2FA8AD288EC560545413CE81FE57E
A8BA95C4793439EF45983A3E05352D250FC8D93F000D152E42DB2EDB45E13804
ECF2B56DC92606935E231AB657C7363FA5FD95D94B07F9953DF1C7413429B3CB
DE261A9054DC56953B76C5700C7ECEC145821B54AE1B4F6F8E1A427D480BDA85
870532BDB6A50369F174F4DC1AE11DD1EDEA7A58E7C4B22CF46FC1B7F2B17B07
7EAAC299C8E1C46A908A3A13BF6188DC1833305147EA040B7DA2642B13D0A851
DEB13BBE960886423055761A67A9BC660331C5B723E2904A1C723362CD6C9CA9
EF8BEDC5BC76C5F909BA5BD9D02F5C211485C7EABD0E9E1092237237B227A44B
5017A058550D44AEF59B6709384C9EE60DDF7D4F74708A825C749858357EB1BC
D6BDDA40CDB4E969DD8256A670BB33E15D952C560589D40C338B006A851AE1B4
B87E6FEB950170438A6552D11C366DF6F48B97E92766CCD92B2C87E01D69B768
E7A6080499807BBCACC930310E82E7328C13F16FDECD914E8988D272FF66351B
CF1C9DD66A8C0C117E1F335DD1170C846E4B23A79CA04D69DE6269B75D8BEF6B
8FF006EE3A05BA9625D7AA9B4D6F45DFBB61D1C9A014125E4C2C52D9BC44C6B1
95D6117B17A1D9DEDEE0C2DBDEAF1B3F045627324C25E008FEA244D43FF6A45E
8C5065AAD747180B42CC6F537EDC6CF4496BA023C2F07D4720DBDA0AA284CF36
25FD68CCA612B94CF435DE6FB9B7A3D1EF1AB6B387EAB23D23F19E012E4F1B6B
CE2752DD58DB04B0639339698D5B45CE0008C2998C3283A7CFF5E26F9FCEDF35
BE192990E7CF7C6F68D12639FFD217F016DE823C8706D5775A2DFF5999A8A0A2
6A2E9041682E2C5E280FBA4201511C2A47DF05F6A7745CACEF9C4269DF3A647D
7B2EC8FD967FE82CEFE06185442A70B191F1394239A44103BDF54E48A93D0552
87DD47F8206B2D44D285341391FEFEEE05C922B569CE4D13F0E811D8FDC9FB3A
BF8F0E86191630FE62D64D27CB5BD94E35AB90126937FF4620D918E35F247755
74C823969E43BB487FFD7992A8AEA2B80BF8723D09BF28112EB88CC8144F489E
59871CB0028705F87D8D917474DD6ED449E3E103D4CBFDD8C42FD83CCA732F2E
9A4936BA4CC11D1D024266D14FFDA15443A4861882EF3B61F6E2B66233EB1DE8
02E9BAC6F4927C0A7EDAFB302D06486096765099A86BDA75A20C8330B750CDC0
525EF7570CDC278C6211091E57760348055283CC4DF40704A1190B588CA5C3E3
B7141C0AC53D33A332B7F1F83466480BB4C1FE8925CA2786B109EB76EDBBAE4A
7A202EC7601539ADD725EE6D4A567F514119D363B0A01A4239756CE0D6E8659F
7A33972DBFFA19EDC62F158DA28EF2372E40E366939A4CF024C1DDD5F37C216E
D21E5927D4524FCBC8DFD5645313C31C3D867FF69D90DB978A395C56E86E5AE7
9F74B9060A1576E5ECC2ABC3DA2BA5A84706696878E08B9C7509862BECCFE999
82084F153384B33BC05A3C77EEAACD0419BAB9B973E484683DFB76586F01FE26
B58EEF68C6C3D584921CFB6869949CFF09259D4A204E02596A9BB3375A9AF4B6
7C33CBE144204B3BAAD1969B29397C3D348800490B0A80D4014F57BD27079489
FA0E142A763B13816C02CE2700206FB8D35C1AF04F642AF724CCBDCC38705D08
BC04177F94AE4D6997A8626784228AB428536A999BDAB4680CAD76325914F48F
5DCBD8F8E0536F0556D49923D6030146C91742F96B7B70BF242E8DC92A8EA9C0
E004BB5E3A0C72D3720F526CB1CD0A0D2CAF259B564CC2139829A8FB165A276B
9FFF1E628A4492B040535AF9B3C73D34077A762918257CE4CF39F4C4EB5F7A46
D1DD88DE5EEF09452A722890D8858EFEAC5843087FB8F1AED575F353BA7B512F
8168A26CB447141CD77CD19FF8A39F36447B850A5233DA62F7E7B03662E043AC
1544BE674E4BC9E083560921B464A357C3415525CA370BE1A3A70549E8310E28
50347AE583D180C5BFEEEF3B7BDCBB8DE5BD1D99FCA95C9DC176DDF5EFF2C01D
890EE2689F23520192F2C3C9BCDF1A69D83BC517C2BED52E7A45C7D987BFCF71
A60908B932CAFAE6920C7C13BD757BD72CBE62D82F09B287FDEBFD8BA1B8E383
5123A4808B511ADFAD46981F758C0B8E471A1E3FADB04283E70CCFB3269E4C0A
D09EF99C25BC87A748FA628E02FD3649D4356058C62F345629C402B89302F311
2E2D44B85F64FA6D6102B6ECF45EE98252EA96F5B6EB45D597D870F23A1FC14C
6A8323B0620C64E8CBDD6C0577B6417FEE8C03AECCCD4B937C7DB9FDB2310BE1
0ADD7DC86ADD21229E3B83EF806F99BBCAA9B27F546C1D4066FFB88BA2DC905F
07ACFD7BED2E3440755CAFD7FC83EAF094FB3A48BD39E1555DBB06A5B17E4D6E
997F2D35C37EF35F78C05B62DC0068C4A60700395674E0EF1A8B62C4E2F368DD
836DE55A6B18A785C6E286A293CD50715347BEBD60BFC9B535907F06CE50F1CB
40AD1A30249D61911B87A6E3CCFC24D2B10CEC6010BC32C823B819D9EC4224F9
5B83F8BF0DED888AE49D1134454DDC880DEFE6853F86AC56E85B430C49370C40
C15909BA02DAF2FADE062DBB9E2AC722E75EFBC5BE46D6B96F130BE08DA99B91
A251CC7BBE0EDEFFE32793E2DDA8ED5F7C044BBA551A529C46C4900B4B75A69E
AE631BC9A2EA4F990890CDC2239DEB7CB0FA0CAFEEA8423907DAFF812CE452FB
D90C12D3A19F274444F8DE79826B0D79B2E316C10CBC97E3D9D55D98E22E36D4
09E7F93A499036AB8F85256799EEC2FE09AF8F5E16044A547A32743157DFEDFE
1CAE58F64266869E1187E7CEE194DB60B9A04A3E48B64D7E47B495F6881FBD66
D03713AA5A3B4643E28E46C8CD149975A5335ECFFCAD74E3EA1489C57E4159DB
3B5B7F5C0316D058121778E9041A7B86421443766A6E5489BA3FD9B26E3550CF
E91C54AA61D40A0E1266C1BA6CB518B5957F6F748928CB2754AEB1E15FE2D8DD
DF82ECEA943267C158AC94CA46C275A7A88340022BDD344F025148E0AEF1E35D
16514C03BBBDFC66D425EBE4EB37BB6064B355CCE0B256344507DFC06D3D274C
07A7E84F3A8C0B3BA88CF21262199758B2B62EF6CE2D9CA6F97996577821245E
A51FE9CAE473811AC93B7368F6ECA92F536ACC410871C960EB66639B4FDC00B7
A65FB8F9DDEA5A88096175F2CB66518F978EC7302FB55B1C8B37C5E2B71AE4EB
B34539CC85C4B8AEB8913DBC1C729ACB0297E6C99E607DCC6C3A84D3D7786CEB
A93239B2011FDBCE922A16F93568B6B2F3D0E37BEC3E3C6F9533E97A907B13ED
794E4F789CFE3F1DCD0117C095F7B73108C947F12CDEAF40D860BE62AC8AB174
3F8F37C7668DE35AD8FF4B33596101264ED7318794AD5190DDF7AB69F9D0B423
A24296CEC91890CE5FDE6635A453405917D47D54DA01E2EB6615E556FB36A64F
06EEA8582BDA6791F0B075F2C99248D4F5EB9E0C7238C5C93D0FEEC724C99D07
D16C3B6E82011AAE5F6509988A9A1D1C8ACB7B853645C40418A81C5D99030BF1
193B8A30AC2C56B6C5CB67097BA5E51EEE0D973B7B5DE58A75759041EF05D09C
214FD2D22786CAADEF583A03D03263B1C28B143D124AD0A3FF33B41E06A5A8CB
75CC4D0754FBD422A52DEF62E9CB4DAAC53CBFECEB3DF167B2D5EB8091C62636
82315E5C8D26A3FD03A73D899B52E1872F13F9D164A307CE10611A53BFC85F5F
5F4979C0A8ECC697ABE85A33824ECA9316FFC4AB98860E1C252C17DC89B37856
0338168D26A2897BDF07B012A05EDDEDBE27EABE615297315B3F670E1834E793
F4A68EF0398CDDDC1EA9AE95B0F1BA49F5D19FBDC6A6F5F6AFFDBD6686D396EC
0975FCFB3DE1FB405D302C38EF8C02CA13E28E0AB1E5BEBA2912BE70FFB3A747
27AD2AA6022EA2E47BAE8591B3356A2EB1426449D75188F3F632DCA511240C9E
D982A1C702F212E5A178E37F4FFE316D582C7A94DAF5442E90D4C1D0631AFEA1
90368F2A08A17BA22DCCD0DB0CE9D1747C93C5B714D11C02FEB0A27A20D80066
75B0CFD5373B394E62423A0D22E7DB5E6259038BF6B469AED6E9589EB1473D8C
F92BA41C2C25CFF2F79A50716CDD98BBA847F202D77815DF2E4F2275FE27ED52
12CC39B92507C4D7BBA3AB19830D43570783518E1C6E7853E6376B022695445B
9594792BDF922E452D73E29AAAAB633317308967A00E9FA4671A4AF575065C67
6C7182CF50ED1A437DF64839A00D9556E2C764AAC0D1A315F5191C733C695B8D
C224A4CBB9A0A0F4070350FD30B3CAB081F0DFD79AEDAB6A1C69E80E3D5463C6
13C56239EB148B25F2346B0F56DAD42A7B79444E6F9B234C91A0EB8BAE82C9C3
0CFA7DD1FF2059C06A074520C985B06BFE3AE02592B1D57F414F38008A1EC725
11D668F3CE739731BF2934F620EE513CCA94FD0DAA2066A471A67BECB872BE09
9875EB2CE5C48FF22F4D568D41228CD9817B278925FFF9B826709D05F088F172
6B3E3493482391607CA02990447C210FDABF3D256B54FFF64C9F2630CA8D2789
A86A7F9E8BDC6D10A4ED2328BA1B1FC19F34427AC97A386E30689DF94EDEABE6
ACA29ADB69140CA241D0CDEF4031FE6800439859C1747FCD772569E5650B4C76
C3A8CD4A1FEC63906A9D5FF38EE51356B2814E54905F25CAFE8642A1395823D1
21F361A0BB39D2231EB02312C2885D79B4A1BEE4453C01878274BAC33405EEEA
F0EEB6FC8BDB51F8C07B6F4ABF63C3617503393305F29C05F667186CE9E73693
DD4CBFFE49CF5E62AE2E811303F80E9A79B0AA18AA9AA6EA2A3CFF2DEABA293E
EF5A90B668412DD0BCBE2D8EA485D58EAD539B7D18F5434623E82D76F0ED83A3
155EAEC7A8107B983B1A5F8718111627FCD8D8E5BE2678EBE1FE9D18D7BCEC03
84821DEE2744D04C83459C3C11215D4416756677B75ED29BA75C57B2600F83AF
3F1902F9EDEF408B6898C5E6602B15AF23BB6B4CA33F78E099F8A2F49AF54EAA
FBCB3EF2F2DAAC4D82E661E5A46E67A1FA5E529943839D5D01DD5F0A7727DBE6
2414D1CD3A80C0AB938948F4DD27395EE305A8046E2428F8CEF09B0ED0FE2905
BDA8ECFC9BA3261B5480BBF066C2FE27CC1196D6FE856F5B8D45B05C0FA723D9
E402D5A81D91A82364DBB0026761E31217F996539D79AED993627B44BE443433
CB43EB5501937F9CFE3CF4D1A9750E1F4E6EBA8B9C7B18E8C57D70BBE02379E6
09FFF1F3A32AAD1D00660F383E070AD45CA5AAE2E1A544430CFF9BCF8B566551
A6F3DE6AC59D12A66EF8130C8058FBF1F10B1F205407839CE460AC72CEF8EB08
4E86BE8B45B2276AA0630DCBC43B142BD8FCA58A5077BEA592FD9F7A0E0BA139
DA8B2F758B471C912C8F4FEB7F219FE69CC686BF605F893C1068AC899F4AD733
483CED7282DD6E9209BB556DD66AA34E3A60A6668BA2960305836EB93949028A
6B7999421B0E52162BB65C22DA5C49974C8F2BB6129792905B338BF2DCBFBF2C
CDC315B6CD0DE92C55D3AFEF8FA40A41130D894C79825B64571B39400EAC8A99
5551D3E39A12E452D33679075204465B08AE7E3C025C58FC89C265E984E2BE8E
7EE43B329F244FD4556B108D40C19312CEBD27404D0BAB09309561F40C279E4B
27F62620A76D293D7FE59AA863F330F555634425B30633CCEA8D6EDB1CCEBF56
D4E391FF38C55FCDFCF98D8C5B169A3E230AFE203076F4F8A14C0131DE27279E
F2C348267917EBCF5B134FBD216D3ECEB11D698D61E224A2B7F74A9A68EE8508
1E4E95C8D83380BBA298B977EC43E932F28C1FBC10DCA2BDBDBB7A3856DC9791
780E84341BE9A3893EE0F47DEF7D6C414DCBACF361B4954B4700D2D75A78A780
9E82235C2F68FE07EB369B2A6B80A8A114F78B17BB34CADB597E641054BB16E4
0CC682CDB6C603992967CA981B125D165AB7FD5722C6C4FEB365B1B62C20A532
66DFF0D8E645BBCD44C93FB68FDA4E0B7677D6D71F43E4FC476647EACEBC8387
0C7633836DDAAD7C6CAAAACB4D08354B7B36D8824DF44EFD734AE04B5585BFE8
273919B2347ED0D201FD956A1E204C12629341FEB93CA5C08E80BEDABECEA9E9
818A96AF2E28498E40163949E49A160E7007DE2135CD1C89F2B7ADCAA210B206
850B3072D513A15916541F9A8628BE3731B16C2A026CA39FF6EA7FCDE14C548A
189F27904BC6AADCAB330BBCF4DCCA6F9A5423C57C976B1C87F53DBAD0078ED3
6D60E59E0B057E3D09A3FD47B8B313E151E9449FE8EF7CA270203F1FF515A9E3
5CF8D2F4FFF22917FA1671D822C8CCBF5440522DE3805E4088B201B75B878CF1
EA55A62695AD753973ECBF081EB27E295CFDE2B23DFE4F6623F737A0D08ED322
3A6D26B84EEA8C39ECEE3FE354BDADAC432077B52201AC3BC1049E8F30706198
4D779BFA8022F236329AFD5F6E12D0A1C0F750C6163513F515F553E8273B96D1
8E115D90349A85BD014B97103E86185E7A2C2719005075851942BA48E506D390
454192A25494DBEF9BF7C0E8C759E5EC256D714E0708A1F4F33B3634C7F626E4
AC856F4A9297CB972C6EABCE18292DE6D71BB7A92476C4DB0988ABEC92F26E13
6BFB3EEA1BF25540F71DFBA715622873D381F7CB3A318F4872B82FB963258680
F669344BB238DC89AFA42A0544A84838EE9A0A69FDD3DE66649C9BED43457146
FE1B17067B364E0F77DF3CBC11AA5172DBEFBB99F8EAAA20A490D6D0721006C9
F10461A8DDBD458E48B7C2738EE52A7491F8DE642C6D89EE6E8F2DDE1421A40D
AB86997772CEC245585DC22CF37FCB47A391EB212B1F7869D080722526DFBE37
193F2BA020BFAF4144041051B6F1BDBB70EFF0C4692B77E9A6F22E9A5F16F04E
EE67AE834A969256AADE2E1CF84842DE84BC6E6DDFC74BC3D6663890403EDA39
4FF35F433B179C290734DCEBA4A9A2F273EBD6C353D691D77BAF198C1FFC68C2
7E0D033E338E14A7C68D51BD2D7F9A1367C50DDAB0C4BFAA296AE511BBB8C427
C9B17202A29CAD9CB59E42B5FDC187DA27ADFBEF9762C42AE160D1B3FA0C048C
5F29441A1E7E2EAA1ED320B2AADCBC3253C7F57F1575490D71977B957C000EE8
9A91E7CD61DF38DCCA0AC3A7A5EA80D0458D8689C5CC0DA1093345ECD50CBF51
34086B81252271D5762D6339FD6A95C3F461ECEEDE9CE7886BA7A68EF1A3EB21
4ADE09FE538B20DAE1FB57AEEAB377DF86B4E01AD0358C748349C491F1FBB53B
B3B745547DA79CF9CCDEBB6788BBDBFA767016C9B5CAD6514509D03FDA33040B
A1B0AF44E9A196D050A08411054D7DB34531D5E5E510D5EAA04D0BA1C8698A98
331BC3E8090AB7829DF871F98366F4523703670C9D1C762597BA429ADD6856DD
2B434C5AD958E34F6FDFC73ABEB69DECC6E45137EA2B99D2962120DBC41F726F
7675EC4F4C2BB959F9270F7CC13EEBB06D8CC631E50BA135AA2F10516BB268B1
A78A269588F665EF6C878321B6C6D64629BDED7EE1247702A9DF56BE4A481437
C4260CE492C02A138889A1F946A70418E9D18BD94E4265E216B421FE70937FF7
6D237267890E71122AF3C092BE3DF1C90E035149AD0B24D91E5A922464DCB175
6FF66E217F73111332F95E6AEA60A0C33C791B051653E5EC20699364D80578BB
6C18A3DB53A552F5999A1AA1C287768D604133AFF638F6384AC8F6D25203B72A
392B1A9B187B5A56A9C8141D8B7CB28205C6155EACABA5E7CEA12756874293E8
9DC1291DEC6D1B1ACC372809DA682FF965F690ADE2F49506EF4BBDAC51E82ED7
1BEE6D5782FF576E098342754997379969968EDBBB90A667E7D7EB94446A6121
A321E6F221AD6C4FD04392F09CF06DEB47E078C19369F0F95A83208D08AD71D6
DE88BB5EB10AE37FDECF6B9C1823B6E4CE3BFABC9F697F586847B5EB8806E0CA
C42B50FE1A19CC0E6E23DD2EAB9E0E630978C45EEECF6647F57D447FA1492D6F
08905B0C0BA6C712224E0812D60B140D3D68B641CAC1209580F0D8B91A1797EA
5E291A7623225CD635B4442B568AB516C9FD3846D7CC202CC8046A8B132EEAD0
C34F6D9E8691778525BEE7E980B2C4319DF300766D9A88C774D4DAA4C46205CF
AC6E79BD11864AE98B9A1FC14C6A8323B061570A15EE2C6CA9D78DC4590C6F4A
785CAE6BD34D7DF5A13CF759DEF6C38A73C462A37FFD1C5F319CA130F27F2C8B
7C90299390CF339372D36F9457A1F1A0DFD42AA22CFB93A801FE050B08979979
19956105005C61FFD25725C99E23ED1F8B2997A54645F0C2E4EE46889D57BF04
14CCF9445B4C8063B9BD68EE30D3BFE9A667A67FE8481E74E168279A59CFBB79
F1FDB514BFB50C8AEC60827767765064D75482E70985D1404C7793E55DAEFCDF
472EA459E0E1230977EE7D7E32A3AC3798D4688CC2064BFFE7C24255E66ECFE4
3D1BF61288D3F4A06EF67FFF02FF592AFF7AA54AD78C858833A2272D970CCF5D
22E677FF7994AD68EE45E92CD847FFE9BF4FFAAA0D6E5613A6F4EC09911CBD99
BF7AC338166E1322D5107325266CD1C58BD738A1E7250FBD7F8CCDC49EC2ACB0
5B8F7F63A4A4E2AB542FD46F4B548FA41E088D33E097B39340C30F6EC6119B5F
2F14569F95C9D1DE068FCE8E5BE80888328E2747B3417AF87F60DD928B97F03B
925B33C20F9E8644F31E8E07AE5C861DCF2ECA6CFE2C4C2335A418B3A46853BC
1A94950F24E7DA80A3018C5DDA1513CB2CD8EE5AD0197F5A9DC080408DCB3C45
6995333EB31C7A4A924BCAD355D1957EF9D7C5CED757239145E12C4E871B23C2
AAC0D49973F34B618C65A2D08E1DCA16082699BE0A06E1A3E1261F49372883A2
62143E6545B566CA3BB00AFD38A77A11F67FF5F1FDFBE322945AE88661AC1C78
CF978D5C3572ADC1049F1BA345D2241F9275C2883537894D7A1A4170F6D47BAD
0F33BE8198FE1253B9DCAB3F85159EBF614E8BADE93CD3FE5D617164225D9E37
E9D88EACAA5B048E4976FC09B350C425BF9964BBEC03010D1ADADF1135C43465
1D89F3C8981C3098332FD8CE5E1ACC4E17A9631842C40C598CBA3EB03F23222A
C9E50A2F9F46F9057A584A6C3F2183A0FD2BD69509C8A9FD055406E7642F8B58
39B1C706C410FAFAC56DCBE1177A332E794193D57E5A6E99FCCD7CEEF8BB4785
4BADE3B4D24EF9433EC569EB5F5F533CAFD211D88EBB90A3F95E6A15C3E11C2B
4300930028E6BA38AFDAED5399EBBA7C5FCA028A3FFE6F7B9C56AA3705D32E63
B5B787436AC6B7880F815D38D18159BB657BFF310056D421E64AE854016FE4CB
EB28AC7A2843CFAF1B243B7AD5B029C752776186DC388D8DDEEF29D7ABACC7C7
5C1E03EACDD8F6B811638EDE89741C6499C3919307C65C5E9B0B6D3AF906D37F
BC0EB204AAE047DD7717EBC512EFEF18F34E3FCA0C68F3E6806A2BF4EBA18FB4
CFE97121723D3785F01077572B7FB2E6E02BA2398BF6E7488CDA818F5E66C700
5ED540FE827D7116F771F116BF2838BC3367DAB718C82A641F24421D1582EA21
401A32DFDA65F1FC75F522C4064537269DF1B2469948F1D13574F64A01F0D2CD
FCAFAC343737B9E9E6D226883E3595773644577A861C73E2B61854A07D5D3EDD
D3C2B28513016777A76BD197CF28F32C2B3A26C8774F95D7BF95BE0D5D277E4E
02DA7C6F6007987D8193096B816BF1E2AC9D61B54F750D8B4EA33D30F9345385
AACB3A99129E24AAACA6C816C747542874E175D22D25045D4F4C4CE7CA7D7B20
AF7B265D8067E5E59AD58058728970D7C07F3624DF302D3B2FA93CCC059822BB
0302847150B42E5EA8755256069855635B7105705F38761F3343482D3A4545F1
C66513FB598618F8896AA603728699E4375742D51C052FA2DD6ED91B52A7B453
4BC2F047F1C2D3B220BB6B1BBACCBBB331DCF5622550E644A02C0BC247F2AF72
C42D5739C790B43010C44ECF0ECCABC655E1CA32EF0BDA23E27CF3C2FF259A91
C34D4C1E27E7EC105A4FFDD2442F9AE774047799C580E41E72B21E91ABB0906E
86D7BD053185AE6CD1687731426096B8CE3DF68C3FC79032EE51EB0ABDEEACA6
79C1E325842749A80E7B563082C5CBB4AF4E5AB312A4EC512D72FBA99B86F51A
18DA71D65F3C028D6337CEB228F0B38A04E84D391DB2280211148796DE96A683
BF9E6D88238B75C7F85014AEA30A6E122BAFEF1E5391EFAEAA78C41153BFACB5
5EF232C408E17AEB1292E635BE01D26B5AE5374C7E15929EB2A058B6A330AEE5
710388B71CACCBAB96EE405DCF6A3DD46DBFC77E1F3F1F1A5A7476DA237E88D3
F1BF64ADB736CD98D1959AB25BE5FD54619FD58DFCB911ABF733FBD0822E7A0C
AE7A85E4083658152108652CB1D71B53BB577FEC7DC46B7913C7E907935D3F4F
FDB31FEE990DA3A11224FF86C61E38A796B63990C31F1EB7E810D7C7DD6EE730
50D0260C6E6C5CB249F1661358FD68420F8B91DD893D78C328A1DD4344F80D58
9438898385E535F4E7B85FB4FE7B054A183BFDF418D3C45C26803F091EBA60BB
DC6F1EFC1874BEC777212D9B459D07E116C347A9AA3CF719E7737B823C551E05
67F24CCABC332ED75923CE456AB72301B0251F36E3D689C3027E047DF2C0E3ED
C15E536A5171289E0B47822755C5ADBC77754454ACBF44DCC6A4C4D7424DB74C
7F3562D5997272514A364442B81B6E2A337FB34B709B53777BB6D4FFEBA69B39
31F1BB8410572CF48FC0D73515EE0608D09CD67295DB83091E816DD90ED263A8
E01FE9A019129D9B2386B85577F40EEDD9D2BCFB1A0AC79E38E95EB7B328FF3D
DEE7711F575B03EE78A8DBA33EEB62D9234F6B100D0C4F4920B21B7BCADED97B
9816A707C8FE1261CCEFF449BC01E74DC3A6D0715C2F9CDF5B316399D9ED5923
2A4589BBCA1B4CA1D1516D73B0EAB3B171EAFD88E551B62DE85F0B5EEA53B945
95D530F3247EE605FA1C4D43167963CA4867450C3394D4314D0F77E5CE43A652
54867DC84E082886AB4B7778ABA741FD5994F71B8DE9E57D6CBB9526F0AD3695
3133D2807732B1ADF0E97E8F6C48BFE15EF2186812C1137AB8EF71F1A4A74F1C
6DC92BAD0E7DD1ED40FC8B90AF9835E6628D1703608CCA6F3C73E0DD6F4B6B82
89C4301B89BC2A18AA8EEA06257AEE9B6F59261F63B7364F0434DCF80171EC3D
B73BE1199A643A2EC629A136F85FCE9FF94423E4BA20E73C639C9CB658ED9468
B1EEAB4A4E32A9178D75D68FAE6C347163D5F1C215081BCBBDB16CEF74D69D57
97935579FD9054CC40A03442A3DC28B98111AD9E22C30A855C43B16D25B129C5
61380A72D5FB288CFCCD696AEB669E990E130E7FC3F2A827D606A0E1723660DF
5EA18FEEC53A3532B14AF8B65254543E76A7FBC85B2A542F7FC9A51F8E909FF9
479A937548787C134C55B37555697114A4FD9D9FD3E3683E9E36AEEB1621B5E9
40B4A0B476A569D91A99130E45A5FDFFD7FD20791156AAFFE625D6CFB4694DD3
712674426987A05DE1600045623C9C8311B3B1049F4C68B7F0FC4365250A9684
C79035CB7FB2162F2EB247BEFA9AE9119CC91FBF04CEC68645EB19A8DF9A5FAE
4A8698B73D3FB2644CA85072F0CD143FCEF4247BE76E27504B9658DAF013403D
0514982237784DD4DE6FFF0354CCBAE1BD3C7D5D290627D55742921E9317970E
EBA5ECF7E33720FEC4482FE5907034CD2D204131E6E70F89702B626C8AEA82A3
5A6CDDB77062AE3E80967C2309BE13DA47FAD5F4E74F2DE2B207E60821A3B12E
D8F65E99BED5296A42FA06C771133B2A2D8FB272ACFF504FE687354753C23C70
35F4C41739407B36CCBEAF7A8A85BCB78779EAE6317427122D848BCB1A39DEFC
E2FA9178502FF75132FA245A53334E2DD3A895CF97BA9BA22E71B10EF1ED3879
87DEC6A663F2D6184989803D300987670D789DEB11D1F3686EEDCC992B0936A6
55BE7DA68A4CB2DE62CAE5A67FCBAD43E4AB3D5D881F2001FA777B6C7B86EDB1
DC4541706F5401A923841A699C4E53E45843A873839D90EA8C563E3D7B5FFA97
636F293F81382E44D97E6014FC3839A421916E49A208FB9A3A162A730EF6BAE7
13638A8CC72E39D412585CD80EA5CB2D08E5A4398E9EBA2F62D7F033E5C39886
4B32B6EC28663C3D739FC5FE9AB7CC2BA4801BC96D3840019D996829338617DD
5721DDF51424D440098573C9BA8AB7597378653EB071759C20755BFD50C0E792
B28A3A0DAD771689D4A291D261DB7899F9B384EA8EE4F0AD1F55CF3192319802
0FA7332E15C26A8FB0071F929BEDC1194E88C2DA01AFD12CC4BBFD43670C93B0
0E667C7006D981DA5CF53EE9F5D2C32685225B520CD7E9C204622C12654D8447
70B22B544A1D7183890CFC194CAE01F25BB2FADD0A5AFD28A06B86B56FA39002
72907DAD31616DB47916E1187C6725B5ED10AA13A656A1B789D0D1B24BF83903
34AF0C96317A08223025ABE8F68CBAEE31A848A21B3FB548CED240AFA5A2D193
A9DAAE22A5502AA3960BA661B0C1186F5CF480D75DEA4D715858C4C580556F49
C6F50D6ADA2D350F22F01709FF23E09FF59C1BF94D100498F2707FFA107CEAD2
849419BC2452AC129F097B498E6C923C486571DF2AD651D10CE9DABB4036065F
2A2AADD1309BA0945C36A8153B3EE71BA28FDD8E070864E455BFEE3201406564
D00EEF79A4C43AF07781FF3464953F5F54601AF69DBC05F6D5A8AD153FB13912
46CA87874E1BCCFCD149E988265769657080684EF8F4DF22EAF42A12698A0A3C
080399DE763EB41EEF4BD87458875D9527D5365E263AB406CDCBBE44A95C1A4D
FD60DA83629FFCB48213C92A1586136FBAB5FDBBC7D6FD6C84BE86580C55FA51
CAAD22737BB462ABC225A2D05F0A3DD8A25E30245BB394D19729063D02CBBBB7
BB46344B3F01325CE83F3AFD27C672C154879E06F3DE344C1FD550B03597A0FE
D2C8E8D949EEEEA536750EA451F0AF30AE4C327DB67C0CF4E01E8AEE8A058D45
C55F5DACBDDA1348E1D945F86017E625B9E7A0C451F4EF38A4B44033D20E21BB
FEC3B2C326B7D92AA5A1A30DF62673565B5FE5D985E0EFCDC9D613B3CD191161
441E572DD40E2BA54C164D42ACBCE605E02480B0C396FDEC73A9C717994623E8
95360BEDE0C2778E312EF02C9E832D61C11AF5FD0E596366964CD190D01CE4AE
DD50921426A715AB2C6DFBFCE8778F108A329F74A16DF7D20E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748070
BC9E11AE09380BC750752A6B8CBAE3CE0D07E063F36784D8E79144EDA0FF52A7
3010A1738945BA0F664F19C2BB944885AB3E1B7F2AB3177143A41626F4902BF4
6D68C5D0EA8F30C5056C0783CEFD9A1DA74C4347A1C0C6B4FE349CE0B34A0BA7
578BF125AD6329DAE47688F52328AB183CC9382CF3035845EBFAFD42AC44B40D
535DA60EA23BF76211CD865CB665507B45B50783C0B7F2B149EBC1EBB02C3340
839B74411B7B4A3385DA035E9EE81724A19ABB79794E0557D90085D8AFC0EC6F
43B313FD8B3F70DFA0A3271C6D709209D8E53BECCB5A4D2443EB3A07F9C8BF47
AD2CFB938B0ADC4336125473E7FA6FB9A3EDBB5401458A9F79AC191B8E09FC38
6D4FCE408B0D851D898AB9A7EC2C36181DC56F9B0188798F80A5F2E2E240900C
2AC7BDEF8FB9D4574698BC8D4E374B322A5AA48B228CF68EE0032B1968EB8811
9A375D4FBBDAE0C84509C5E1537974E0CAF7DAEC080E933813CC9E0BBF9C71C9
46EB77ED556CD01675A5D45FC8BD0647A724AF9C66AE82CB864AB947E3582308
319FF3BA8D533BC804C1C8059928ABE24544F41569DAEB22B54DCD2A5D1CE3C5
DCF36A5C431C4FEE372219E708FD90F346F585A48F89006ADDE2E437DCADA997
D6EEDB6D146BA0468D5C5AEDBFD0B89ACB6D7CA66947E5402ACDA287DD0CA50D
820C2B37B06923F120D56A0C6FB6BD37D5F0F0981C1346403A7633361F78409D
4B2CBC7735D8AD96087DF02E549D236CE935BD070836251EAD33E292DFF730F8
F5522401939235AD8969264FE89192867A43A9C57975E2058C5052184243BF0F
1C59096C65EB2AF5EA7C862D204B69542BF3D598161D8964402802C7DBBA4199
513973DF6C3F93511D5FF02F386E6D2D9A7F155E05B4BFEE9AF55DF00AC8FB40
BD44278F648DBF3C5FF496467AAE90D18BC7894744B66F08A2354B59EBFAADAC
2C659526D67D24DE8D65AD987C13729B6CB7687C318F24AEA108C97B8CDB4E5C
22E0474817FB8B14B8020D1746BFC2E5F4BAC9CE8C184579802BFC2DE6E3E117
08C2FFFF81CF943C674ABD5D49F7BBAE4BD4B85A15D3B8BD5EE079A3E2FE6B60
B472000C3634EFF1D9D4A48A44AF424FC1071E06B601AD871971EB50C68C7665
0377DDDE50B79EFF09EDAA7A346A156B248EB87ED2F99516F7E764076F4F6B05
8498DD6564D5AE6085AF78C0518256E1428B3F13D6BA34B47FCD73C3F56129B5
C8E34F657AA33A9CD514AF1B1D370ED8A45DD8045FEF849B9DEA6B3FF9842ADB
C787DDA6C496111587AF16D160F903D18173EAE25FE9193316171CDDC46E4502
A08EA966AF8CDE7EF615DA3CCFB394378BA16268FD4CA0E78CC3BA538AF40979
0C51F031FB81BE3E03AF7595603F1FC58606A2DDD9B16392476581F573BE69C4
3BB765ABA1E30F4E9B092082580C8DCBDF2A756A84BB82DB8F682C2CA913CB80
B4445E91049A10698468EEFD75591105D3F28E5A914E54BDF1C6E22EA9CF5869
C1114580E0650183100EE3007A0A90588C0BBE4F92C2B4902526B603D90130A8
A6834A3A893E83F29FAEC9562629211FA1D1D7FF6ED0C982334F53A074496884
6ED67DD8352FE7DF9EC5C0146D8A640714C2AAD3D99ED60ED4076C980EF0E22C
FEC79973AACEB0577F20636683E72A5BA4FB0D315ACEFFC8F70301938DBB48D6
C63E839B66E937B6945740586655FABA6E903300600D7DF1B987F56C87468AA5
348489847FF17FFCD715155B8CFCE66BB96D662B52337AEA9D8585330D5662F9
1F70ACF482157F0B6680EA7281A89B2072898ABF0D1083B6EE1E4B4675AE9DB0
FFA7248358A2BB614E1147A7B17D87DBC90C889BBCE840516D6A828DF93F9A8C
7DD22F765A108932818903ACCE65197A571008C8FDB79E914A608DE4804C3A1E
D153A2CD1AA4157F9A1266739D4973CD69A77994171455B0DEAB582C5D009A00
AB787BB5F1F5C87526316AD6C8D05BA06C0FAB70DD78B97B0BB996B90ED97F27
F2A1A6B9477C532E8E89F938593D803941BDF57FBD1E9FE8EEE93F1E8B4C0856
7A84DDD833E691CFFEBCDD7F57298101740ED5F25BE58140EC6367439A3A9ABA
672EA60C026374186884735AA209DCEF91669F3C2B6436EAC47BEAEBE7357B59
72A80CB0D3B67BFCDEC5826E499E8218E2E13145B5975FC8583C461578EC0172
0EC71CC3D449DC920DF33394FE8FE533165645850C0FAEB911375EB3EF1B7EF6
58C0AC92F55169B5B7D033A2C5F5574F484C9D5AFC240B355589A4349959DF8B
28A634ADDE08B79ABF0BA7F1CBFEA0CBCFD4050854DEDA2F6FC405844DF39AD4
18249FCE5A2CEDC1958F736F0B807AB3629EBFCE9078F5B6E10233D08E9AD0C5
978BF15C84269149C6FED782D313968E2375CD7FC51A7FA30F4240E40950D7AF
61C3BB8F675FBFB50569DFDCFC52A9093E17EAE932D7FB5DBC111936B4ECB4D6
A89EB75A6671B54E9A4003F80614F4E3A4098CB29CCB38091FA6F07898B5B614
D797BAE77FD9087939024BA419088D66536382B63FA7739EB9CF43891C199551
26536A0CCD449B9E75794F2DA40B83EA1DCF77F11FB27853BB2B5A377EF62A07
07A009C3A33C5F6E3DB4A29B3554FBC7E3ECE71257C40FDA7DE4032FFB91FFF7
CD0435C491343D95D470C6476931C8BEE88536D3E94820D04F36B9E4C08FDE1D
D0842D37EBF287EF5C9976DF611488027C557417E8F21CA85E0831FDE09AACF4
43B11929ECB0452F79A379E59C33B805280EB3C664711B79C61042642AE69E6B
4EAF80A39C4D90F971680BC87B2AD9B6653C1CAE4208040DFA9F2D2227353B22
9BB74470F01C57E209A8817294DB33328D25530932837707B3DEFB9974F6DC36
9BC63F24D85E44503355E8CBDE75771E956E0083F9ED4E504A6D12DBB28F9719
5A4A7292448E091B9538B9364175CD908FFB3EF908E174AF6A03F261795270FC
A6FE1A4C8A0D9AFC2AA6C6ABFA0793283CFFDD8E2CB18782295E5039EA6B946D
86A04DEE5A61EE058A53484157334416F8989BC53E298EEC82EC82A7CC550013
EF0751D95769AC7E6E6C4361C024784B06B2823D337EB6232120B68DE5B18848
FC019839C724CD22E97449648EC24E0C12677B359A4C54054207F8C1500116AB
9D3F3DFFD26818DE8F0DB5BD6DF3B285032EB1A5CA3260F6CE3434F4437ED895
EF69B35BA8D02C1B4850D2510D9D4D20C11B89DF0F6EE3AD4325CBE09D209376
EEAA934C9A4D90247137FCB1EE98205F5D24F9CD5AFF5C4B2D186D860CB30890
2C030B39E38267855E26F2F3CEEE3BA3335EEA77930DDE5E13DBCE08F047AC86
7A0C813DA63432C205724D25FCD2D6C3F6BE9A1AE3BD20EE5FAACD7D4419B8C9
FD19744AD2BCB065FF392276FC72B93766B2223F8A4018366FEEA164F5840622
09BCB7A53BFB7798583615DFA43D3EEB7F7AADF6C1E8CBB16DFA27818B62A536
443DD20FF8E7A40AE770765FEA23836D0F0FDB88E30C4203BD06F2DB2F7AE936
EDEFE67EF45C630B125E738A69DA831432D5AB9BD25463A87CE31BD48FAE509B
F8B43524493A0A2766F89A3B469675260AB67AB7E3002D36FA54701E87821E93
3C4AA1724E3EC3F0C8366DBE61CD79583BC4C0F11A37E44F04EE391EF7B602AA
92132E81CD704537DA9755F6C6337CBC8502FB7100B5D022AC2C008B8229E360
3CE12AA0572739404CFCD039B2E5C3592A4034F791C2D8CB4572DC644A208B1F
1358464AFD7C56D10E0CA85E7032F8A440616B20C0BA7B8D49507DAC3A4A309A
FC3915C406F0A8B7EBE431D1125BA5230D0F59B13CF2A669F29AB3A267F7AB2C
85B8BDB68C714909BBD7F324D349A403721508956EB6B151DCEF22
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (cours_convexite.dvi)
@start /Fa 93[30 30 161[{}2 76.3801 /Fourier-Math-Extension
rf /Fb 193[65 7[65 54[{}2 83.022 /MSAM10 rf /Fc 173[51
82[{}1 76.3801 /Fourier-Math-BlackBoard rf /Fd 207[17
48[{}1 58.049 /Fourier-Math-Symbols rf /Fe 135[30 47
31 37 21 27 24 1[37 35 38 56 3[18 37 1[19 31 1[30 1[32
38[16 10[28 16 24 45[{ TeXBase1Encoding ReEncodeFont }21
61.1042 /Utopia-Regular rf /Ff 153[27 102[{
 TeXBase1Encoding ReEncodeFont }1 87.0728 /Utopia-Italic
rf /Fh 188[80 67[{}1 119.552 /rsfs10 rf /Fi 176[86 13[71
65[{ TeXBase1Encoding ReEncodeFont }2 114.57 /Utopia-Italic
rf /Fk 94[82 161[{}1 114.57 /Fourier-Math-Symbols rf
/Fl 204[61 61 61 61 48[{ TeXBase1Encoding ReEncodeFont }4
114.57 /Utopia-Regular rf /Fm 22[40 112[40 1[40 48 28
34 34 1[47 45 49 1[24 2[24 48 41 1[40 46 38 1[42 51[30
5[19 35[49 3[{ TeXBase1Encoding ReEncodeFont }21 76.3802
/Utopia-Bold rf /Fn 57[55 55 18[38 16[55 105[0 5[78 15[76
33[{}7 76.3802 /Fourier-Math-Symbols rf /Fo 153[18 102[{
 TeXBase1Encoding ReEncodeFont }1 58.049 /Utopia-Italic
rf /Fp 204[31 31 50[{ TeXBase1Encoding ReEncodeFont }2
58.049 /Utopia-Regular rf /Fr 188[55 67[{}1 83.022 /rsfs10
rf /Fs 135[39 1[39 47 26 30 1[43 1[41 47 1[23 2[24 1[38
24 35 45 34 1[43 16[47 6[26 2[44 4[48 18[20 4[27 27 16
35[46 3[{ TeXBase1Encoding ReEncodeFont }25 76.3802 /Utopia-Italic
rf /Fu 54[44 44 111[44 2[47 40 44 47 51 44 51 47 54 36
2[18 47 1[40 44 47 2[44 65[{ TeXBase1Encoding ReEncodeFont }19
65.3798 /NimbusSanL-Regu rf /Fv 167[58 1[58 1[53 3[58
68 63 1[48 2[24 2[53 58 63 63 1[58 18[24 29 5[19 39[{
 TeXBase1Encoding ReEncodeFont }16 87.1731 /NimbusSanL-Regu
rf /Fw 54[70 112[70 1[70 1[64 4[81 76 4[29 3[70 1[76
67[{ TeXBase1Encoding ReEncodeFont }9 104.608 /NimbusSanL-Regu
rf /Fx 22[39 39 7[40 103[37 1[38 46 26 33 30 45 46 44
47 70 21 2[22 46 40 24 39 46 38 46 40 3[25 1[25 7[41
3[58 2[43 7[60 52 7[20 20 3[40 1[40 40 40 40 40 1[20
1[20 2[27 27 21 35[47 47 2[{ TeXBase1Encoding ReEncodeFont }46
76.3802 /Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author (Didier BONNEL - https://www.maths-cours.fr)/Keywords
() /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 100 -136 a Black 0 TeXcolorgray 109 79 a Fx(C)o(onvexit\351)3159
b(1)p 109 110 3544 2 v Black 0 TeXcolorgray 109 316 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def

109 316 a 109 316 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109 316 a 109 316 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 109 316 a 109
316 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109 316 a 109 316 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 109 316 a 109 316 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 109 316
a 109 316 a
SDict begin H.S end
 109 316 a 109 316 a
SDict begin 12 H.A end
 109 316 a 109 316 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 109
316 a 98 x Fw(CONVEXIT\311)p 0.4902 0.76077 0.27452 TeXcolorrgb
109 443 3544 4 v 0 TeXcolorgray 109 720 a Fv(I.)24 b(FONCTION)h
(CONVEXE)f(-)h(FONCTION)f(CONCA)-6 b(VE)p 0.86276 0.86276 0.86276
TeXcolorrgb 109 749 V 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray 111 1857 3539
894 v 1 TeXcolorgray 0 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 347 1143 a Fu(D\311FINITION)p 0 TeXcolorgray
347 1281 a Fx(S)o(oient)27 b Fs(f)36 b Fx(une)18 b(fonction)h(d\351r)q
(ivable)e(sur)g(un)h(inter)q(valle)j Fs(I)28 b Fx(et)17
b Fr(C)2231 1295 y Fo(f)2286 1281 y Fx(sa)g(courbe)g(r)o
(epr\351sentative)o(.)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 1410 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray
42 w Fx(On)g(dit)g(que)25 b Fs(f)36 b Fx(est)18 b Fm(conv)o(ex)o(e)c
Fx(sur)20 b Fs(I)27 b Fx(si)17 b(la)g(courbe)g Fr(C)2076
1424 y Fo(f)2130 1410 y Fx(est)h Fm(au-dessus)e Fx(de)h(toutes)h(ses)g
(tangentes)555 1510 y(sur)f(l)o('inter)q(valle)22 b Fs(I)9
b Fx(.)p 0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb
475 1639 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray 42
w Fx(On)14 b(dit)g(que)23 b Fs(f)33 b Fx(est)15 b Fm(concav)o(e)d
Fx(sur)17 b Fs(I)24 b Fx(si)15 b(la)f(courbe)g Fr(C)2047
1653 y Fo(f)2099 1639 y Fx(est)h Fm(au-dessous)e Fx(de)h(toutes)i(ses)f
(tangentes)555 1738 y(sur)i(l)o('inter)q(valle)22 b Fs(I)9
b Fx(.)p 1 TeXcolorgray 0.20392 0.59608 0.85883 TeXcolorrgb
109 964 3544 3 v 109 1858 3 896 v 3650 1858 V 109 1859
3544 3 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb 109 2085
a Fu(EXEMPLES)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 699 4295 a
 currentpoint currentpoint translate 0.68752 0.68752 scale neg exch
neg exch translate
 699 4295 a 802
4295 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 398.33841 a add def
/d 0.0 a add neg def /h 358.50473 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 802 4295 a 2456 2972 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0.86276 0.86276 0.86276  setrgbcolor -227.62195 -170.71646
227.62195 227.62195 -227.62195 -170.71646 56.90549 abs 56.90549 abs
1 0 { 0  setgray } 10.0 /NimbusSanL-Regu findfont 10.0 scalefont setfont
Grid grestore  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -199.1692  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -199.1692
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-159.33553  def /maxTickline 199.1692  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.90549  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 56.90549
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 199.1692
0.0 -159.33553   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -199.1692 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 199.1692  0 -159.33553  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -159.33553
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-199.1692  def /maxTickline 199.1692  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.90549  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 56.90549  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 199.1692
0.0 -159.33553   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -199.1692 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
2898 3124 a Fl(1)411 b(2)h(3)-1992 b Fk(\241)p Fl(1)-616
b Fk(\241)p Fl(2)h Fk(\241)p Fl(3)2320 3010 y(0)2238
3483 y Fk(\241)p Fl(1)2238 3956 y Fk(\241)p Fl(2)2320
2538 y(1)2320 2066 y(2)2320 1593 y(3)2456 2972 y
tx@Dict begin { -11.38092 -11.38092 } PutCoor PutBegin  end
 2456
2972 a 2364 3052 a Fi(O)2456 2972 y
tx@Dict begin  PutEnd  end
 2456 2972 a 2456
2972 a
tx@Dict begin { 119.50186 170.71646 } PutCoor PutBegin  end
 2456 2972 a 0 0 1 TeXcolorrgb 84 x Fh(C)2545 3077
y Ff(f)p 0 TeXcolorgray 2456 2972 a
tx@Dict begin  PutEnd  end
 2456 2972 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5 def /x1 3.5 def
/dx x1 x sub 999 div def /F@pstplot (2.71828^x-x-2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul } def
 /ps@Exit false def xy moveto  999 1 sub { /x x dx add def xy  dup
1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0 0 1
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot (-1)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul
} def  /ps@Exit false def xy moveto  9 1 sub { /x x dx add def xy 
dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30
56.90549 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0.4902 0.76077 0.27452  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot (1.71828*x-2)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul
} def  /ps@Exit false def xy moveto  9 1 sub { /x x dx add def xy 
dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30
56.90549 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0.4902 0.76077 0.27452  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot ((1/2.71828-1)*(x+2))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot
56.90549 mul } def  /ps@Exit false def xy moveto  9 1 sub { /x x dx
add def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } {
dup -1.e30 56.90549 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4109 4295 a
currentpoint initclip moveto
 4109 4295 a 699
4295 a
 currentpoint currentpoint translate 1 0.68752 div 1 0.68752 div scale
neg exch neg exch translate
 699 4295 a 0 TeXcolorgray 0 TeXcolorgray 1159
4549 a Fs(F)n(onction)17 b(conve)o(xe)f(\(et)h(quelques)f
(tangentes...\))p 0 TeXcolorgray 109 5980 3544 2 v OliveGreen
109 6094 a
SDict begin H.S end
 109 6094 a OliveGreen 0 TeXcolorgray -14 x
Fe(https://www)-5 b(.maths-cours)o(.fr/cours/convexite/)p
OliveGreen OliveGreen 1386 6034 a
SDict begin H.R end
 1386 6034 a 1386 6080
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/convexite/)>>/Subtype
/Link H.B /ANN pdfmark end
 1386 6080 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fx(C)o(onvexit\351)
3159 b(2)p 109 110 3544 2 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 699 2363
a
 currentpoint currentpoint translate 0.68752 0.68752 scale neg exch
neg exch translate
 699 2363 a 802 2363 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 398.33841 a add def
/d 0.0 a add neg def /h 358.50473 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 802 2363 a 2456 1040 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0.86276 0.86276 0.86276  setrgbcolor -227.62195 -170.71646
227.62195 227.62195 -227.62195 -170.71646 56.90549 abs 56.90549 abs
1 0 { 0  setgray } 10.0 /NimbusSanL-Regu findfont 10.0 scalefont setfont
Grid grestore  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -199.1692  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -199.1692
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-159.33553  def /maxTickline 199.1692  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.90549  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 56.90549
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 199.1692
0.0 -159.33553   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -199.1692 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 199.1692  0 -159.33553  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -159.33553
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-199.1692  def /maxTickline 199.1692  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.90549  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 56.90549  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 199.1692
0.0 -159.33553   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -199.1692 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2898 1191 a Fl(1)411 b(2)h(3)-1992
b Fk(\241)p Fl(1)-616 b Fk(\241)p Fl(2)h Fk(\241)p Fl(3)2320
1078 y(0)2238 1550 y Fk(\241)p Fl(1)2238 2023 y Fk(\241)p
Fl(2)2320 606 y(1)2320 133 y(2)2320 -340 y(3)2456 1040
y
tx@Dict begin { -11.38092 -11.38092 } PutCoor PutBegin  end
 2456 1040 a 2364 1120 a Fi(O)2456 1040 y
tx@Dict begin  PutEnd  end
 2456 1040
a 2456 1040 a
tx@Dict begin { 130.88278 -113.81097 } PutCoor PutBegin  end
 2456 1040 a 0 0 1 TeXcolorrgb 83 x Fh(C)2545
1145 y Ff(f)p 0 TeXcolorgray 2456 1040 a
tx@Dict begin  PutEnd  end
 2456 1040 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5 def /x1 3.5 def
/dx x1 x sub 999 div def /F@pstplot (-2.71828^x+x+4)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul } def
 /ps@Exit false def xy moveto  999 1 sub { /x x dx add def xy  dup
1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0 0 1
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot (3)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul } def
 /ps@Exit false def xy moveto  9 1 sub { /x x dx add def xy  dup 1.e30
56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0.4902
0.76077 0.27452  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot (-1.71828*x+4)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul
} def  /ps@Exit false def xy moveto  9 1 sub { /x x dx add def xy 
dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30
56.90549 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0.4902 0.76077 0.27452  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot ((-1/2.71828+1)*(x+2)+2)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot
56.90549 mul } def  /ps@Exit false def xy moveto  9 1 sub { /x x dx
add def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } {
dup -1.e30 56.90549 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4109 2363 a
currentpoint initclip moveto
 4109
2363 a 699 2363 a
 currentpoint currentpoint translate 1 0.68752 div 1 0.68752 div scale
neg exch neg exch translate
 699 2363 a 0 TeXcolorgray 0 TeXcolorgray
1157 2616 a Fs(F)n(onction)17 b(concave)f(\(et)h(quelques)f
(tangentes...\))p 1 0 0 TeXcolorrgb 1 TeXcolorgray 1
TeXcolorgray 111 3557 3539 712 v 1 TeXcolorgray 0 TeXcolorgray
1 0 0 TeXcolorrgb 347 3025 a Fu(TH\311OR\310ME)p 0 TeXcolorgray
347 3163 a Fx(S)o(i)26 b Fs(f)36 b Fx(est)18 b(d\351r)q(ivable)f(sur)i
Fs(I)28 b Fx(:)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 3292 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray
50 w Fs(f)36 b Fx(est)18 b(convexe)g(sur)i Fs(I)27 b
Fx(si)18 b(et)g(seulement)i(si)25 b Fs(f)1880 3257 y
Fd(0)1919 3292 y Fx(est)18 b Fm(croissante)d Fx(sur)k
Fs(I)p 0 TeXcolorgray 0.80392 0.91765 0.7451 TeXcolorrgb
475 3420 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray 50
w Fs(f)36 b Fx(est)18 b(concave)f(sur)j Fs(I)28 b Fx(si)17
b(et)h(seulement)i(si)26 b Fs(f)1882 3386 y Fd(0)1920
3420 y Fx(est)18 b Fm(d\351croissante)d Fx(sur)k Fs(I)p
1 TeXcolorgray 1 0 0 TeXcolorrgb 109 2846 3544 3 v 109
3559 3 714 v 3650 3559 V 109 3560 3544 3 v 0 TeXcolorgray
1 0 0 0 TeXcolorcmyk 109 3786 a Fu(REMARQ)o(UE)p 0 TeXcolorgray
109 3956 a Fx(L)-10 b('\351tude)25 b(de)e(la)h(convexit\351)h(se)f(r)o
(am\350ne)g(donc)f(\340)h(l)o('\351tude)h(des)e(var)q(iations)h(de)32
b Fs(f)2508 3922 y Fd(0)2529 3956 y Fx(.)24 b(S)o(i)31
b Fs(f)2709 3922 y Fd(0)2754 3956 y Fx(est)24 b(d\351r)q(ivable)o(,)f
(on)h(donc)f(est)109 4056 y(amen\351)18 b(a)f(\351tudier)h(le)g(signe)g
(la)f(d\351r)q(iv\351e)h(de)25 b Fs(f)1465 4022 y Fd(0)1486
4056 y Fx(.)18 b(C)o(ette)g(d\351r)q(iv\351e)g(s)m('appelle)i(la)d
Fm(d\351r)q(iv\351e)d(seconde)i Fx(de)25 b Fs(f)36 b
Fx(et)18 b(se)g(note)26 b Fs(f)3551 4022 y Fd(00)3589
4056 y Fx(.)p 1 0 0 TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray
111 5095 3539 892 v 1 TeXcolorgray 0 TeXcolorgray 1 0 0
TeXcolorrgb 347 4383 a Fu(TH\311OR\310ME)p 0 TeXcolorgray
347 4530 a Fx(S)o(i)g Fs(f)36 b Fx(est)18 b(d\351r)q(ivable)f(sur)i
Fs(I)28 b Fx(et)17 b(si)26 b Fs(f)1338 4496 y Fd(0)1377
4530 y Fx(est)18 b(d\351r)q(ivable)e(sur)k Fs(I)28 b
Fx(\(on)17 b(dit)g(aussi)h(que)26 b Fs(f)37 b Fx(est)18
b(2)f(fois)h(d\351r)q(ivable)347 4701 y(sur)i Fs(I)9
b Fx(\))18 b(:)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 4830 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray
50 w Fs(f)36 b Fx(est)18 b(convexe)g(sur)i Fs(I)27 b
Fx(si)18 b(et)g(seulement)i(si)25 b Fs(f)1880 4795 y
Fd(00)1936 4830 y Fx(est)18 b Fm(positiv)o(e)d(ou)h(nulle)g
Fx(sur)j Fs(I)p 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 475 4958 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray
50 w Fs(f)36 b Fx(est)18 b(concave)f(sur)j Fs(I)28 b
Fx(si)17 b(et)h(seulement)i(si)26 b Fs(f)1882 4924 y
Fd(00)1937 4958 y Fx(est)18 b Fm(n\351gativ)o(e)c(ou)i(nulle)g
Fx(sur)j Fs(I)p 1 TeXcolorgray 1 0 0 TeXcolorrgb 109
4203 3544 3 v 109 5097 3 895 v 3650 5097 V 109 5098 3544
3 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb 109 5324 a
Fu(EXEMPLES)p 0 TeXcolorgray 0 TeXcolorgray 0.80392 0.91765 0.7451
TeXcolorrgb 237 5538 a Fn(\262)p 0 TeXcolorgray 0 TeXcolorgray
41 w Fx(La)f(fonction)26 b Fs(f)33 b Fx(:)17 b Fs(x)j
Fn(7!)c Fs(x)1024 5504 y Fp(2)1077 5538 y Fx(est)i(deux)f(fois)h
(d\351r)q(ivable)f(sur)h Fc(R)p Fx(.)324 5652 y Fs(f)367
5618 y Fd(0)397 5653 y Fx(\()425 5652 y Fs(x)469 5653
y Fx(\))511 5652 y Fn(\306)c Fx(2)r Fs(x)23 b Fx(et)j
Fs(f)818 5618 y Fd(00)864 5653 y Fx(\()893 5652 y Fs(x)937
5653 y Fx(\))978 5652 y Fn(\306)14 b Fx(2.)316 5767 y(C)o(omme)27
b Fs(f)660 5732 y Fd(00)716 5767 y Fx(est)18 b(positive)h(sur)e
Fc(R)p Fx(,)25 b Fs(f)36 b Fx(est)18 b(convexe)g(sur)g
Fc(R)p Fx(.)p 0 TeXcolorgray 109 5980 3544 2 v OliveGreen
109 6094 a
SDict begin H.S end
 109 6094 a OliveGreen 0 TeXcolorgray -14 x
Fe(https://www)-5 b(.maths-cours)o(.fr/cours/convexite/)p
OliveGreen OliveGreen 1386 6034 a
SDict begin H.R end
 1386 6034 a 1386 6080
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/convexite/)>>/Subtype
/Link H.B /ANN pdfmark end
 1386 6080 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fx(C)o(onvexit\351)
3159 b(3)p 109 110 3544 2 v 0 TeXcolorgray 0 TeXcolorgray
0.80392 0.91765 0.7451 TeXcolorrgb 237 399 a Fn(\262)p
0 TeXcolorgray 0 TeXcolorgray 41 w Fx(La)18 b(fonction)26
b Fs(f)33 b Fx(:)17 b Fs(x)j Fn(7!)c Fs(x)1024 365 y
Fp(3)1077 399 y Fx(est)i(deux)f(fois)h(d\351r)q(ivable)f(sur)h
Fc(R)p Fx(.)324 513 y Fs(f)367 479 y Fd(0)397 514 y Fx(\()425
513 y Fs(x)469 514 y Fx(\))511 513 y Fn(\306)c Fx(3)r
Fs(x)666 479 y Fp(2)719 513 y Fx(et)26 b Fs(f)853 479
y Fd(00)899 514 y Fx(\()928 513 y Fs(x)972 514 y Fx(\))1013
513 y Fn(\306)14 b Fx(6)r Fs(x)5 b Fx(.)324 628 y Fs(f)367
593 y Fd(00)420 628 y Fb(>)14 b Fx(0)j(sur)683 629 y([)708
628 y(0;)8 b Fn(\3051)909 629 y Fx([)935 628 y(,)17 b(donc)26
b Fs(f)36 b Fx(est)18 b(convexe)g(sur)1775 629 y([)1801
628 y(0;)8 b Fn(\3051)2002 629 y Fx([)2028 628 y(.)324
742 y Fs(f)367 708 y Fd(00)420 742 y Fb(6)14 b Fx(0)j(sur)683
743 y(])708 742 y Fn(\2411)p Fx(;)8 b(0)909 743 y(])935
742 y(,)17 b(donc)26 b Fs(f)36 b Fx(est)18 b(concave)f(sur)1777
743 y(])1802 742 y Fn(\2411)p Fx(;)8 b(0)2003 743 y(])2029
742 y(.)109 1098 y Fv(II.)25 b(POINT)f(D'INFLEXION)p
0.86276 0.86276 0.86276 TeXcolorrgb 109 1127 3544 4 v
0 TeXcolorgray 0.20392 0.59608 0.85883 TeXcolorrgb 1
TeXcolorgray 1 TeXcolorgray 111 2166 3539 825 v 1 TeXcolorgray
0 TeXcolorgray 0.20392 0.59608 0.85883 TeXcolorrgb 347
1521 a Fu(D\311FINITION)p 0 TeXcolorgray 347 1660 a Fx(S)o(oient)47
b Fs(f)56 b Fx(une)39 b(fonction)f(d\351r)q(ivable)f(sur)h(un)g(inter)q
(valle)j Fs(I)9 b Fx(,)39 b Fr(C)2350 1674 y Fo(f)2425
1660 y Fx(sa)f(courbe)f(r)o(epr\351sentative)i(et)353
1759 y Fs(A)412 1695 y Fa(\241)444 1759 y Fs(a)t Fx(;)16
b Fs(f)578 1760 y Fx(\()607 1759 y Fs(a)654 1760 y Fx(\))680
1695 y Fa(\242)727 1759 y Fx(un)i(point)g(de)f(la)h(courbe)f
Fr(C)1543 1773 y Fo(f)1597 1759 y Fx(.)347 1930 y(On)26
b(dit)g(que)33 b Fs(A)28 b Fx(est)f(un)f Fm(point)e(d)n('in\003exion)h
Fx(de)h(la)g(courbe)g Fr(C)2234 1944 y Fo(f)2271 1930
y Fx(,)g(si)g(et)h(seulement)h(si)e(la)g(courbe)g Fr(C)3376
1944 y Fo(f)347 2029 y Fx(tr)o(averse)18 b(sa)g(tangente)g(en)24
b Fs(A)s Fx(.)p 1 TeXcolorgray 0.20392 0.59608 0.85883
TeXcolorrgb 109 1342 3544 3 v 109 2167 3 827 v 3650 2167
V 109 2168 3544 3 v 0 TeXcolorgray 1 0.37646 0 TeXcolorrgb
109 2395 a Fu(EXEMPLE)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 699 4603
a
 currentpoint currentpoint translate 0.68752 0.68752 scale neg exch
neg exch translate
 699 4603 a 802 4603 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 398.33841 a add def
/d 0.0 a add neg def /h 358.50473 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 802 4603 a 2456 3280 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0.86276 0.86276 0.86276  setrgbcolor -227.62195 -170.71646
227.62195 227.62195 -227.62195 -170.71646 56.90549 abs 56.90549 abs
1 0 { 0  setgray } 10.0 /NimbusSanL-Regu findfont 10.0 scalefont setfont
Grid grestore  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -199.1692  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -199.1692
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-159.33553  def /maxTickline 199.1692  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.90549  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 56.90549
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 199.1692
0.0 -159.33553   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -199.1692 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 199.1692  0 -159.33553  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -159.33553
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-199.1692  def /maxTickline 199.1692  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.90549  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 56.90549  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 199.1692
0.0 -159.33553   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -199.1692 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2898 3432 a Fl(1)411 b(2)h(3)-1992
b Fk(\241)p Fl(1)-616 b Fk(\241)p Fl(2)h Fk(\241)p Fl(3)2320
3318 y(0)2238 3791 y Fk(\241)p Fl(1)2238 4264 y Fk(\241)p
Fl(2)2320 2846 y(1)2320 2374 y(2)2320 1901 y(3)2456 3280
y
tx@Dict begin { -11.38092 -11.38092 } PutCoor PutBegin  end
 2456 3280 a 2364 3360 a Fi(O)2456 3280 y
tx@Dict begin  PutEnd  end
 2456 3280
a 2456 3280 a
tx@Dict begin { 165.02556 165.02556 } PutCoor PutBegin  end
 2456 3280 a 0 0 1 TeXcolorrgb 84 x Fh(C)2545
3385 y Ff(f)p 0 TeXcolorgray 2456 3280 a
tx@Dict begin  PutEnd  end
 2456 3280 a
2456 3280 a
tx@Dict begin { 62.59637 24.64 } PutCoor PutBegin  end
 2456 3280 a 1 0 0 TeXcolorrgb 9 w Fi(A)p
0 TeXcolorgray 2456 3280 a
tx@Dict begin  PutEnd  end
 2456 3280 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 1 0 0  setrgbcolor  [ 56.90549
18.9491   false NArray  /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5 def /x1 3.5 def
/dx x1 x sub 999 div def /F@pstplot (1/3*x^3-x^2+1)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul } def
 /ps@Exit false def xy moveto  999 1 sub { /x x dx add def xy  dup
1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0 0 1
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.4902 0.76077 0.27452  setrgbcolor 
/ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x -3.5
def /x1 3.5 def /dx x1 x sub 9 div def /F@pstplot (-x+4/3)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 56.90549 mul F@pstplot 56.90549 mul
} def  /ps@Exit false def xy moveto  9 1 sub { /x x dx add def xy 
dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30 56.90549 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 56.90549 mul gt { moveto } { dup -1.e30
56.90549 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0.4902 0.76077 0.27452  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4109 4603 a
currentpoint initclip moveto
 4109
4603 a 699 4603 a
 currentpoint currentpoint translate 1 0.68752 div 1 0.68752 div scale
neg exch neg exch translate
 699 4603 a 0 TeXcolorgray 0 TeXcolorgray
1516 4857 a Fs(P)n(oint)18 b(d)o('in\003e)o(xion)h(en)e(A)p
0.4902 0.76077 0.27452 TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray
111 5622 3539 536 v 1 TeXcolorgray 0 TeXcolorgray 0.4902 0.76077 0.27452
TeXcolorrgb 347 5266 a Fu(PR)o(OPRI\311T\311)p 0 TeXcolorgray
347 5403 a Fx(S)o(i)27 b Fs(A)c Fx(est)e(un)g(point)g(d)n('in\003exion)
h(d)n('abscisse)h Fs(a)t Fx(,)28 b Fs(f)39 b Fx(passe)22
b(de)e(concave)h(\340)f(convexe)h(ou)g(de)f(convexe)h(\340)347
5503 y(concave)d(en)h Fs(a)t Fx(.)p 1 TeXcolorgray
0.4902 0.76077 0.27452 TeXcolorrgb 109 5087 3544 3 v
109 5623 3 538 v 3650 5623 V 109 5624 3544 3 v 0 TeXcolorgray
0 TeXcolorgray 109 5980 3544 2 v OliveGreen 109 6094
a
SDict begin H.S end
 109 6094 a OliveGreen 0 TeXcolorgray -14 x Fe(https://www)-5
b(.maths-cours)o(.fr/cours/convexite/)p OliveGreen OliveGreen
1386 6034 a
SDict begin H.R end
 1386 6034 a 1386 6080 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/convexite/)>>/Subtype
/Link H.B /ANN pdfmark end
 1386 6080 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
100 -136 a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 100 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 79 a Fx(C)o(onvexit\351)
3159 b(4)p 109 110 3544 2 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
1 TeXcolorgray 1 TeXcolorgray 111 973 3539 654 v 1 TeXcolorgray
0 TeXcolorgray 1 0 0 TeXcolorrgb 347 498 a Fu(TH\311OR\310ME)p
0 TeXcolorgray 347 636 a Fx(S)o(oit)26 b Fs(f)36 b Fx(une)17
b(fonction)h(deux)f(fois)h(d\351r)q(ivable)e(sur)i(un)f(inter)q(valle)k
Fs(I)27 b Fx(de)16 b(courbe)h(r)o(epr\351sentative)i
Fr(C)3257 650 y Fo(f)3294 636 y Fx(.)e(Le)347 736 y(point)22
b Fs(A)17 b Fx(d)n('abscisse)g Fs(a)h Fx(est)d(un)f(point)i(d)n
('in\003exion)f(de)f Fr(C)2012 750 y Fo(f)2064 736 y
Fx(si)g(et)h(seulement)i(si)23 b Fs(f)2711 702 y Fd(00)2762
736 y Fm(s)m('annule)13 b(et)g(change)347 836 y(de)j(signe)f(en)j
Fs(a)t Fx(.)p 1 TeXcolorgray 1 0 0 TeXcolorrgb 109 319
3544 3 v 109 974 3 657 v 3650 974 V 109 975 3544 3 v
0 TeXcolorgray 1 0.37646 0 TeXcolorrgb 109 1201 a Fu(EXEMPLE)p
0 TeXcolorgray 109 1371 a Fx(Le)g(gr)o(aphique)g(de)f(l)o('exemple)j
(pr\351c\351dent)e(corr)o(espond)g(\340)f(la)g(fonction)i(d\351\002nie)
e(par)g(:)117 1577 y Fs(f)168 1578 y Fx(\()196 1577 y
Fs(x)240 1578 y Fx(\))282 1577 y Fn(\306)361 1521 y Fx(1)p
361 1557 41 5 v 361 1634 a(3)413 1577 y Fs(x)457 1542
y Fp(3)503 1577 y Fn(\241)12 b Fs(x)614 1542 y Fp(2)660
1577 y Fn(\305)e Fx(1)109 1786 y(On)17 b(a)25 b Fs(f)339
1752 y Fd(0)368 1787 y Fx(\()397 1786 y Fs(x)441 1787
y Fx(\))482 1786 y Fn(\306)17 b Fs(x)598 1752 y Fp(2)643
1786 y Fn(\241)10 b Fx(2)r Fs(x)23 b Fx(et)j Fs(f)946
1752 y Fd(00)992 1787 y Fx(\()1021 1786 y Fs(x)1065 1787
y Fx(\))1107 1786 y Fn(\306)14 b Fx(2)r Fs(x)h Fn(\241)10
b Fx(2.)109 1992 y(On)22 b(v\351r)q(i\002e)h(bien)g(que)31
b Fs(f)856 1957 y Fd(00)917 1992 y Fx(change)23 b(de)g(signe)g(en)g(1.)
g(Donc)g(le)g(point)29 b Fs(A)d Fx(d)n('abscisse)d(1)g(et)g(d)n('or)o
(donn\351e)31 b Fs(f)3282 1993 y Fx(\()3309 1992 y(1)3349
1993 y(\))3396 1992 y Fn(\306)3480 1936 y Fx(1)p 3480
1972 V 3480 2049 a(3)3553 1992 y(est)109 2114 y(bien)17
b(un)h(point)g(d)n('in\003exion.)p 0 TeXcolorgray 109
5980 3544 2 v OliveGreen 109 6094 a
SDict begin H.S end
 109 6094 a OliveGreen
0 TeXcolorgray -14 x Fe(https://www)-5 b(.maths-cours)o
(.fr/cours/convexite/)p OliveGreen OliveGreen 1386 6034
a
SDict begin H.R end
 1386 6034 a 1386 6080 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.maths-cours.fr/cours/convexite/)>>/Subtype
/Link H.B /ANN pdfmark end
 1386 6080 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
